using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace ISPTF.API.LINQ_Models
{
    public partial class ISPTFContext : DbContext
    {
        public ISPTFContext()
        {
        }

        public ISPTFContext(DbContextOptions<ISPTFContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public virtual DbSet<BotClassification> BotClassifications { get; set; }
        public virtual DbSet<BotIsic> BotIsics { get; set; }
        public virtual DbSet<ConvExbc> ConvExbcs { get; set; }
        public virtual DbSet<ConvExlc> ConvExlcs { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Ibaftx180105> Ibaftx180105s { get; set; }
        public virtual DbSet<Ibbftx180105> Ibbftx180105s { get; set; }
        public virtual DbSet<Ibbftx1801052> Ibbftx1801052s { get; set; }
        public virtual DbSet<Ibcftx180105> Ibcftx180105s { get; set; }
        public virtual DbSet<IdentityRole> IdentityRoles { get; set; }
        public virtual DbSet<IdentityUser> IdentityUsers { get; set; }
        public virtual DbSet<IdentityUserClaim> IdentityUserClaims { get; set; }
        public virtual DbSet<IdentityUserLogin> IdentityUserLogins { get; set; }
        public virtual DbSet<IdentityUserProfile> IdentityUserProfiles { get; set; }
        public virtual DbSet<IdentityUserRole> IdentityUserRoles { get; set; }
        public virtual DbSet<MAccount> MAccounts { get; set; }
        public virtual DbSet<MAccount1> MAccount1s { get; set; }
        public virtual DbSet<MAocode> MAocodes { get; set; }
        public virtual DbSet<MApperror> MApperrors { get; set; }
        public virtual DbSet<MAuth> MAuths { get; set; }
        public virtual DbSet<MBankFile> MBankFiles { get; set; }
        public virtual DbSet<MBranch> MBranches { get; set; }
        public virtual DbSet<MBuArea> MBuAreas { get; set; }
        public virtual DbSet<MBusType> MBusTypes { get; set; }
        public virtual DbSet<MCampaign> MCampaigns { get; set; }
        public virtual DbSet<MControl> MControls { get; set; }
        public virtual DbSet<MControlBatch> MControlBatches { get; set; }
        public virtual DbSet<MControlDate> MControlDates { get; set; }
        public virtual DbSet<MCountry> MCountries { get; set; }
        public virtual DbSet<MCurrency> MCurrencies { get; set; }
        public virtual DbSet<MCustRate> MCustRates { get; set; }
        public virtual DbSet<MCustTfl> MCustTfls { get; set; }
        public virtual DbSet<MCustType> MCustTypes { get; set; }
        public virtual DbSet<MCustomer> MCustomers { get; set; }
        public virtual DbSet<MDsperror> MDsperrors { get; set; }
        public virtual DbSet<MFcdAccount> MFcdAccounts { get; set; }
        public virtual DbSet<MFcdRate> MFcdRates { get; set; }
        public virtual DbSet<MGood> MGoods { get; set; }
        public virtual DbSet<MInRateCode> MInRateCodes { get; set; }
        public virtual DbSet<MLimitCode> MLimitCodes { get; set; }
        public virtual DbSet<MLoCode> MLoCodes { get; set; }
        public virtual DbSet<MMapAccount> MMapAccounts { get; set; }
        public virtual DbSet<MMapBalanceCd> MMapBalanceCds { get; set; }
        public virtual DbSet<MMapFacno> MMapFacnos { get; set; }
        public virtual DbSet<MMapProduct> MMapProducts { get; set; }
        public virtual DbSet<MMapProductGfm> MMapProductGfms { get; set; }
        public virtual DbSet<MMapSaleUnit> MMapSaleUnits { get; set; }
        public virtual DbSet<MMapSwift> MMapSwifts { get; set; }
        public virtual DbSet<MNostroGl> MNostroGls { get; set; }
        public virtual DbSet<MPlanComm> MPlanComms { get; set; }
        public virtual DbSet<MProvince> MProvinces { get; set; }
        public virtual DbSet<MPurpose> MPurposes { get; set; }
        public virtual DbSet<MRelation> MRelations { get; set; }
        public virtual DbSet<MRunning> MRunnings { get; set; }
        public virtual DbSet<MSetGenGl> MSetGenGls { get; set; }
        public virtual DbSet<MSetGenGl2> MSetGenGl2s { get; set; }
        public virtual DbSet<MSetGenGl3> MSetGenGl3s { get; set; }
        public virtual DbSet<MSetGenGlbk> MSetGenGlbks { get; set; }
        public virtual DbSet<MSetRate> MSetRates { get; set; }
        public virtual DbSet<MTextFile> MTextFiles { get; set; }
        public virtual DbSet<MTitle> MTitles { get; set; }
        public virtual DbSet<MTranType> MTranTypes { get; set; }
        public virtual DbSet<MUser> MUsers { get; set; }
        public virtual DbSet<Mlogin> Mlogins { get; set; }
        public virtual DbSet<PBankLiab> PBankLiabs { get; set; }
        public virtual DbSet<PBankLimit> PBankLimits { get; set; }
        public virtual DbSet<PBankLmProduct> PBankLmProducts { get; set; }
        public virtual DbSet<PBankLsum> PBankLsums { get; set; }
        public virtual DbSet<PBlogLimit> PBlogLimits { get; set; }
        public virtual DbSet<PBlogLmProduct> PBlogLmProducts { get; set; }
        public virtual DbSet<PClogLimit> PClogLimits { get; set; }
        public virtual DbSet<PClogLmCc> PClogLmCcs { get; set; }
        public virtual DbSet<PClogLmProduct> PClogLmProducts { get; set; }
        public virtual DbSet<PClogShare> PClogShares { get; set; }
        public virtual DbSet<PControlPack> PControlPacks { get; set; }
        public virtual DbSet<PCustAppv> PCustAppvs { get; set; }
        public virtual DbSet<PCustAppvDet> PCustAppvDets { get; set; }
        public virtual DbSet<PCustLiab> PCustLiabs { get; set; }
        public virtual DbSet<PCustLimit> PCustLimits { get; set; }
        public virtual DbSet<PCustLmCc> PCustLmCcs { get; set; }
        public virtual DbSet<PCustLmProduct> PCustLmProducts { get; set; }
        public virtual DbSet<PCustLsum> PCustLsums { get; set; }
        public virtual DbSet<PCustShare> PCustShares { get; set; }
        public virtual DbSet<PDailyGl> PDailyGls { get; set; }
        public virtual DbSet<PDailyGl4> PDailyGl4s { get; set; }
        public virtual DbSet<PDailyGlmap> PDailyGlmaps { get; set; }
        public virtual DbSet<PDailyGlsum> PDailyGlsums { get; set; }
        public virtual DbSet<PDailySap> PDailySaps { get; set; }
        public virtual DbSet<PDailySapHead> PDailySapHeads { get; set; }
        public virtual DbSet<PDailySapMap> PDailySapMaps { get; set; }
        public virtual DbSet<PDmsfla> PDmsflas { get; set; }
        public virtual DbSet<PDmsftu> PDmsftus { get; set; }
        public virtual DbSet<PDmsftx> PDmsftxes { get; set; }
        public virtual DbSet<PDmsftxlimit> PDmsftxlimits { get; set; }
        public virtual DbSet<PDmsltx> PDmsltxes { get; set; }
        public virtual DbSet<PDmsptx> PDmsptxes { get; set; }
        public virtual DbSet<PDocRegInv> PDocRegInvs { get; set; }
        public virtual DbSet<PDocRegInv1> PDocRegInv1s { get; set; }
        public virtual DbSet<PDocRegInv2> PDocRegInv2s { get; set; }
        public virtual DbSet<PDocRegister> PDocRegisters { get; set; }
        public virtual DbSet<PDombe> PDombes { get; set; }
        public virtual DbSet<PDomlc> PDomlcs { get; set; }
        public virtual DbSet<PExPastDue> PExPastDues { get; set; }
        public virtual DbSet<PExPayment> PExPayments { get; set; }
        public virtual DbSet<PExad> PExads { get; set; }
        public virtual DbSet<PExadSwin> PExadSwins { get; set; }
        public virtual DbSet<PExbc> PExbcs { get; set; }
        public virtual DbSet<PExchange> PExchanges { get; set; }
        public virtual DbSet<PExdoc> PExdocs { get; set; }
        public virtual DbSet<PExinterest> PExinterests { get; set; }
        public virtual DbSet<PExlc> PExlcs { get; set; }
        public virtual DbSet<PExpc> PExpcs { get; set; }
        public virtual DbSet<PExpc2> PExpc2s { get; set; }
        public virtual DbSet<PExpc3> PExpc3s { get; set; }
        public virtual DbSet<PExpcA> PExpcAs { get; set; }
        public virtual DbSet<PExpcOrder> PExpcOrders { get; set; }
        public virtual DbSet<PFcdAccTran> PFcdAccTrans { get; set; }
        public virtual DbSet<PFcdDayBalance> PFcdDayBalances { get; set; }
        public virtual DbSet<PFcdIntRate> PFcdIntRates { get; set; }
        public virtual DbSet<PFcdtext> PFcdtexts { get; set; }
        public virtual DbSet<PHoliday> PHolidays { get; set; }
        public virtual DbSet<PImbackPay> PImbackPays { get; set; }
        public virtual DbSet<PImbc> PImbcs { get; set; }
        public virtual DbSet<PImbl> PImbls { get; set; }
        public virtual DbSet<PImbldoc> PImbldocs { get; set; }
        public virtual DbSet<PImbltext> PImbltexts { get; set; }
        public virtual DbSet<PIminstall> PIminstalls { get; set; }
        public virtual DbSet<PIminterest> PIminterests { get; set; }
        public virtual DbSet<PImlc> PImlcs { get; set; }
        public virtual DbSet<PImlcamend> PImlcamends { get; set; }
        public virtual DbSet<PImlccond> PImlcconds { get; set; }
        public virtual DbSet<PImlcdoc> PImlcdocs { get; set; }
        public virtual DbSet<PImlcgood> PImlcgoods { get; set; }
        public virtual DbSet<PImlctext> PImlctexts { get; set; }
        public virtual DbSet<PImmiscTran> PImmiscTrans { get; set; }
        public virtual DbSet<PImmiscTranx> PImmiscTranxes { get; set; }
        public virtual DbSet<PImpastDue> PImpastDues { get; set; }
        public virtual DbSet<PImpayment> PImpayments { get; set; }
        public virtual DbSet<PImsg> PImsgs { get; set; }
        public virtual DbSet<PImtr> PImtrs { get; set; }
        public virtual DbSet<PImtr2> PImtr2s { get; set; }
        public virtual DbSet<PImtr3> PImtr3s { get; set; }
        public virtual DbSet<PImtrinvoice> PImtrinvoices { get; set; }
        public virtual DbSet<PImtrtext> PImtrtexts { get; set; }
        public virtual DbSet<PInstall> PInstalls { get; set; }
        public virtual DbSet<PIntRate> PIntRates { get; set; }
        public virtual DbSet<PLogBatch> PLogBatches { get; set; }
        public virtual DbSet<PLogConnect1P> PLogConnect1Ps { get; set; }
        public virtual DbSet<PLogCustLiab> PLogCustLiabs { get; set; }
        public virtual DbSet<PLogErrorConnect1P> PLogErrorConnect1Ps { get; set; }
        public virtual DbSet<PLogFcdAccount> PLogFcdAccounts { get; set; }
        public virtual DbSet<PLogImportCb> PLogImportCbs { get; set; }
        public virtual DbSet<PLogLoadText> PLogLoadTexts { get; set; }
        public virtual DbSet<PLogMainConnect1P> PLogMainConnect1Ps { get; set; }
        public virtual DbSet<PLogMasterOut> PLogMasterOuts { get; set; }
        public virtual DbSet<PLogQueryAc1p> PLogQueryAc1ps { get; set; }
        public virtual DbSet<PLogRequest1P> PLogRequest1Ps { get; set; }
        public virtual DbSet<PLogSendMail> PLogSendMails { get; set; }
        public virtual DbSet<PLogSendMail1> PLogSendMail1s { get; set; }
        public virtual DbSet<PLogSwift> PLogSwifts { get; set; }
        public virtual DbSet<PLogSwiftInDetail> PLogSwiftInDetails { get; set; }
        public virtual DbSet<PLogSwiftInFile> PLogSwiftInFiles { get; set; }
        public virtual DbSet<PLogSwiftInHead> PLogSwiftInHeads { get; set; }
        public virtual DbSet<PLogSwiftR> PLogSwiftRs { get; set; }
        public virtual DbSet<PLogUnlockDoc> PLogUnlockDocs { get; set; }
        public virtual DbSet<PLogUser> PLogUsers { get; set; }
        public virtual DbSet<PMasterDailyOut> PMasterDailyOuts { get; set; }
        public virtual DbSet<PMasterDailyOuts1> PMasterDailyOuts1s { get; set; }
        public virtual DbSet<PMasterDailyOuts2> PMasterDailyOuts2s { get; set; }
        public virtual DbSet<PMidRate> PMidRates { get; set; }
        public virtual DbSet<PMisctran> PMisctrans { get; set; }
        public virtual DbSet<PMonAccrued> PMonAccrueds { get; set; }
        public virtual DbSet<PMonCustInvoice> PMonCustInvoices { get; set; }
        public virtual DbSet<PMonthlyInterest> PMonthlyInterests { get; set; }
        public virtual DbSet<POnlunMatchCust> POnlunMatchCusts { get; set; }
        public virtual DbSet<PPayDetail> PPayDetails { get; set; }
        public virtual DbSet<PPayment> PPayments { get; set; }
        public virtual DbSet<PReferenceNo> PReferenceNos { get; set; }
        public virtual DbSet<PRefinance> PRefinances { get; set; }
        public virtual DbSet<PRemCleanBill> PRemCleanBills { get; set; }
        public virtual DbSet<PRemCleanBillCcy> PRemCleanBillCcies { get; set; }
        public virtual DbSet<PRemPartial> PRemPartials { get; set; }
        public virtual DbSet<PRemSwmap> PRemSwmaps { get; set; }
        public virtual DbSet<PRemit> PRemits { get; set; }
        public virtual DbSet<PRemitBill> PRemitBills { get; set; }
        public virtual DbSet<PRemittance> PRemittances { get; set; }
        public virtual DbSet<PRevalueRate> PRevalueRates { get; set; }
        public virtual DbSet<PSblc> PSblcs { get; set; }
        public virtual DbSet<PSendLcmail> PSendLcmails { get; set; }
        public virtual DbSet<PSumDmsfla> PSumDmsflas { get; set; }
        public virtual DbSet<PSumDmsftu> PSumDmsftus { get; set; }
        public virtual DbSet<PSumDmsftx> PSumDmsftxes { get; set; }
        public virtual DbSet<PSumDmsltx> PSumDmsltxes { get; set; }
        public virtual DbSet<PSumdmsptx> PSumdmsptxes { get; set; }
        public virtual DbSet<PSw700> PSw700s { get; set; }
        public virtual DbSet<PSw700a> PSw700as { get; set; }
        public virtual DbSet<PSw707> PSw707s { get; set; }
        public virtual DbSet<PSwexport> PSwexports { get; set; }
        public virtual DbSet<PSwimbc> PSwimbcs { get; set; }
        public virtual DbSet<PSwimbl> PSwimbls { get; set; }
        public virtual DbSet<PSwimlc> PSwimlcs { get; set; }
        public virtual DbSet<PSwimpSblc> PSwimpSblcs { get; set; }
        public virtual DbSet<PSwimpText> PSwimpTexts { get; set; }
        public virtual DbSet<PSwimport> PSwimports { get; set; }
        public virtual DbSet<PSwimtr> PSwimtrs { get; set; }
        public virtual DbSet<PSwmisc> PSwmiscs { get; set; }
        public virtual DbSet<PSwprint> PSwprints { get; set; }
        public virtual DbSet<PSwprintFm> PSwprintFms { get; set; }
        public virtual DbSet<PSwsending> PSwsendings { get; set; }
        public virtual DbSet<PSwtextLoad> PSwtextLoads { get; set; }
        public virtual DbSet<PTradeApp> PTradeApps { get; set; }
        public virtual DbSet<PTranFcdBalance> PTranFcdBalances { get; set; }
        public virtual DbSet<PTransfer> PTransfers { get; set; }
        public virtual DbSet<Pexbc2> Pexbc2s { get; set; }
        public virtual DbSet<Pexlc1> Pexlc1s { get; set; }
        public virtual DbSet<Pexlc2> Pexlc2s { get; set; }
        public virtual DbSet<Sheet1> Sheet1s { get; set; }
        public virtual DbSet<Sheet12> Sheet12s { get; set; }
        public virtual DbSet<Sheet22> Sheet22s { get; set; }
        public virtual DbSet<TUnUseAcc> TUnUseAccs { get; set; }
        public virtual DbSet<TmpAtsfile> TmpAtsfiles { get; set; }
        public virtual DbSet<TmpBankLiab> TmpBankLiabs { get; set; }
        public virtual DbSet<TmpBankLiabCust> TmpBankLiabCusts { get; set; }
        public virtual DbSet<TmpCcsmaster> TmpCcsmasters { get; set; }
        public virtual DbSet<TmpCcsout> TmpCcsouts { get; set; }
        public virtual DbSet<TmpComm> TmpComms { get; set; }
        public virtual DbSet<TmpCustLiab> TmpCustLiabs { get; set; }
        public virtual DbSet<TmpCustLsum> TmpCustLsums { get; set; }
        public virtual DbSet<TmpDmsptx> TmpDmsptxes { get; set; }
        public virtual DbSet<TmpExchange> TmpExchanges { get; set; }
        public virtual DbSet<TmpExpDm> TmpExpDms { get; set; }
        public virtual DbSet<TmpFirstDate> TmpFirstDates { get; set; }
        public virtual DbSet<TmpForwardCont> TmpForwardConts { get; set; }
        public virtual DbSet<TmpInterest> TmpInterests { get; set; }
        public virtual DbSet<TmpInvoice> TmpInvoices { get; set; }
        public virtual DbSet<TmpLiability> TmpLiabilities { get; set; }
        public virtual DbSet<TmpLogImcb> TmpLogImcbs { get; set; }
        public virtual DbSet<TmpMainConnect1P> TmpMainConnect1Ps { get; set; }
        public virtual DbSet<TmpMasterGl> TmpMasterGls { get; set; }
        public virtual DbSet<TmpMonAccrued> TmpMonAccrueds { get; set; }
        public virtual DbSet<TmpMonthInt> TmpMonthInts { get; set; }
        public virtual DbSet<TmpOnlLcout> TmpOnlLcouts { get; set; }
        public virtual DbSet<TmpOnlLcswfile> TmpOnlLcswfiles { get; set; }
        public virtual DbSet<TmpOscc> TmpOsccs { get; set; }
        public virtual DbSet<TmpPDailyGl> TmpPDailyGls { get; set; }
        public virtual DbSet<TmpPMasterDailyOut> TmpPMasterDailyOuts { get; set; }
        public virtual DbSet<TmpReposgrpcl> TmpReposgrpcls { get; set; }
        public virtual DbSet<TmpReveMaster> TmpReveMasters { get; set; }
        public virtual DbSet<TmpReveOut> TmpReveOuts { get; set; }
        public virtual DbSet<TmpRptAmortize> TmpRptAmortizes { get; set; }
        public virtual DbSet<TmpRptMail> TmpRptMails { get; set; }
        public virtual DbSet<TmpSecurity> TmpSecurities { get; set; }
        public virtual DbSet<TmpSumacc> TmpSumaccs { get; set; }
        public virtual DbSet<TmpSwbankFile> TmpSwbankFiles { get; set; }
        public virtual DbSet<TmpSwiftInDetail> TmpSwiftInDetails { get; set; }
        public virtual DbSet<TmpSwiftin> TmpSwiftins { get; set; }
        public virtual DbSet<TmpUser> TmpUsers { get; set; }
        public virtual DbSet<TmpVolCorrBank> TmpVolCorrBanks { get; set; }
        public virtual DbSet<TmpVolCorrIncome> TmpVolCorrIncomes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<VBankSumFac> VBankSumFacs { get; set; }
        public virtual DbSet<VCommision> VCommisions { get; set; }
        public virtual DbSet<VContingent> VContingents { get; set; }
        public virtual DbSet<VCustLiability> VCustLiabilities { get; set; }
        public virtual DbSet<VCustSumFac> VCustSumFacs { get; set; }
        public virtual DbSet<VCustomerAcc> VCustomerAccs { get; set; }
        public virtual DbSet<VExpDmsftxftu> VExpDmsftxftus { get; set; }
        public virtual DbSet<VForwardCont> VForwardConts { get; set; }
        public virtual DbSet<VImfwcont> VImfwconts { get; set; }
        public virtual DbSet<VLinkTfl> VLinkTfls { get; set; }
        public virtual DbSet<VMasterMonInt> VMasterMonInts { get; set; }
        public virtual DbSet<VMasterOduLoan> VMasterOduLoans { get; set; }
        public virtual DbSet<VMonAccured> VMonAccureds { get; set; }
        public virtual DbSet<VMonthAmort> VMonthAmorts { get; set; }
        public virtual DbSet<VMonthAmortback> VMonthAmortbacks { get; set; }
        public virtual DbSet<VRefundTax> VRefundTaxes { get; set; }
        public virtual DbSet<VTranPaymentLoan> VTranPaymentLoans { get; set; }
        public virtual DbSet<VauthModule> VauthModules { get; set; }
        public virtual DbSet<VdayTranSum> VdayTranSums { get; set; }
        public virtual DbSet<VdayTranSum2> VdayTranSum2s { get; set; }
        public virtual DbSet<Vfindkeyno> Vfindkeynos { get; set; }
        public virtual DbSet<ViewAllRemRate> ViewAllRemRates { get; set; }
        public virtual DbSet<ViewAllRemit> ViewAllRemits { get; set; }
        public virtual DbSet<ViewAremExchRate> ViewAremExchRates { get; set; }
        public virtual DbSet<ViewBankLiab> ViewBankLiabs { get; set; }
        public virtual DbSet<ViewBankLimit> ViewBankLimits { get; set; }
        public virtual DbSet<ViewBankLsum> ViewBankLsums { get; set; }
        public virtual DbSet<ViewBusVolume> ViewBusVolumes { get; set; }
        public virtual DbSet<ViewCc> ViewCcs { get; set; }
        public virtual DbSet<ViewClbout> ViewClbouts { get; set; }
        public virtual DbSet<ViewCreditLimit> ViewCreditLimits { get; set; }
        public virtual DbSet<ViewCreditLimitTmp> ViewCreditLimitTmps { get; set; }
        public virtual DbSet<ViewCustLiab> ViewCustLiabs { get; set; }
        public virtual DbSet<ViewCustLimit> ViewCustLimits { get; set; }
        public virtual DbSet<ViewCustLm> ViewCustLms { get; set; }
        public virtual DbSet<ViewCustLsum> ViewCustLsums { get; set; }
        public virtual DbSet<ViewCustShare> ViewCustShares { get; set; }
        public virtual DbSet<ViewDayRemExchRate> ViewDayRemExchRates { get; set; }
        public virtual DbSet<ViewDayTran> ViewDayTrans { get; set; }
        public virtual DbSet<ViewExPayment> ViewExPayments { get; set; }
        public virtual DbSet<ViewFcdAccount> ViewFcdAccounts { get; set; }
        public virtual DbSet<ViewFcdout> ViewFcdouts { get; set; }
        public virtual DbSet<ViewFcpimport> ViewFcpimports { get; set; }
        public virtual DbSet<ViewGenAcc> ViewGenAccs { get; set; }
        public virtual DbSet<ViewGendlc> ViewGendlcs { get; set; }
        public virtual DbSet<ViewGroupGl> ViewGroupGls { get; set; }
        public virtual DbSet<ViewIsptfl> ViewIsptfls { get; set; }
        public virtual DbSet<ViewIsptfl2> ViewIsptfl2s { get; set; }
        public virtual DbSet<ViewLastExchRate> ViewLastExchRates { get; set; }
        public virtual DbSet<ViewLcInfo> ViewLcInfos { get; set; }
        public virtual DbSet<ViewMapAccount> ViewMapAccounts { get; set; }
        public virtual DbSet<ViewMapDailyGl> ViewMapDailyGls { get; set; }
        public virtual DbSet<ViewMaster> ViewMasters { get; set; }
        public virtual DbSet<ViewMasterClose> ViewMasterCloses { get; set; }
        public virtual DbSet<ViewMasterDailyOut> ViewMasterDailyOuts { get; set; }
        public virtual DbSet<ViewMasterGl> ViewMasterGls { get; set; }
        public virtual DbSet<ViewMasterLoan> ViewMasterLoans { get; set; }
        public virtual DbSet<ViewMasterOdu> ViewMasterOdus { get; set; }
        public virtual DbSet<ViewMasterRecalLiab> ViewMasterRecalLiabs { get; set; }
        public virtual DbSet<ViewMonInterest> ViewMonInterests { get; set; }
        public virtual DbSet<ViewNostro> ViewNostros { get; set; }
        public virtual DbSet<ViewOdu> ViewOdus { get; set; }
        public virtual DbSet<ViewOsbyCc> ViewOsbyCcs { get; set; }
        public virtual DbSet<ViewOsbyCcs1> ViewOsbyCcs1s { get; set; }
        public virtual DbSet<ViewOutIsp> ViewOutIsps { get; set; }
        public virtual DbSet<ViewPayInterest> ViewPayInterests { get; set; }
        public virtual DbSet<ViewPayPrnciple> ViewPayPrnciples { get; set; }
        public virtual DbSet<ViewPayment> ViewPayments { get; set; }
        public virtual DbSet<ViewPending> ViewPendings { get; set; }
        public virtual DbSet<ViewQuoteRate> ViewQuoteRates { get; set; }
        public virtual DbSet<ViewRemTran> ViewRemTrans { get; set; }
        public virtual DbSet<ViewReposgrpCl> ViewReposgrpCls { get; set; }
        public virtual DbSet<ViewShowOsbyCc> ViewShowOsbyCcs { get; set; }
        public virtual DbSet<ViewSubOutCust> ViewSubOutCusts { get; set; }
        public virtual DbSet<ViewSumMonInt> ViewSumMonInts { get; set; }
        public virtual DbSet<ViewTmpBack> ViewTmpBacks { get; set; }
        public virtual DbSet<ViewTransClb> ViewTransClbs { get; set; }
        public virtual DbSet<ViewTrnostro> ViewTrnostros { get; set; }
        public virtual DbSet<ViewVolumeCom> ViewVolumeComs { get; set; }
        public virtual DbSet<ViewVolumeCom1> ViewVolumeCom1s { get; set; }
        public virtual DbSet<Viewmasterpending> Viewmasterpendings { get; set; }
        public virtual DbSet<Viewtmp14grpOscl> Viewtmp14grpOscls { get; set; }
        public virtual DbSet<Viewtmp24grpOscl> Viewtmp24grpOscls { get; set; }
        public virtual DbSet<Viewtmp34grpOscl> Viewtmp34grpOscls { get; set; }
        public virtual DbSet<Viewtmp44grpOscl> Viewtmp44grpOscls { get; set; }
        public virtual DbSet<ViewtmpgrpOscl> ViewtmpgrpOscls { get; set; }
        public virtual DbSet<ViewtmpgrpOscl1> ViewtmpgrpOscl1s { get; set; }
        public virtual DbSet<VtempCc> VtempCcs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=203.154.158.182;Database=ISPTF;User Id=sa;Password=ispadmin;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Thai_CI_AS");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.ApplicationUserId)
                    .HasName("PK__Account__9CBCE319C279EF5A");

                entity.ToTable("Account");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedUsername)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApplicationUser>(entity =>
            {
                entity.ToTable("ApplicationUser");

                entity.HasIndex(e => e.ApplicationUserId, "IX_ApplicationUser");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedEmail)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedUsername)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash).IsRequired();

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BotClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BOT_Classification");

                entity.Property(e => e.ClAttrib)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CL_ATTRIB")
                    .IsFixedLength(true);

                entity.Property(e => e.ClId)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CL_ID")
                    .IsFixedLength(true);

                entity.Property(e => e.ClNmEng)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CL_NM_ENG");

                entity.Property(e => e.ClNmThai)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CL_NM_THAI");

                entity.Property(e => e.ClNmUsed)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CL_NM_USED");

                entity.Property(e => e.ClScmId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CL_SCM_ID")
                    .IsFixedLength(true);

                entity.Property(e => e.ClScmNm)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CL_SCM_NM");

                entity.Property(e => e.Lastseq).HasColumnName("LASTSEQ");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.PrnClId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRN_CL_ID")
                    .IsFixedLength(true);

                entity.Property(e => e.Rwa).HasColumnName("RWA");

                entity.Property(e => e.SeqId).HasColumnName("SEQ_ID");

                entity.Property(e => e.SeqNo)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.Userid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("USERID")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BotIsic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BOT_ISIC");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(1)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.ClCode)
                    .HasMaxLength(7)
                    .HasColumnName("CL_CODE");

                entity.Property(e => e.ClFiCode)
                    .HasMaxLength(7)
                    .HasColumnName("CL_FI_CODE");

                entity.Property(e => e.ClFmCode)
                    .HasMaxLength(7)
                    .HasColumnName("CL_FM_CODE");

                entity.Property(e => e.ClNmEng)
                    .HasMaxLength(255)
                    .HasColumnName("CL_NM_ENG");

                entity.Property(e => e.ClNmThai)
                    .HasMaxLength(255)
                    .HasColumnName("CL_NM_THAI");

                entity.Property(e => e.ClPchild)
                    .HasMaxLength(7)
                    .HasColumnName("CL_PCHILD");

                entity.Property(e => e.Lastseq).HasColumnName("LASTSEQ");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.SeqId).HasColumnName("SEQ_ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Userid)
                    .HasMaxLength(255)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<ConvExbc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("convEXBC");

                entity.Property(e => e.Exportlcno)
                    .HasMaxLength(15)
                    .HasColumnName("EXPORTLCNO");
            });

            modelBuilder.Entity<ConvExlc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("convEXLC");

                entity.Property(e => e.Exportlcno)
                    .HasMaxLength(15)
                    .HasColumnName("EXPORTLCNO");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("customer");

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.CcsRef).HasColumnName("CCS_REF");

                entity.Property(e => e.ClmsFlag)
                    .HasMaxLength(255)
                    .HasColumnName("CLMS_Flag");

                entity.Property(e => e.Cnum).HasColumnName("CNUM");

                entity.Property(e => e.Converseflag).HasColumnName("CONVERSEFLAG");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CustAcBran1).HasColumnName("Cust_AcBran1");

                entity.Property(e => e.CustAcBran2).HasColumnName("Cust_AcBran2");

                entity.Property(e => e.CustAcBran3).HasColumnName("Cust_AcBran3");

                entity.Property(e => e.CustAcBran4).HasColumnName("Cust_AcBran4");

                entity.Property(e => e.CustAcCcy1).HasColumnName("Cust_AcCcy1");

                entity.Property(e => e.CustAcCcy2).HasColumnName("Cust_AcCcy2");

                entity.Property(e => e.CustAcCcy3).HasColumnName("Cust_AcCcy3");

                entity.Property(e => e.CustAcCcy4).HasColumnName("Cust_AcCcy4");

                entity.Property(e => e.CustAcFlag1)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcFlag1");

                entity.Property(e => e.CustAcFlag2)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcFlag2");

                entity.Property(e => e.CustAcFlag3)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcFlag3");

                entity.Property(e => e.CustAcFlag4)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcFlag4");

                entity.Property(e => e.CustAcName1).HasColumnName("Cust_AcName1");

                entity.Property(e => e.CustAcName2).HasColumnName("Cust_AcName2");

                entity.Property(e => e.CustAcName3).HasColumnName("Cust_AcName3");

                entity.Property(e => e.CustAcName4).HasColumnName("Cust_AcName4");

                entity.Property(e => e.CustAcNo1).HasColumnName("Cust_AcNo1");

                entity.Property(e => e.CustAcNo2).HasColumnName("Cust_AcNo2");

                entity.Property(e => e.CustAcNo3).HasColumnName("Cust_AcNo3");

                entity.Property(e => e.CustAcNo4).HasColumnName("Cust_AcNo4");

                entity.Property(e => e.CustAcRelation4).HasColumnName("cust_AcRelation4");

                entity.Property(e => e.CustAcType1)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcType1");

                entity.Property(e => e.CustAcType2)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcType2");

                entity.Property(e => e.CustAcType3)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcType3");

                entity.Property(e => e.CustAcType4)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AcType4");

                entity.Property(e => e.CustAcrelation1).HasColumnName("cust_acrelation1");

                entity.Property(e => e.CustAcrelation2).HasColumnName("cust_acrelation2");

                entity.Property(e => e.CustAcrelation3).HasColumnName("cust_acrelation3");

                entity.Property(e => e.CustAdd1Cnty).HasColumnName("Cust_Add1_Cnty");

                entity.Property(e => e.CustAdd1Email).HasColumnName("Cust_Add1_Email");

                entity.Property(e => e.CustAdd1Faxno).HasColumnName("Cust_Add1_Faxno");

                entity.Property(e => e.CustAdd1Line1).HasColumnName("Cust_Add1_Line1");

                entity.Property(e => e.CustAdd1Line2).HasColumnName("Cust_Add1_Line2");

                entity.Property(e => e.CustAdd1Line3).HasColumnName("Cust_Add1_Line3");

                entity.Property(e => e.CustAdd1Line4).HasColumnName("Cust_Add1_Line4");

                entity.Property(e => e.CustAdd1Prov).HasColumnName("Cust_Add1_Prov");

                entity.Property(e => e.CustAdd1Telno).HasColumnName("Cust_Add1_Telno");

                entity.Property(e => e.CustAdd2Cnty).HasColumnName("Cust_Add2_Cnty");

                entity.Property(e => e.CustAdd2Faxno).HasColumnName("Cust_Add2_Faxno");

                entity.Property(e => e.CustAdd2Line1).HasColumnName("Cust_Add2_Line1");

                entity.Property(e => e.CustAdd2Line2).HasColumnName("Cust_Add2_Line2");

                entity.Property(e => e.CustAdd2Line3).HasColumnName("Cust_Add2_Line3");

                entity.Property(e => e.CustAdd2Line4).HasColumnName("Cust_Add2_Line4");

                entity.Property(e => e.CustAdd2Prov).HasColumnName("Cust_Add2_prov");

                entity.Property(e => e.CustAdd2Telno).HasColumnName("Cust_Add2_Telno");

                entity.Property(e => e.CustAo).HasColumnName("Cust_Ao");

                entity.Property(e => e.CustBoi)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_BOI");

                entity.Property(e => e.CustBran).HasColumnName("Cust_Bran");

                entity.Property(e => e.CustBuType).HasColumnName("Cust_BuType");

                entity.Property(e => e.CustCcemail).HasColumnName("Cust_CCEmail");

                entity.Property(e => e.CustCcid).HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCif).HasColumnName("Cust_CIF");

                entity.Property(e => e.CustCode).HasColumnName("Cust_Code");

                entity.Property(e => e.CustCommLc)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_CommLC");

                entity.Property(e => e.CustContact).HasColumnName("Cust_Contact");

                entity.Property(e => e.CustCsType).HasColumnName("Cust_CsType");

                entity.Property(e => e.CustEntDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Cust_EntDate");

                entity.Property(e => e.CustFilePassword).HasColumnName("Cust_FilePassword");

                entity.Property(e => e.CustGroup)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_Group");

                entity.Property(e => e.CustLastName).HasColumnName("Cust_LastName");

                entity.Property(e => e.CustLo).HasColumnName("Cust_Lo");

                entity.Property(e => e.CustName).HasColumnName("Cust_Name");

                entity.Property(e => e.CustNation).HasColumnName("Cust_Nation");

                entity.Property(e => e.CustParent).HasColumnName("Cust_Parent");

                entity.Property(e => e.CustRating).HasColumnName("Cust_Rating");

                entity.Property(e => e.CustRegistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Cust_RegistDate");

                entity.Property(e => e.CustRegistId).HasColumnName("Cust_RegistID");

                entity.Property(e => e.CustRemark).HasColumnName("Cust_Remark");

                entity.Property(e => e.CustSize)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_Size");

                entity.Property(e => e.CustStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_Status");

                entity.Property(e => e.CustT24).HasColumnName("Cust_T24");

                entity.Property(e => e.CustTaxId).HasColumnName("Cust_TaxID");

                entity.Property(e => e.CustTitle).HasColumnName("Cust_Title");

                entity.Property(e => e.CustTlastName).HasColumnName("Cust_TLastName");

                entity.Property(e => e.CustTname).HasColumnName("Cust_TName");

                entity.Property(e => e.CustTtitle).HasColumnName("Cust_TTitle");

                entity.Property(e => e.CustType)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_Type");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.IrateCcy).HasColumnName("IRateCcy");

                entity.Property(e => e.IrateFlag)
                    .HasMaxLength(255)
                    .HasColumnName("IRateFlag");

                entity.Property(e => e.IrateThb).HasColumnName("IRateTHB");

                entity.Property(e => e.OnlineFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Online_Flag");

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("holiday");

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasMaxLength(255);

                entity.Property(e => e.HolDate)
                    .HasMaxLength(255)
                    .HasColumnName("Hol_Date");

                entity.Property(e => e.HolDesc)
                    .HasMaxLength(255)
                    .HasColumnName("Hol_Desc");

                entity.Property(e => e.HolRecStat)
                    .HasMaxLength(255)
                    .HasColumnName("Hol_RecStat");

                entity.Property(e => e.HolYear)
                    .HasMaxLength(255)
                    .HasColumnName("Hol_Year");

                entity.Property(e => e.UpdateDate).HasMaxLength(255);

                entity.Property(e => e.UserCode).HasMaxLength(255);
            });

            modelBuilder.Entity<Ibaftx180105>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IBAFTX180105");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.ApprovalDocumentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalDocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsAtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryOrSenderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BotReferenceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BuyCurrencyID");

                entity.Property(e => e.CentralId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIdOfBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerInvestmentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyIbfindicator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExercisingInvolvedPartyIBFIndicator");

                entity.Property(e => e.ExercisingInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisbursementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstInstallmentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelatedTransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxArrangementType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxtradingTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FXTradingTransactionType");

                entity.Property(e => e.InFlowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTerm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentRepatriatedReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KeyInTimestamp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ListedinMarketFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoanDeclarationType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCurrencyID");

                entity.Property(e => e.NumberofInstallments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumberofShares)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectiveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTransactionPurposeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutflowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OutstandingNotionalCurrencyID");

                entity.Property(e => e.ParvalueperShare)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PeriodFlag ");

                entity.Property(e => e.RelatedInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelatedInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipWithBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipwithRelatedInvolvedPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepaymentDueIndicator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SellCurrencyID");

                entity.Property(e => e.System)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("System ");

                entity.Property(e => e.Term)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionPurposeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingOwnerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WholePartialRepaymentFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtdaccumulatedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YTDAccumulatedAmount");
            });

            modelBuilder.Entity<Ibbftx180105>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IBBFTX180105");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.ApprovalDocumentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalDocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsAtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryOrSenderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BotReferenceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BuyCurrencyID");

                entity.Property(e => e.CentralId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIdOfBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerInvestmentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyIbfindicator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExercisingInvolvedPartyIBFIndicator");

                entity.Property(e => e.ExercisingInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisbursementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstInstallmentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelatedTransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxArrangementType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxtradingTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FXTradingTransactionType");

                entity.Property(e => e.InFlowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTerm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentRepatriatedReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KeyInTimestamp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ListedinMarketFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoanDeclarationType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCurrencyID");

                entity.Property(e => e.NumberofInstallments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumberofShares)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectiveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTransactionPurposeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutflowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OutstandingNotionalCurrencyID");

                entity.Property(e => e.ParvalueperShare)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PeriodFlag ");

                entity.Property(e => e.RelatedInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelatedInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipWithBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipwithRelatedInvolvedPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepaymentDueIndicator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SellCurrencyID");

                entity.Property(e => e.System)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Term)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionPurposeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingOwnerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WholePartialRepaymentFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtdaccumulatedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YTDAccumulatedAmount");
            });

            modelBuilder.Entity<Ibbftx1801052>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IBBFTX1801052");

                entity.Property(e => e.Column0)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 0");

                entity.Property(e => e.Column1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 1");

                entity.Property(e => e.Column10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 10");

                entity.Property(e => e.Column11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 11");

                entity.Property(e => e.Column12)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 12");

                entity.Property(e => e.Column13)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 13");

                entity.Property(e => e.Column14)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 14");

                entity.Property(e => e.Column15)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 15");

                entity.Property(e => e.Column16)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 16");

                entity.Property(e => e.Column17)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 17");

                entity.Property(e => e.Column18)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 18");

                entity.Property(e => e.Column19)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 19");

                entity.Property(e => e.Column2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 2");

                entity.Property(e => e.Column20)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 20");

                entity.Property(e => e.Column21)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 21");

                entity.Property(e => e.Column22)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 22");

                entity.Property(e => e.Column23)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 23");

                entity.Property(e => e.Column24)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 24");

                entity.Property(e => e.Column25)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 25");

                entity.Property(e => e.Column26)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 26");

                entity.Property(e => e.Column27)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 27");

                entity.Property(e => e.Column28)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 28");

                entity.Property(e => e.Column29)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 29");

                entity.Property(e => e.Column3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 3");

                entity.Property(e => e.Column30)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 30");

                entity.Property(e => e.Column31)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 31");

                entity.Property(e => e.Column32)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 32");

                entity.Property(e => e.Column33)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 33");

                entity.Property(e => e.Column34)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 34");

                entity.Property(e => e.Column35)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 35");

                entity.Property(e => e.Column36)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 36");

                entity.Property(e => e.Column37)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 37");

                entity.Property(e => e.Column38)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 38");

                entity.Property(e => e.Column39)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 39");

                entity.Property(e => e.Column4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 4");

                entity.Property(e => e.Column40)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 40");

                entity.Property(e => e.Column41)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 41");

                entity.Property(e => e.Column42)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 42");

                entity.Property(e => e.Column43)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 43");

                entity.Property(e => e.Column44)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 44");

                entity.Property(e => e.Column45)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 45");

                entity.Property(e => e.Column46)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 46");

                entity.Property(e => e.Column47)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 47");

                entity.Property(e => e.Column48)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 48");

                entity.Property(e => e.Column49)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 49");

                entity.Property(e => e.Column5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 5");

                entity.Property(e => e.Column50)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 50");

                entity.Property(e => e.Column51)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 51");

                entity.Property(e => e.Column52)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 52");

                entity.Property(e => e.Column53)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 53");

                entity.Property(e => e.Column54)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 54");

                entity.Property(e => e.Column55)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 55");

                entity.Property(e => e.Column56)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 56");

                entity.Property(e => e.Column57)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 57");

                entity.Property(e => e.Column58)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 58");

                entity.Property(e => e.Column59)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 59");

                entity.Property(e => e.Column6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 6");

                entity.Property(e => e.Column60)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 60");

                entity.Property(e => e.Column61)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 61");

                entity.Property(e => e.Column62)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 62");

                entity.Property(e => e.Column63)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 63");

                entity.Property(e => e.Column64)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 64");

                entity.Property(e => e.Column65)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 65");

                entity.Property(e => e.Column66)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 66");

                entity.Property(e => e.Column67)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 67");

                entity.Property(e => e.Column68)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 68");

                entity.Property(e => e.Column69)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 69");

                entity.Property(e => e.Column7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 7");

                entity.Property(e => e.Column70)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 70");

                entity.Property(e => e.Column8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 8");

                entity.Property(e => e.Column9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 9");
            });

            modelBuilder.Entity<Ibcftx180105>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IBCFTX180105");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.ApprovalDocumentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalDocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsAtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryOrSenderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BotReferenceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BuyCurrencyID");

                entity.Property(e => e.CentralId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIdOfBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerInvestmentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebtInstrumentIssuedDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExercisingInvolvedPartyIbfindicator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExercisingInvolvedPartyIBFIndicator");

                entity.Property(e => e.ExercisingInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisbursementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstInstallmentDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelatedTransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxArrangementType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FxtradingTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FXTradingTransactionType");

                entity.Property(e => e.InFlowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTerm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentTermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentRepatriatedReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KeyInTimestamp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ListedinMarketFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoanDeclarationType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCurrencyID");

                entity.Property(e => e.NumberofInstallments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumberofShares)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectiveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTransactionPurposeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutflowTransactionPurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingNotionalCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OutstandingNotionalCurrencyID");

                entity.Property(e => e.ParvalueperShare)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PeriodFlag ");

                entity.Property(e => e.RelatedInvolvedPartyBusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelatedInvolvedPartyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipWithBeneficiaryOrSender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipwithRelatedInvolvedPart)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepaymentDueIndicator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellCurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SellCurrencyID");

                entity.Property(e => e.System)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Term)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TermUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToTransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionPurposeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingOwnerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WholePartialRepaymentFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtdaccumulatedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YTDAccumulatedAmount");
            });

            modelBuilder.Entity<IdentityRole>(entity =>
            {
                entity.ToTable("IdentityRole", "security");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<IdentityUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_security.IdentityUsers");

                entity.ToTable("IdentityUser", "security");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<IdentityUserClaim>(entity =>
            {
                entity.ToTable("IdentityUserClaim", "security");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.IdentityUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_IdentityUserClaim_IdentityUser");
            });

            modelBuilder.Entity<IdentityUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_security.IdentityUserLogins");

                entity.ToTable("IdentityUserLogin", "security");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.IdentityUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityUserLogin_IdentityUser");
            });

            modelBuilder.Entity<IdentityUserProfile>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("IdentityUserProfile", "security");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.IdentityUserProfile)
                    .HasForeignKey<IdentityUserProfile>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityUserProfile_IdentityUser");
            });

            modelBuilder.Entity<IdentityUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_security.IdentityUserRoles");

                entity.ToTable("IdentityUserRole", "security");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.IdentityUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityUserRole_IdentityRole");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.IdentityUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityUserRole_IdentityUser");
            });

            modelBuilder.Entity<MAccount>(entity =>
            {
                entity.HasKey(e => e.AccCode)
                    .HasName("pk_acc_code");

                entity.ToTable("mAccount");

                entity.Property(e => e.AccCode)
                    .HasMaxLength(19)
                    .HasColumnName("Acc_Code");

                entity.Property(e => e.AccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Acc_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.AccGfms)
                    .HasMaxLength(15)
                    .HasColumnName("Acc_GFMS");

                entity.Property(e => e.AccGfmsSub)
                    .HasMaxLength(15)
                    .HasColumnName("Acc_GFMS_Sub");

                entity.Property(e => e.AccMap)
                    .HasMaxLength(15)
                    .HasColumnName("Acc_Map");

                entity.Property(e => e.AccName)
                    .HasMaxLength(100)
                    .HasColumnName("Acc_Name");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GfmsBran)
                    .HasMaxLength(15)
                    .HasColumnName("GFMS_Bran");

                entity.Property(e => e.GfmsMap)
                    .HasMaxLength(15)
                    .HasColumnName("GFMS_Map");

                entity.Property(e => e.GfmsProd)
                    .HasMaxLength(5)
                    .HasColumnName("GFMS_Prod");

                entity.Property(e => e.GfmsSbu)
                    .HasMaxLength(15)
                    .HasColumnName("GFMS_SBU");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MAccount1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mAccount1");

                entity.Property(e => e.AccCode)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_Code");

                entity.Property(e => e.AccGfms)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_GFMS");

                entity.Property(e => e.AccGfmsSub)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_GFMS_Sub");

                entity.Property(e => e.AccMap)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_Map");

                entity.Property(e => e.AccName)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_Name");

                entity.Property(e => e.CreateDate).HasMaxLength(255);

                entity.Property(e => e.GfmsBran)
                    .HasMaxLength(255)
                    .HasColumnName("GFMS_Bran");

                entity.Property(e => e.GfmsMap)
                    .HasMaxLength(255)
                    .HasColumnName("GFMS_Map");

                entity.Property(e => e.GfmsProd)
                    .HasMaxLength(255)
                    .HasColumnName("GFMS_Prod");

                entity.Property(e => e.GfmsSbu)
                    .HasMaxLength(255)
                    .HasColumnName("GFMS_SBU");

                entity.Property(e => e.UpdateDate).HasMaxLength(255);

                entity.Property(e => e.UserCode).HasMaxLength(255);
            });

            modelBuilder.Entity<MAocode>(entity =>
            {
                entity.HasKey(e => e.AoCode);

                entity.ToTable("mAOCode");

                entity.Property(e => e.AoCode)
                    .HasMaxLength(5)
                    .HasColumnName("ao_code");

                entity.Property(e => e.AoName)
                    .HasMaxLength(70)
                    .HasColumnName("ao_name");

                entity.Property(e => e.AoRccode)
                    .HasMaxLength(70)
                    .HasColumnName("ao_rccode");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MApperror>(entity =>
            {
                entity.HasKey(e => e.ErrCode)
                    .HasName("PK_mF1Error");

                entity.ToTable("mAPPError");

                entity.Property(e => e.ErrCode).HasMaxLength(4);

                entity.Property(e => e.ErrDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<MAuth>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mAuth");

                entity.Property(e => e.ModCode)
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.ModLevel)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<MBankFile>(entity =>
            {
                entity.HasKey(e => e.BankCode);

                entity.ToTable("mBankFile");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.BankAcCcy1)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_AcCcy1")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankAcCcy2)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_AcCcy2");

                entity.Property(e => e.BankAcCcy3)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_AcCcy3");

                entity.Property(e => e.BankAcCode1)
                    .HasMaxLength(15)
                    .HasColumnName("Bank_AcCode1");

                entity.Property(e => e.BankAcCode2)
                    .HasMaxLength(15)
                    .HasColumnName("Bank_AcCode2");

                entity.Property(e => e.BankAcCode3)
                    .HasMaxLength(15)
                    .HasColumnName("Bank_AcCode3");

                entity.Property(e => e.BankAcName1)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_AcName1");

                entity.Property(e => e.BankAcName2)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_AcName2");

                entity.Property(e => e.BankAcName3)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_AcName3");

                entity.Property(e => e.BankAdd1)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add1");

                entity.Property(e => e.BankAdd2)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add2");

                entity.Property(e => e.BankAdd3)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add3");

                entity.Property(e => e.BankAdd4)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add4");

                entity.Property(e => e.BankAddSw1)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw1");

                entity.Property(e => e.BankAddSw2)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw2");

                entity.Property(e => e.BankAddSw3)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw3");

                entity.Property(e => e.BankAddSw4)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw4");

                entity.Property(e => e.BankAddSw5)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw5");

                entity.Property(e => e.BankAddSw6)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw6");

                entity.Property(e => e.BankAddSw7)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_AddSw7");

                entity.Property(e => e.BankAuthen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Authen")
                    .IsFixedLength(true);

                entity.Property(e => e.BankCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_Ccy");

                entity.Property(e => e.BankCity)
                    .HasMaxLength(20)
                    .HasColumnName("Bank_City");

                entity.Property(e => e.BankCnty)
                    .HasMaxLength(2)
                    .HasColumnName("Bank_Cnty");

                entity.Property(e => e.BankFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.BankLimitAmt1)
                    .HasColumnName("Bank_LimitAmt1")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankLimitAmt2).HasColumnName("Bank_LimitAmt2");

                entity.Property(e => e.BankLimitAmt3).HasColumnName("Bank_LimitAmt3");

                entity.Property(e => e.BankLimitCcy1)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_LimitCcy1");

                entity.Property(e => e.BankLimitCcy2)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_LimitCcy2");

                entity.Property(e => e.BankLimitCcy3)
                    .HasMaxLength(3)
                    .HasColumnName("Bank_LimitCcy3");

                entity.Property(e => e.BankLimitCode1)
                    .HasMaxLength(10)
                    .HasColumnName("Bank_LimitCode1");

                entity.Property(e => e.BankLimitCode2)
                    .HasMaxLength(10)
                    .HasColumnName("Bank_LimitCode2");

                entity.Property(e => e.BankLimitCode3)
                    .HasMaxLength(10)
                    .HasColumnName("Bank_LimitCode3")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankName)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_Name");

                entity.Property(e => e.BankNego)
                    .HasColumnName("Bank_Nego")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankNostro1)
                    .HasMaxLength(19)
                    .HasColumnName("Bank_Nostro1");

                entity.Property(e => e.BankNostro2)
                    .HasMaxLength(19)
                    .HasColumnName("Bank_Nostro2");

                entity.Property(e => e.BankNostro3)
                    .HasMaxLength(19)
                    .HasColumnName("Bank_Nostro3");

                entity.Property(e => e.BankOutsource)
                    .HasColumnName("Bank_Outsource")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankRating)
                    .HasMaxLength(4)
                    .HasColumnName("Bank_Rating");

                entity.Property(e => e.BankRebate)
                    .HasColumnName("Bank_Rebate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankReissue)
                    .HasColumnName("Bank_Reissue")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankRelay)
                    .HasColumnName("Bank_Relay")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BankRemark)
                    .HasMaxLength(250)
                    .HasColumnName("Bank_Remark");

                entity.Property(e => e.BankStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Status")
                    .IsFixedLength(true);

                entity.Property(e => e.BankSwift)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Swift");

                entity.Property(e => e.BankZip)
                    .HasMaxLength(10)
                    .HasColumnName("Bank_Zip");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MBranch>(entity =>
            {
                entity.HasKey(e => e.BranCode);

                entity.ToTable("mBranch");

                entity.Property(e => e.BranCode)
                    .HasMaxLength(4)
                    .HasColumnName("Bran_Code");

                entity.Property(e => e.BranBa)
                    .HasMaxLength(4)
                    .HasColumnName("Bran_BA");

                entity.Property(e => e.BranCost)
                    .HasMaxLength(15)
                    .HasColumnName("Bran_Cost");

                entity.Property(e => e.BranGl)
                    .HasMaxLength(8)
                    .HasColumnName("Bran_GL");

                entity.Property(e => e.BranName)
                    .HasMaxLength(70)
                    .HasColumnName("Bran_Name");

                entity.Property(e => e.BranProfit)
                    .HasMaxLength(15)
                    .HasColumnName("Bran_Profit");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OnePuse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OnePUse")
                    .IsFixedLength(true);

                entity.Property(e => e.ProvCode)
                    .HasMaxLength(5)
                    .HasColumnName("Prov_Code");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MBuArea>(entity =>
            {
                entity.HasKey(e => e.BaCode);

                entity.ToTable("mBuArea");

                entity.Property(e => e.BaCode)
                    .HasMaxLength(4)
                    .HasColumnName("BA_Code");

                entity.Property(e => e.BaCost)
                    .HasMaxLength(20)
                    .HasColumnName("BA_Cost");

                entity.Property(e => e.BaDesc)
                    .HasMaxLength(50)
                    .HasColumnName("BA_Desc");

                entity.Property(e => e.BaProfit)
                    .HasMaxLength(20)
                    .HasColumnName("BA_Profit");
            });

            modelBuilder.Entity<MBusType>(entity =>
            {
                entity.HasKey(e => e.BuTypeCode);

                entity.ToTable("mBusType");

                entity.Property(e => e.BuTypeCode)
                    .HasMaxLength(7)
                    .HasColumnName("BuType_Code");

                entity.Property(e => e.BuTypeName)
                    .HasMaxLength(70)
                    .HasColumnName("BuType_Name");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCampaign>(entity =>
            {
                entity.HasKey(e => e.CampaignCode);

                entity.ToTable("mCampaign");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CampaignStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Status")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MControl>(entity =>
            {
                entity.HasKey(e => new { e.CtlType, e.CtlCode, e.CtlId });

                entity.ToTable("mControl");

                entity.Property(e => e.CtlType)
                    .HasMaxLength(10)
                    .HasColumnName("CTL_Type");

                entity.Property(e => e.CtlCode)
                    .HasMaxLength(20)
                    .HasColumnName("CTL_Code");

                entity.Property(e => e.CtlId)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_ID");

                entity.Property(e => e.CtlDesc)
                    .HasMaxLength(200)
                    .HasColumnName("CTL_Desc");

                entity.Property(e => e.CtlName)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Name");

                entity.Property(e => e.CtlNote1)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Note1");

                entity.Property(e => e.CtlNote2)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Note2");

                entity.Property(e => e.CtlSeq1).HasColumnName("CTL_Seq1");

                entity.Property(e => e.CtlSeq2).HasColumnName("CTL_Seq2");

                entity.Property(e => e.CtlVal1).HasColumnName("CTL_Val1");

                entity.Property(e => e.CtlVal2).HasColumnName("CTL_Val2");
            });

            modelBuilder.Entity<MControlBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mControlBatch");

                entity.Property(e => e.BatchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MControlDate>(entity =>
            {
                entity.HasKey(e => e.ContDate);

                entity.ToTable("mControlDate");

                entity.Property(e => e.ContDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ContNextDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Swseq).HasColumnName("SWSeq");

                entity.Property(e => e.UpdUser).HasMaxLength(12);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCountry>(entity =>
            {
                entity.HasKey(e => e.CntyCode);

                entity.ToTable("mCountry");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("Cnty_Code");

                entity.Property(e => e.CntyArea)
                    .HasMaxLength(2)
                    .HasColumnName("Cnty_Area");

                entity.Property(e => e.CntyName)
                    .HasMaxLength(35)
                    .HasColumnName("Cnty_Name");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCurrency>(entity =>
            {
                entity.HasKey(e => e.CcyCode);

                entity.ToTable("mCurrency");

                entity.Property(e => e.CcyCode)
                    .HasMaxLength(3)
                    .HasColumnName("Ccy_Code");

                entity.Property(e => e.CcyBase).HasColumnName("Ccy_Base");

                entity.Property(e => e.CcyGe)
                    .HasMaxLength(3)
                    .HasColumnName("Ccy_GE");

                entity.Property(e => e.CcyGec)
                    .HasMaxLength(3)
                    .HasColumnName("Ccy_GEC");

                entity.Property(e => e.CcyName)
                    .HasMaxLength(35)
                    .HasColumnName("Ccy_Name");

                entity.Property(e => e.CcySwdec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Ccy_SWDEC")
                    .IsFixedLength(true);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCustRate>(entity =>
            {
                entity.HasKey(e => new { e.DefCust, e.DefMod, e.DefExp })
                    .HasName("PK_mStandard");

                entity.ToTable("mCustRate");

                entity.Property(e => e.DefCust)
                    .HasMaxLength(6)
                    .HasColumnName("Def_Cust");

                entity.Property(e => e.DefMod)
                    .HasMaxLength(5)
                    .HasColumnName("Def_Mod");

                entity.Property(e => e.DefExp)
                    .HasMaxLength(10)
                    .HasColumnName("Def_Exp");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DefBase)
                    .HasColumnName("Def_Base")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DefMax)
                    .HasColumnName("Def_Max")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DefMin)
                    .HasColumnName("Def_Min")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DefRate).HasColumnName("Def_Rate");

                entity.Property(e => e.DefType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Def_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCustTfl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mCustTFL");

                entity.Property(e => e.AuthCode).HasMaxLength(8);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustAcBran1)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran1");

                entity.Property(e => e.CustAcBran2)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran2");

                entity.Property(e => e.CustAcBran3)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran3");

                entity.Property(e => e.CustAcBran4)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran4");

                entity.Property(e => e.CustAcCcy1)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy1");

                entity.Property(e => e.CustAcCcy2)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy2");

                entity.Property(e => e.CustAcCcy3)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy3");

                entity.Property(e => e.CustAcCcy4)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy4");

                entity.Property(e => e.CustAcFlag1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag1")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag2")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag3")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag4")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcName1)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName1");

                entity.Property(e => e.CustAcName2)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName2");

                entity.Property(e => e.CustAcName3)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName3");

                entity.Property(e => e.CustAcName4)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName4");

                entity.Property(e => e.CustAcNo1)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo1");

                entity.Property(e => e.CustAcNo2)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo2");

                entity.Property(e => e.CustAcNo3)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo3");

                entity.Property(e => e.CustAcNo4)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo4");

                entity.Property(e => e.CustAcType1)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType1")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType2)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType2")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType3)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType3")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType4)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType4")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcrelation1)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation1");

                entity.Property(e => e.CustAcrelation2)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation2");

                entity.Property(e => e.CustAcrelation3)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation3");

                entity.Property(e => e.CustAcrelation4)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation4");

                entity.Property(e => e.CustAdd1Cnty)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Add1_Cnty");

                entity.Property(e => e.CustAdd1Email)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Email");

                entity.Property(e => e.CustAdd1Faxno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add1_Faxno");

                entity.Property(e => e.CustAdd1Line1)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line1");

                entity.Property(e => e.CustAdd1Line2)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line2");

                entity.Property(e => e.CustAdd1Line3)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line3");

                entity.Property(e => e.CustAdd1Line4)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line4");

                entity.Property(e => e.CustAdd1Prov)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Add1_Prov");

                entity.Property(e => e.CustAdd1Telno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add1_Telno");

                entity.Property(e => e.CustAdd2Cnty)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Add2_Cnty");

                entity.Property(e => e.CustAdd2Faxno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add2_Faxno");

                entity.Property(e => e.CustAdd2Line1)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line1");

                entity.Property(e => e.CustAdd2Line2)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line2");

                entity.Property(e => e.CustAdd2Line3)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line3");

                entity.Property(e => e.CustAdd2Line4)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line4");

                entity.Property(e => e.CustAdd2Prov)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Add2_prov");

                entity.Property(e => e.CustAdd2Telno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add2_Telno");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Ao");

                entity.Property(e => e.CustBoi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_BOI")
                    .IsFixedLength(true);

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustBuType)
                    .HasMaxLength(7)
                    .HasColumnName("Cust_BuType");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustCommLc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_CommLC")
                    .IsFixedLength(true);

                entity.Property(e => e.CustContact)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_Contact");

                entity.Property(e => e.CustCsType)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_CsType");

                entity.Property(e => e.CustEntDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Cust_EntDate");

                entity.Property(e => e.CustGroup)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Group")
                    .IsFixedLength(true);

                entity.Property(e => e.CustLastName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_LastName");

                entity.Property(e => e.CustLo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Lo");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.CustNation)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Nation");

                entity.Property(e => e.CustParent)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Parent");

                entity.Property(e => e.CustRating)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_Rating");

                entity.Property(e => e.CustRegistDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Cust_RegistDate");

                entity.Property(e => e.CustRegistId)
                    .HasMaxLength(13)
                    .HasColumnName("Cust_RegistID");

                entity.Property(e => e.CustRemark)
                    .HasMaxLength(200)
                    .HasColumnName("Cust_Remark");

                entity.Property(e => e.CustSize)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Size")
                    .IsFixedLength(true);

                entity.Property(e => e.CustStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Status")
                    .IsFixedLength(true);

                entity.Property(e => e.CustT24)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_T24");

                entity.Property(e => e.CustTaxId)
                    .HasMaxLength(13)
                    .HasColumnName("Cust_TaxID");

                entity.Property(e => e.CustTitle)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Title");

                entity.Property(e => e.CustTlastName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_TLastName");

                entity.Property(e => e.CustTname)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_TName");

                entity.Property(e => e.CustTtitle)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_TTitle");

                entity.Property(e => e.CustType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.IrateCcy)
                    .HasMaxLength(10)
                    .HasColumnName("IRateCcy");

                entity.Property(e => e.IrateFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IRateFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.IrateThb)
                    .HasMaxLength(10)
                    .HasColumnName("IRateTHB");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCustType>(entity =>
            {
                entity.HasKey(e => e.CsTypeCode);

                entity.ToTable("mCustType");

                entity.Property(e => e.CsTypeCode)
                    .HasMaxLength(6)
                    .HasColumnName("CsType_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CsTypeName)
                    .HasMaxLength(70)
                    .HasColumnName("CsType_Name");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MCustomer>(entity =>
            {
                entity.HasKey(e => e.CustCode);

                entity.ToTable("mCustomer");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CcsRef)
                    .HasMaxLength(14)
                    .HasColumnName("CCS_REF");

                entity.Property(e => e.ClmsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLMS_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Cnum)
                    .HasMaxLength(9)
                    .HasColumnName("CNUM");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustAcBran1)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran1");

                entity.Property(e => e.CustAcBran2)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran2");

                entity.Property(e => e.CustAcBran3)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran3");

                entity.Property(e => e.CustAcBran4)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_AcBran4");

                entity.Property(e => e.CustAcCcy1)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy1");

                entity.Property(e => e.CustAcCcy2)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy2");

                entity.Property(e => e.CustAcCcy3)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy3");

                entity.Property(e => e.CustAcCcy4)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_AcCcy4");

                entity.Property(e => e.CustAcFlag1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag1")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag2")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag3")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcFlag4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcFlag4")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcName1)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName1");

                entity.Property(e => e.CustAcName2)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName2");

                entity.Property(e => e.CustAcName3)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName3");

                entity.Property(e => e.CustAcName4)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName4");

                entity.Property(e => e.CustAcNo1)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo1");

                entity.Property(e => e.CustAcNo2)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo2");

                entity.Property(e => e.CustAcNo3)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo3");

                entity.Property(e => e.CustAcNo4)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo4");

                entity.Property(e => e.CustAcRelation4)
                    .HasMaxLength(6)
                    .HasColumnName("cust_AcRelation4");

                entity.Property(e => e.CustAcType1)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType1")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType2)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType2")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType3)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType3")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcType4)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType4")
                    .IsFixedLength(true);

                entity.Property(e => e.CustAcrelation1)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation1");

                entity.Property(e => e.CustAcrelation2)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation2");

                entity.Property(e => e.CustAcrelation3)
                    .HasMaxLength(6)
                    .HasColumnName("cust_acrelation3");

                entity.Property(e => e.CustAdd1Cnty)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Add1_Cnty");

                entity.Property(e => e.CustAdd1Email)
                    .HasMaxLength(300)
                    .HasColumnName("Cust_Add1_Email");

                entity.Property(e => e.CustAdd1Faxno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add1_Faxno");

                entity.Property(e => e.CustAdd1Line1)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line1");

                entity.Property(e => e.CustAdd1Line2)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line2");

                entity.Property(e => e.CustAdd1Line3)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line3");

                entity.Property(e => e.CustAdd1Line4)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add1_Line4");

                entity.Property(e => e.CustAdd1Prov)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Add1_Prov");

                entity.Property(e => e.CustAdd1Telno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add1_Telno");

                entity.Property(e => e.CustAdd2Cnty)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Add2_Cnty");

                entity.Property(e => e.CustAdd2Faxno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add2_Faxno");

                entity.Property(e => e.CustAdd2Line1)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line1");

                entity.Property(e => e.CustAdd2Line2)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line2");

                entity.Property(e => e.CustAdd2Line3)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line3");

                entity.Property(e => e.CustAdd2Line4)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Add2_Line4");

                entity.Property(e => e.CustAdd2Prov)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Add2_prov");

                entity.Property(e => e.CustAdd2Telno)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Add2_Telno");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_Ao");

                entity.Property(e => e.CustBoi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_BOI")
                    .IsFixedLength(true);

                entity.Property(e => e.CustBran)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustBuType)
                    .HasMaxLength(7)
                    .HasColumnName("Cust_BuType");

                entity.Property(e => e.CustCcemail)
                    .HasMaxLength(300)
                    .HasColumnName("Cust_CCEmail");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(9)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_CIF");

                entity.Property(e => e.CustCommLc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_CommLC")
                    .IsFixedLength(true);

                entity.Property(e => e.CustContact)
                    .HasMaxLength(50)
                    .HasColumnName("Cust_Contact");

                entity.Property(e => e.CustCsType)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_CsType");

                entity.Property(e => e.CustEntDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Cust_EntDate");

                entity.Property(e => e.CustFilePassword)
                    .HasMaxLength(100)
                    .HasColumnName("Cust_FilePassword");

                entity.Property(e => e.CustGfmssbucode)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_GFMSSBUCode");

                entity.Property(e => e.CustGroup)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Group")
                    .IsFixedLength(true);

                entity.Property(e => e.CustLastName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_LastName");

                entity.Property(e => e.CustLo)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_Lo");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.CustNation)
                    .HasMaxLength(2)
                    .HasColumnName("Cust_Nation");

                entity.Property(e => e.CustParent)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Parent");

                entity.Property(e => e.CustRating)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_Rating");

                entity.Property(e => e.CustRccode)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_RCCode");

                entity.Property(e => e.CustRegistDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Cust_RegistDate");

                entity.Property(e => e.CustRegistId)
                    .HasMaxLength(13)
                    .HasColumnName("Cust_RegistID");

                entity.Property(e => e.CustRemark)
                    .HasMaxLength(200)
                    .HasColumnName("Cust_Remark");

                entity.Property(e => e.CustRmcode)
                    .HasMaxLength(10)
                    .HasColumnName("Cust_RMCode");

                entity.Property(e => e.CustSbu)
                    .HasMaxLength(4)
                    .HasColumnName("Cust_SBU");

                entity.Property(e => e.CustSize)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Size")
                    .IsFixedLength(true);

                entity.Property(e => e.CustStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Status")
                    .IsFixedLength(true);

                entity.Property(e => e.CustT24)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_T24");

                entity.Property(e => e.CustTaxId)
                    .HasMaxLength(13)
                    .HasColumnName("Cust_TaxID");

                entity.Property(e => e.CustTitle)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Title");

                entity.Property(e => e.CustTlastName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_TLastName");

                entity.Property(e => e.CustTname)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_TName");

                entity.Property(e => e.CustTtitle)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_TTitle");

                entity.Property(e => e.CustType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Cust_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.IrateCcy)
                    .HasMaxLength(10)
                    .HasColumnName("IRateCcy");

                entity.Property(e => e.IrateFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IRateFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.IrateThb)
                    .HasMaxLength(10)
                    .HasColumnName("IRateTHB");

                entity.Property(e => e.OnlineFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Online_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MDsperror>(entity =>
            {
                entity.HasKey(e => e.ErrCode);

                entity.ToTable("mDSPError");

                entity.Property(e => e.ErrCode).HasMaxLength(8);

                entity.Property(e => e.ErrDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<MFcdAccount>(entity =>
            {
                entity.HasKey(e => e.FcdAccNo);

                entity.ToTable("mFcdAccount");

                entity.Property(e => e.FcdAccNo).HasMaxLength(13);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CenterID")
                    .IsFixedLength(true);

                entity.Property(e => e.CheckLiab)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.CustName).HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FcdAccBran).HasMaxLength(3);

                entity.Property(e => e.FcdAccName).HasMaxLength(70);

                entity.Property(e => e.FcdAccType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdCcy).HasMaxLength(3);

                entity.Property(e => e.FcdCcyName).HasMaxLength(50);

                entity.Property(e => e.FcdDeposit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdFinInst)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdResType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdSavFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HoldFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastmoveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OpenDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefAccount).HasMaxLength(20);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MFcdRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mFcdRate");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateTime)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ExchCcy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Exch_Ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.ExchFixed).HasColumnName("Exch_Fixed");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MGood>(entity =>
            {
                entity.HasKey(e => e.GoodsCode);

                entity.ToTable("mGoods");

                entity.Property(e => e.GoodsCode)
                    .HasMaxLength(4)
                    .HasColumnName("Goods_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoodsDesc)
                    .HasMaxLength(70)
                    .HasColumnName("Goods_Desc");

                entity.Property(e => e.GoodsPurpose)
                    .HasMaxLength(6)
                    .HasColumnName("Goods_Purpose");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MInRateCode>(entity =>
            {
                entity.HasKey(e => e.InRateCode);

                entity.ToTable("mInRateCode");

                entity.Property(e => e.InRateCode)
                    .HasMaxLength(10)
                    .HasColumnName("InRate_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InRateCcyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("InRate_CcyFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.InRateName)
                    .HasMaxLength(35)
                    .HasColumnName("InRate_Name");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MLimitCode>(entity =>
            {
                entity.HasKey(e => e.LimitCode);

                entity.ToTable("mLimitCode");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LimitDlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_DLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExbc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXBC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExpc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXPC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMEX")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMTR")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitLg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_LG")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitName)
                    .HasMaxLength(35)
                    .HasColumnName("Limit_Name");

                entity.Property(e => e.LimitUseCcy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_UseCcy")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitUseFor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_UseFor")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MLoCode>(entity =>
            {
                entity.HasKey(e => e.LoCode);

                entity.ToTable("mLoCode");

                entity.Property(e => e.LoCode)
                    .HasMaxLength(8)
                    .HasColumnName("Lo_code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoName)
                    .HasMaxLength(50)
                    .HasColumnName("Lo_Name");

                entity.Property(e => e.LoRcCode)
                    .HasMaxLength(35)
                    .HasColumnName("Lo_RcCode");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MMapAccount>(entity =>
            {
                entity.HasKey(e => e.MAccCode);

                entity.ToTable("mMapAccount");

                entity.Property(e => e.MAccCode)
                    .HasMaxLength(19)
                    .HasColumnName("mAcc_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GfmsAcc)
                    .HasMaxLength(50)
                    .HasColumnName("GFMS_Acc");

                entity.Property(e => e.GfmsBran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMS_Bran");

                entity.Property(e => e.GfmsMap)
                    .HasMaxLength(15)
                    .HasColumnName("GFMS_Map");

                entity.Property(e => e.GfmsProd)
                    .HasMaxLength(5)
                    .HasColumnName("GFMS_Prod");

                entity.Property(e => e.GfmsSbu)
                    .HasMaxLength(4)
                    .HasColumnName("GFMS_SBU");

                entity.Property(e => e.GfmsSubAcc)
                    .HasMaxLength(50)
                    .HasColumnName("GFMS_SubAcc");

                entity.Property(e => e.MAccBsLine)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_BsLine");

                entity.Property(e => e.MAccBuArea)
                    .HasMaxLength(4)
                    .HasColumnName("mAcc_BuArea");

                entity.Property(e => e.MAccCond)
                    .HasMaxLength(1)
                    .HasColumnName("mAcc_Cond");

                entity.Property(e => e.MAccCost)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_Cost");

                entity.Property(e => e.MAccMod)
                    .HasMaxLength(5)
                    .HasColumnName("mAcc_Mod");

                entity.Property(e => e.MAccName)
                    .HasMaxLength(100)
                    .HasColumnName("mAcc_Name");

                entity.Property(e => e.MAccNew)
                    .HasMaxLength(19)
                    .HasColumnName("mAcc_New");

                entity.Property(e => e.MAccProfit)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_Profit");

                entity.Property(e => e.MAccType)
                    .HasMaxLength(15)
                    .HasColumnName("mAcc_Type");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MMapBalanceCd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mMapBalanceCD");

                entity.Property(e => e.CreateDate).HasMaxLength(8);

                entity.Property(e => e.Gfmsacc)
                    .HasMaxLength(7)
                    .HasColumnName("GFMSAcc");

                entity.Property(e => e.Gfmsmap)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSMap");

                entity.Property(e => e.Gfmssub)
                    .HasMaxLength(4)
                    .HasColumnName("GFMSSub");

                entity.Property(e => e.IntsBlcode)
                    .HasMaxLength(10)
                    .HasColumnName("IntsBLCode");

                entity.Property(e => e.Login).HasMaxLength(5);

                entity.Property(e => e.OutsBlcode)
                    .HasMaxLength(10)
                    .HasColumnName("OutsBLCode");

                entity.Property(e => e.ProdCcy)
                    .HasMaxLength(5)
                    .HasColumnName("ProdCCy");

                entity.Property(e => e.ProdThb)
                    .HasMaxLength(5)
                    .HasColumnName("ProdTHB");

                entity.Property(e => e.RefNo).HasMaxLength(5);

                entity.Property(e => e.Rstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Rtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RType")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<MMapFacno>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mMapFacno");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacNo).HasMaxLength(20);

                entity.Property(e => e.IsicCode)
                    .HasMaxLength(20)
                    .HasColumnName("ISIC_CODE");

                entity.Property(e => e.PurposeCode)
                    .HasMaxLength(50)
                    .HasColumnName("Purpose_Code");
            });

            modelBuilder.Entity<MMapProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mMapProduct");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MProdCode)
                    .HasMaxLength(10)
                    .HasColumnName("mProd_Code");

                entity.Property(e => e.MProdCond)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("mProd_Cond");

                entity.Property(e => e.MProdEvent)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("mProd_Event");

                entity.Property(e => e.MProdEventNm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("mProd_EventNm");

                entity.Property(e => e.MProdMod)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("mProd_Mod");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MMapProductGfm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mMapProductGFMS");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.MProdCode).HasColumnName("mProd_Code");

                entity.Property(e => e.MProdCond).HasColumnName("mProd_Cond");

                entity.Property(e => e.MProdEvent).HasColumnName("mProd_Event");

                entity.Property(e => e.MProdEventNm).HasColumnName("mProd_EventNm");

                entity.Property(e => e.MProdMod).HasColumnName("mProd_Mod");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MMapSaleUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mMapSaleUnit");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MLoBuArea)
                    .HasMaxLength(4)
                    .HasColumnName("mLo_BuArea");

                entity.Property(e => e.MLoCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("mLo_Code");

                entity.Property(e => e.MLoCost)
                    .HasMaxLength(10)
                    .HasColumnName("mLo_Cost");

                entity.Property(e => e.MLoProfit)
                    .HasMaxLength(10)
                    .HasColumnName("mLo_Profit");

                entity.Property(e => e.MLoSaleDesc)
                    .HasMaxLength(50)
                    .HasColumnName("mLo_SaleDesc");

                entity.Property(e => e.MLoSaleUnit)
                    .HasMaxLength(8)
                    .HasColumnName("mLo_SaleUnit");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MMapSwift>(entity =>
            {
                entity.HasKey(e => new { e.Mttype, e.Fdnumber });

                entity.ToTable("mMapSWIFT");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MTType")
                    .IsFixedLength(true);

                entity.Property(e => e.Fdnumber)
                    .HasMaxLength(5)
                    .HasColumnName("FDNumber");

                entity.Property(e => e.Fdname)
                    .HasMaxLength(100)
                    .HasColumnName("FDName");
            });

            modelBuilder.Entity<MNostroGl>(entity =>
            {
                entity.HasKey(e => new { e.NostroBank, e.NostroCcy });

                entity.ToTable("mNostroGL");

                entity.Property(e => e.NostroBank)
                    .HasMaxLength(14)
                    .HasColumnName("Nostro_Bank");

                entity.Property(e => e.NostroCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Nostro_Ccy");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NostroGl)
                    .HasMaxLength(19)
                    .HasColumnName("Nostro_GL");

                entity.Property(e => e.PayNote)
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MPlanComm>(entity =>
            {
                entity.HasKey(e => new { e.ComType, e.ComSeq })
                    .HasName("PK_mCommPlan");

                entity.ToTable("mPlanComm");

                entity.Property(e => e.ComType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ComMax).HasDefaultValueSql("(0)");

                entity.Property(e => e.ComMin).HasDefaultValueSql("(0)");

                entity.Property(e => e.ComRate).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<MProvince>(entity =>
            {
                entity.HasKey(e => e.ProvCode);

                entity.ToTable("mProvince");

                entity.Property(e => e.ProvCode)
                    .HasMaxLength(5)
                    .HasColumnName("Prov_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProvName)
                    .HasMaxLength(35)
                    .HasColumnName("Prov_Name");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MPurpose>(entity =>
            {
                entity.HasKey(e => e.PurCode);

                entity.ToTable("mPurpose");

                entity.Property(e => e.PurCode)
                    .HasMaxLength(6)
                    .HasColumnName("Pur_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurDesc)
                    .HasMaxLength(200)
                    .HasColumnName("Pur_Desc");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MRelation>(entity =>
            {
                entity.HasKey(e => e.RelCode);

                entity.ToTable("mRelation");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("Rel_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RelDesc)
                    .HasMaxLength(50)
                    .HasColumnName("Rel_Desc");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MRunning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mRunning");

                entity.Property(e => e.CustRun)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("cust_run")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CustShow)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cust_show")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<MSetGenGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSetGenGL");

                entity.Property(e => e.Accode).HasMaxLength(255);

                entity.Property(e => e.Accy)
                    .HasMaxLength(255)
                    .HasColumnName("ACcy");

                entity.Property(e => e.Acenter)
                    .HasMaxLength(255)
                    .HasColumnName("ACenter");

                entity.Property(e => e.Acond)
                    .HasMaxLength(255)
                    .HasColumnName("ACond");

                entity.Property(e => e.Aevent)
                    .HasMaxLength(255)
                    .HasColumnName("AEvent");

                entity.Property(e => e.Aflag)
                    .HasMaxLength(255)
                    .HasColumnName("AFlag");

                entity.Property(e => e.Amodule)
                    .HasMaxLength(255)
                    .HasColumnName("AModule");

                entity.Property(e => e.Aname)
                    .HasMaxLength(255)
                    .HasColumnName("AName");

                entity.Property(e => e.Anature)
                    .HasMaxLength(255)
                    .HasColumnName("ANature");

                entity.Property(e => e.Anote)
                    .HasMaxLength(255)
                    .HasColumnName("ANote");

                entity.Property(e => e.Aseq)
                    .HasMaxLength(255)
                    .HasColumnName("ASeq");
            });

            modelBuilder.Entity<MSetGenGl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSetGenGL2");

                entity.Property(e => e.Accode).HasMaxLength(255);

                entity.Property(e => e.Accy)
                    .HasMaxLength(255)
                    .HasColumnName("ACcy");

                entity.Property(e => e.Acenter)
                    .HasMaxLength(255)
                    .HasColumnName("ACenter");

                entity.Property(e => e.Acond)
                    .HasMaxLength(255)
                    .HasColumnName("ACond");

                entity.Property(e => e.Aevent)
                    .HasMaxLength(255)
                    .HasColumnName("AEvent");

                entity.Property(e => e.Aflag)
                    .HasMaxLength(255)
                    .HasColumnName("AFlag");

                entity.Property(e => e.Amodule)
                    .HasMaxLength(255)
                    .HasColumnName("AModule");

                entity.Property(e => e.Aname)
                    .HasMaxLength(255)
                    .HasColumnName("AName");

                entity.Property(e => e.Anature)
                    .HasMaxLength(255)
                    .HasColumnName("ANature");

                entity.Property(e => e.Anote)
                    .HasMaxLength(255)
                    .HasColumnName("ANote");

                entity.Property(e => e.Aseq)
                    .HasMaxLength(255)
                    .HasColumnName("ASeq");
            });

            modelBuilder.Entity<MSetGenGl3>(entity =>
            {
                entity.HasKey(e => new { e.Amodule, e.Aevent, e.Aseq });

                entity.ToTable("mSetGenGL3");

                entity.Property(e => e.Amodule)
                    .HasMaxLength(4)
                    .HasColumnName("AModule");

                entity.Property(e => e.Aevent)
                    .HasMaxLength(20)
                    .HasColumnName("AEvent");

                entity.Property(e => e.Aseq).HasColumnName("ASeq");

                entity.Property(e => e.Accode).HasMaxLength(255);

                entity.Property(e => e.Accy)
                    .HasMaxLength(255)
                    .HasColumnName("ACcy");

                entity.Property(e => e.Acenter)
                    .HasMaxLength(255)
                    .HasColumnName("ACenter");

                entity.Property(e => e.Acond)
                    .HasMaxLength(255)
                    .HasColumnName("ACond");

                entity.Property(e => e.Aflag)
                    .HasMaxLength(255)
                    .HasColumnName("AFlag");

                entity.Property(e => e.Aname)
                    .HasMaxLength(255)
                    .HasColumnName("AName");

                entity.Property(e => e.Anature)
                    .HasMaxLength(255)
                    .HasColumnName("ANature");

                entity.Property(e => e.Anote)
                    .HasMaxLength(255)
                    .HasColumnName("ANote");
            });

            modelBuilder.Entity<MSetGenGlbk>(entity =>
            {
                entity.HasKey(e => new { e.Amodule, e.Aevent, e.Aseq })
                    .HasName("PK_mSetGenGL");

                entity.ToTable("mSetGenGLbk");

                entity.Property(e => e.Amodule)
                    .HasMaxLength(4)
                    .HasColumnName("AModule");

                entity.Property(e => e.Aevent)
                    .HasMaxLength(20)
                    .HasColumnName("AEvent");

                entity.Property(e => e.Aseq).HasColumnName("ASeq");

                entity.Property(e => e.Accode).HasMaxLength(14);

                entity.Property(e => e.Accy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACcy")
                    .IsFixedLength(true);

                entity.Property(e => e.Acenter)
                    .HasMaxLength(4)
                    .HasColumnName("ACenter");

                entity.Property(e => e.Acond)
                    .HasMaxLength(25)
                    .HasColumnName("ACond");

                entity.Property(e => e.Aflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Aname)
                    .HasMaxLength(20)
                    .HasColumnName("AName");

                entity.Property(e => e.Anature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANature")
                    .IsFixedLength(true);

                entity.Property(e => e.Anote)
                    .HasMaxLength(25)
                    .HasColumnName("ANote");
            });

            modelBuilder.Entity<MSetRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSetRate");

                entity.Property(e => e.Module)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Rate).HasColumnName("RATE");

                entity.Property(e => e.Rateid)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("RATEID");
            });

            modelBuilder.Entity<MTextFile>(entity =>
            {
                entity.HasKey(e => new { e.TextModule, e.TextField, e.TextNo });

                entity.ToTable("mTextFile");

                entity.Property(e => e.TextModule).HasMaxLength(5);

                entity.Property(e => e.TextField).HasMaxLength(20);

                entity.Property(e => e.TextCond)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TextData).HasMaxLength(4000);
            });

            modelBuilder.Entity<MTitle>(entity =>
            {
                entity.HasKey(e => e.TitleCode);

                entity.ToTable("mTitle");

                entity.Property(e => e.TitleCode)
                    .HasMaxLength(3)
                    .HasColumnName("Title_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TitleFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Title_flag")
                    .IsFixedLength(true);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(35)
                    .HasColumnName("Title_Name");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MTranType>(entity =>
            {
                entity.HasKey(e => e.TranCode);

                entity.ToTable("mTranType");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(3)
                    .HasColumnName("Tran_Code");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranDesc)
                    .HasMaxLength(50)
                    .HasColumnName("Tran_Desc");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<MUser>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("mUser");

                entity.Property(e => e.UserId).HasMaxLength(12);

                entity.Property(e => e.UserBran).HasMaxLength(4);

                entity.Property(e => e.UserDept).HasMaxLength(70);

                entity.Property(e => e.UserEmail).HasMaxLength(300);

                entity.Property(e => e.UserExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserLevel).HasMaxLength(2);

                entity.Property(e => e.UserLockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserName).HasMaxLength(70);

                entity.Property(e => e.UserPassword).HasMaxLength(60);

                entity.Property(e => e.UserPassword1).HasMaxLength(60);

                entity.Property(e => e.UserPassword2).HasMaxLength(60);

                entity.Property(e => e.UserPassword3).HasMaxLength(60);

                entity.Property(e => e.UserPasswordChangeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserPasswordExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserRemark).HasMaxLength(200);

                entity.Property(e => e.UserStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Mlogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mlogin");

                entity.Property(e => e.Password)
                    .HasMaxLength(20)
                    .HasColumnName("password");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<PBankLiab>(entity =>
            {
                entity.HasKey(e => new { e.BankCode, e.FacilityNo, e.Currency });

                entity.ToTable("pBankLiab");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_Amt");

                entity.Property(e => e.DlcBook).HasColumnName("DLC_Book");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.ExacAmt).HasColumnName("EXAC_Amt");

                entity.Property(e => e.ExacBook).HasColumnName("EXAC_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PBankLimit>(entity =>
            {
                entity.HasKey(e => new { e.BankCode, e.FacilityNo });

                entity.ToTable("pBankLimit");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BlockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Block_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.BlockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BlockNote)
                    .HasMaxLength(350)
                    .HasColumnName("Block_Note");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("Cnty_Code");

                entity.Property(e => e.Condition).HasMaxLength(150);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreditAmount)
                    .HasColumnName("Credit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Credit_Ccy");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpiryDate2).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmount)
                    .HasColumnName("Hold_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.OriginAmount)
                    .HasColumnName("Origin_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo).HasColumnName("Seq_No");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount)
                    .HasColumnName("Susp_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UsingRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PBankLmProduct>(entity =>
            {
                entity.HasKey(e => new { e.BankCode, e.FacilityNo, e.SeqNo, e.ProdCode });

                entity.ToTable("pBankLmProduct");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.ProdCode)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Code");

                entity.Property(e => e.CcsLimit)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_Limit");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CcsRef)
                    .HasMaxLength(10)
                    .HasColumnName("CCS_ref");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdLimit)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Limit");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PBankLsum>(entity =>
            {
                entity.HasKey(e => new { e.BankCode, e.FacilityNo })
                    .HasName("PK_pBankLSum_1");

                entity.ToTable("pBankLSum");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.DbeAmt)
                    .HasColumnName("DBE_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DbeBook)
                    .HasColumnName("DBE_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DlcAmt)
                    .HasColumnName("DLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DlcBook)
                    .HasColumnName("DLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.ExacAmt).HasColumnName("EXAC_Amt");

                entity.Property(e => e.ExacBook).HasColumnName("EXAC_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PBlogLimit>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LbankCode, e.LfacilityNo });

                entity.ToTable("pBLogLimit");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LbankCode)
                    .HasMaxLength(14)
                    .HasColumnName("LBank_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LCntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("lCnty_Code");

                entity.Property(e => e.LblockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LBlock_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.LblockDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LBlockDate");

                entity.Property(e => e.LblockNote)
                    .HasMaxLength(350)
                    .HasColumnName("LBlock_Note");

                entity.Property(e => e.LccsNo)
                    .HasMaxLength(20)
                    .HasColumnName("LCCS_No");

                entity.Property(e => e.Lcframount).HasColumnName("LCFRAmount");

                entity.Property(e => e.Lcfrrate)
                    .HasMaxLength(10)
                    .HasColumnName("LCFRRate");

                entity.Property(e => e.Lcfrspread).HasColumnName("LCFRSpread");

                entity.Property(e => e.Lcondition)
                    .HasMaxLength(150)
                    .HasColumnName("LCondition");

                entity.Property(e => e.LcreditAmount)
                    .HasColumnName("LCredit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LcreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("LCredit_Ccy");

                entity.Property(e => e.LcreditShare)
                    .HasColumnName("LCredit_Share")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LexpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LExpiryDate");

                entity.Property(e => e.LfacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LFacility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.LholdAmount).HasColumnName("LHold_Amount");

                entity.Property(e => e.LlimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLimit_Code");

                entity.Property(e => e.LoriginAmount)
                    .HasColumnName("LOrigin_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lremark)
                    .HasMaxLength(350)
                    .HasColumnName("LRemark");

                entity.Property(e => e.LrevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRevol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Lsseqno)
                    .HasColumnName("LSseqno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LstartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LStartDate");

                entity.Property(e => e.Lstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.LupdNo).HasColumnName("LUpdNo");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PBlogLmProduct>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LbankCode, e.LfacilityNo, e.LseqNo, e.LprodCode });

                entity.ToTable("pBLogLmProduct");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LbankCode)
                    .HasMaxLength(14)
                    .HasColumnName("LBank_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.LprodCode)
                    .HasMaxLength(15)
                    .HasColumnName("LProd_Code");

                entity.Property(e => e.LccsLimit)
                    .HasMaxLength(3)
                    .HasColumnName("LCCS_Limit");

                entity.Property(e => e.LccsNo)
                    .HasMaxLength(20)
                    .HasColumnName("LCCS_No");

                entity.Property(e => e.LccsRef)
                    .HasMaxLength(10)
                    .HasColumnName("LCCS_Ref");

                entity.Property(e => e.LexpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LExpiryDate");

                entity.Property(e => e.LprodAmount).HasColumnName("LProdAmount");

                entity.Property(e => e.LprodLimit)
                    .HasMaxLength(15)
                    .HasColumnName("LProd_Limit");

                entity.Property(e => e.LstartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LStartDate");
            });

            modelBuilder.Entity<PClogLimit>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LcustCode, e.LfacilityNo });

                entity.ToTable("pCLogLimit");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LcustCode)
                    .HasMaxLength(6)
                    .HasColumnName("LCust_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.AuthCode).HasMaxLength(8);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LblockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LBlock_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.LblockDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LBlockDate");

                entity.Property(e => e.LblockNote)
                    .HasMaxLength(350)
                    .HasColumnName("LBlock_Note");

                entity.Property(e => e.LcampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LCampaign_Code");

                entity.Property(e => e.LcampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LCampaign_EffDate");

                entity.Property(e => e.LccsNo)
                    .HasMaxLength(20)
                    .HasColumnName("LCCS_No");

                entity.Property(e => e.Lcframount).HasColumnName("LCFRAmount");

                entity.Property(e => e.Lcfrrate)
                    .HasMaxLength(10)
                    .HasColumnName("LCFRRate");

                entity.Property(e => e.Lcfrspread).HasColumnName("LCFRSpread");

                entity.Property(e => e.Lcondition)
                    .HasMaxLength(150)
                    .HasColumnName("LCondition");

                entity.Property(e => e.LcreditAmount)
                    .HasColumnName("LCredit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LcreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("LCredit_Ccy");

                entity.Property(e => e.LcreditShare)
                    .HasColumnName("LCredit_Share")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LearAmount).HasColumnName("LEar_Amount");

                entity.Property(e => e.LexpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LExpiryDate");

                entity.Property(e => e.LfacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LFacility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.LholdAmount).HasColumnName("LHold_Amount");

                entity.Property(e => e.LlimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("LLimit_Code");

                entity.Property(e => e.LoriginAmount)
                    .HasColumnName("LOrigin_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LparentId)
                    .HasMaxLength(6)
                    .HasColumnName("LParent_Id");

                entity.Property(e => e.Lremark)
                    .HasMaxLength(350)
                    .HasColumnName("LRemark");

                entity.Property(e => e.LrevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRevol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.Lsseqno)
                    .HasColumnName("LSseqno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LstartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LStartDate");

                entity.Property(e => e.Lstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.LupdNo).HasColumnName("LUpdNo");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PClogLmCc>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LcustCode, e.LfacilityNo, e.LseqNo, e.LprodMod, e.LprodRef })
                    .HasName("PK_pCLogProdCCS");

                entity.ToTable("pCLogLmCCS");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LcustCode)
                    .HasMaxLength(6)
                    .HasColumnName("LCust_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.LprodMod)
                    .HasMaxLength(15)
                    .HasColumnName("LProd_Mod");

                entity.Property(e => e.LprodRef)
                    .HasMaxLength(5)
                    .HasColumnName("LProd_Ref");

                entity.Property(e => e.LccsCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LCCS_Ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.LccsDocStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCCS_DocStat")
                    .IsFixedLength(true);

                entity.Property(e => e.LccsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("LCCS_LmType");

                entity.Property(e => e.LccsNo)
                    .HasMaxLength(20)
                    .HasColumnName("LCCS_No");

                entity.Property(e => e.LccsStat)
                    .HasMaxLength(10)
                    .HasColumnName("LCCS_Stat");
            });

            modelBuilder.Entity<PClogLmProduct>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LcustCode, e.LfacilityNo, e.LseqNo, e.LprodCode });

                entity.ToTable("pCLogLmProduct");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LcustCode)
                    .HasMaxLength(6)
                    .HasColumnName("LCust_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.LprodCode)
                    .HasMaxLength(15)
                    .HasColumnName("LProd_Code");

                entity.Property(e => e.LccsLimit)
                    .HasMaxLength(3)
                    .HasColumnName("LCCS_Limit");

                entity.Property(e => e.LccsNo)
                    .HasMaxLength(20)
                    .HasColumnName("LCCS_No");

                entity.Property(e => e.LccsRef)
                    .HasMaxLength(10)
                    .HasColumnName("LCCS_Ref");

                entity.Property(e => e.LexpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LExpiryDate");

                entity.Property(e => e.LprodAmount).HasColumnName("LProdAmount");

                entity.Property(e => e.LprodLimit)
                    .HasMaxLength(15)
                    .HasColumnName("LProd_Limit");

                entity.Property(e => e.LstartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LStartDate");
            });

            modelBuilder.Entity<PClogShare>(entity =>
            {
                entity.HasKey(e => new { e.LrecType, e.LlogSeq, e.LcustCode, e.LfacilityNo, e.LseqNo });

                entity.ToTable("pCLogShare");

                entity.Property(e => e.LrecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LRecType")
                    .IsFixedLength(true);

                entity.Property(e => e.LlogSeq).HasColumnName("LLogSeq");

                entity.Property(e => e.LcustCode)
                    .HasMaxLength(6)
                    .HasColumnName("LCust_Code");

                entity.Property(e => e.LfacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("LFacility_No");

                entity.Property(e => e.LseqNo).HasColumnName("LSeqNo");

                entity.Property(e => e.LshareCcs)
                    .HasMaxLength(20)
                    .HasColumnName("LShare_CCS");

                entity.Property(e => e.LshareCredit).HasColumnName("LShare_Credit");

                entity.Property(e => e.LshareCust)
                    .HasMaxLength(6)
                    .HasColumnName("LShare_Cust");

                entity.Property(e => e.LshareDlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Dlc")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Exp")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareImp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Imp")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareLg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_LG")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareLimit)
                    .HasMaxLength(10)
                    .HasColumnName("LShare_Limit");

                entity.Property(e => e.LshareMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LShare_Mode")
                    .IsFixedLength(true);

                entity.Property(e => e.LshareUsed).HasColumnName("LShare_Used");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PControlPack>(entity =>
            {
                entity.HasKey(e => e.ContNo);

                entity.ToTable("pControlPack");

                entity.Property(e => e.ContNo).HasMaxLength(15);

                entity.Property(e => e.AppName).HasMaxLength(50);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CntyCode).HasMaxLength(50);

                entity.Property(e => e.ContDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ContTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.CustInfo).HasMaxLength(170);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.Expirydate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoodCode).HasMaxLength(50);

                entity.Property(e => e.GoodDesc).HasMaxLength(200);

                entity.Property(e => e.InUser)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PackUnder).HasMaxLength(35);

                entity.Property(e => e.ReferLcNo).HasMaxLength(35);

                entity.Property(e => e.RelCode).HasMaxLength(6);

                entity.Property(e => e.ShipmentFr).HasMaxLength(70);

                entity.Property(e => e.ShipmentTo).HasMaxLength(70);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PCustAppv>(entity =>
            {
                entity.HasKey(e => e.AppvNo);

                entity.ToTable("pCustAppv");

                entity.Property(e => e.AppvNo)
                    .HasMaxLength(15)
                    .HasColumnName("Appv_No");

                entity.Property(e => e.AppvAmt)
                    .HasColumnName("Appv_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.AppvCanDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Appv_CanDate");

                entity.Property(e => e.AppvCancel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Appv_Cancel")
                    .IsFixedLength(true);

                entity.Property(e => e.AppvStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Appv_Status")
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AvailableAmt).HasColumnName("Available_Amt");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CreditLine)
                    .HasColumnName("Credit_Line")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.EntryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.FacilityFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.GroupAmt).HasColumnName("Group_Amt");

                entity.Property(e => e.HoldAmt)
                    .HasColumnName("Hold_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.HoldCust)
                    .HasMaxLength(6)
                    .HasColumnName("Hold_Cust");

                entity.Property(e => e.HoldFacNo)
                    .HasMaxLength(13)
                    .HasColumnName("Hold_FacNo");

                entity.Property(e => e.LiabAmt)
                    .HasColumnName("Liab_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NonLineAmt).HasColumnName("NonLine_Amt");

                entity.Property(e => e.OverAmt).HasColumnName("Over_Amt");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferBhtAmt)
                    .HasColumnName("Refer_BhtAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ReferCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Refer_Ccy");

                entity.Property(e => e.ReferCcyAmt)
                    .HasColumnName("Refer_CcyAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ReferDocNo)
                    .HasMaxLength(20)
                    .HasColumnName("Refer_DocNo");

                entity.Property(e => e.ReferExchRate)
                    .HasColumnName("Refer_ExchRate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ReferRefNo)
                    .HasMaxLength(16)
                    .HasColumnName("Refer_RefNo");

                entity.Property(e => e.ReferType)
                    .HasMaxLength(5)
                    .HasColumnName("Refer_Type");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.ReverseAmt)
                    .HasColumnName("Reverse_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ShareAmt)
                    .HasColumnName("Share_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ShareType)
                    .HasMaxLength(10)
                    .HasColumnName("Share_Type");

                entity.Property(e => e.SuspAmt).HasColumnName("Susp_Amt");

                entity.Property(e => e.TavailableAmt).HasColumnName("TAvailable_Amt");

                entity.Property(e => e.TotAppvAmt)
                    .HasColumnName("TotAppv_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotCreditLine)
                    .HasColumnName("TotCredit_Line")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotGroupAmt).HasColumnName("TotGroup_Amt");

                entity.Property(e => e.TotHoldAmt)
                    .HasColumnName("TotHold_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotLiabAmt)
                    .HasColumnName("TotLiab_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotNonLineAmt).HasColumnName("TotNonLine_Amt");

                entity.Property(e => e.TotOverAmt).HasColumnName("TotOver_Amt");

                entity.Property(e => e.TotShareAmt)
                    .HasColumnName("TotShare_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotSuspAmt).HasColumnName("TotSusp_Amt");

                entity.Property(e => e.TxHoldAmt)
                    .HasColumnName("TxHold_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PCustAppvDet>(entity =>
            {
                entity.HasKey(e => new { e.AppvNo, e.CustCode });

                entity.ToTable("pCustAppvDet");

                entity.Property(e => e.AppvNo)
                    .HasMaxLength(15)
                    .HasColumnName("Appv_No");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DbeOdue).HasColumnName("DBE_Odue");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_AMT");

                entity.Property(e => e.DlcBooK).HasColumnName("DLC_BooK");

                entity.Property(e => e.EbsAmt).HasColumnName("EBS_Amt");

                entity.Property(e => e.EbsBook).HasColumnName("EBS_Book");

                entity.Property(e => e.EbsOdue).HasColumnName("EBS_Odue");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcOdue).HasColumnName("EXPC_Odue");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsOdue).HasColumnName("IBLS_Odue");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltOdue).HasColumnName("IBLT_Odue");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrOdue).HasColumnName("IMTR_Odue");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.OdeOdue).HasColumnName("ODE_Odue");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpOdue).HasColumnName("XBCP_Odue");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpOdue).HasColumnName("XLCP_Odue");
            });

            modelBuilder.Entity<PCustLiab>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo, e.Currency });

                entity.ToTable("pCustLiab");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_Amt");

                entity.Property(e => e.DlcBook).HasColumnName("DLC_Book");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.EbsAmt).HasColumnName("EBS_Amt");

                entity.Property(e => e.EbsBook).HasColumnName("EBS_Book");

                entity.Property(e => e.EbxAmt).HasColumnName("EBX_Amt");

                entity.Property(e => e.EbxBook).HasColumnName("EBX_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.TrsBook).HasColumnName("TRS_Book");

                entity.Property(e => e.TrtrsAmt).HasColumnName("TRTRS_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PCustLimit>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo });

                entity.ToTable("pCustLimit");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BlockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Block_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.BlockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BlockNote)
                    .HasMaxLength(350)
                    .HasColumnName("Block_Note");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.Cframount).HasColumnName("CFRAmount");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(10)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.Cfrspread).HasColumnName("CFRSpread");

                entity.Property(e => e.ClmsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLMS_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Condition).HasMaxLength(150);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreditAmount)
                    .HasColumnName("Credit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Credit_Ccy");

                entity.Property(e => e.CreditShare)
                    .HasColumnName("Credit_Share")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.EarAmount).HasColumnName("Ear_Amount");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpiryDate2).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmount)
                    .HasColumnName("Hold_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.OriginAmount)
                    .HasColumnName("Origin_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(6)
                    .HasColumnName("Parent_Id");

                entity.Property(e => e.RecCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferCust)
                    .HasMaxLength(6)
                    .HasColumnName("Refer_Cust");

                entity.Property(e => e.ReferFacility)
                    .HasMaxLength(13)
                    .HasColumnName("Refer_Facility");

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo).HasColumnName("Seq_No");

                entity.Property(e => e.ShareAmount)
                    .HasColumnName("Share_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ShareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount)
                    .HasColumnName("Susp_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UsingRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PCustLmCc>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo, e.SeqNo, e.ProdMod, e.ProdRef });

                entity.ToTable("pCustLmCCS");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.ProdMod)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Mod");

                entity.Property(e => e.ProdRef)
                    .HasMaxLength(5)
                    .HasColumnName("Prod_Ref");

                entity.Property(e => e.CcsCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCS_Ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsDocStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CCS_DocStat")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CcsStat)
                    .HasMaxLength(10)
                    .HasColumnName("CCS_Stat");
            });

            modelBuilder.Entity<PCustLmProduct>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo, e.SeqNo, e.ProdCode });

                entity.ToTable("pCustLmProduct");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.ProdCode)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Code");

                entity.Property(e => e.CcsLimit)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_Limit");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CcsRef)
                    .HasMaxLength(10)
                    .HasColumnName("CCS_ref");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdLimit)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Limit");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PCustLsum>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo });

                entity.ToTable("pCustLSum");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.DbeAmt)
                    .HasColumnName("DBE_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DbeBook)
                    .HasColumnName("DBE_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DlcAmt)
                    .HasColumnName("DLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DlcBook)
                    .HasColumnName("DLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.EbsAmt).HasColumnName("EBS_Amt");

                entity.Property(e => e.EbsBook).HasColumnName("EBS_Book");

                entity.Property(e => e.EbxAmt).HasColumnName("EBX_Amt");

                entity.Property(e => e.EbxBook).HasColumnName("EBX_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.TrsBook).HasColumnName("TRS_Book");

                entity.Property(e => e.TrtrsAmt).HasColumnName("TRTRS_Amt");

                entity.Property(e => e.TrtrsAmt1).HasColumnName("TRTRS_Amt1");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PCustShare>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo, e.Seqno });

                entity.ToTable("pCustShare");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.ShareCcs)
                    .HasMaxLength(20)
                    .HasColumnName("Share_CCS");

                entity.Property(e => e.ShareCredit)
                    .HasColumnName("Share_Credit")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ShareCust)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Share_Cust");

                entity.Property(e => e.ShareDlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Dlc")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Exp")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareImp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Imp")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareLg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_LG")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareLimit)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Share_Limit");

                entity.Property(e => e.ShareMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Mode")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareUsed)
                    .HasColumnName("Share_Used")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PDailyGl>(entity =>
            {
                entity.HasKey(e => new { e.VouchDate, e.VouchId, e.TranSeq, e.TranDocNo, e.TranDocseq })
                    .HasName("PK_pDayGL");

                entity.ToTable("pDailyGL");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(15)
                    .HasColumnName("VouchID");

                entity.Property(e => e.TranDocNo).HasMaxLength(15);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustCode).HasMaxLength(8);

                entity.Property(e => e.GfmsBran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMS_Bran");

                entity.Property(e => e.GfmsMap)
                    .HasMaxLength(11)
                    .HasColumnName("GFMS_Map");

                entity.Property(e => e.InvoiceNo).HasMaxLength(15);

                entity.Property(e => e.LoanStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NostroBank).HasMaxLength(13);

                entity.Property(e => e.ProdCode).HasMaxLength(6);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(5)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(4)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tag20Ref).HasMaxLength(20);

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranAllocate).HasMaxLength(15);

                entity.Property(e => e.TranBran).HasMaxLength(4);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCenter).HasMaxLength(4);

                entity.Property(e => e.TranCond).HasMaxLength(20);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranDesc).HasMaxLength(50);

                entity.Property(e => e.TranEvent).HasMaxLength(20);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranRef).HasMaxLength(15);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<PDailyGl4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDailyGL4");

                entity.Property(e => e.CreateDate).HasMaxLength(255);

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.SendFlag).HasMaxLength(255);

                entity.Property(e => e.TranAccount).HasMaxLength(255);

                entity.Property(e => e.TranAllocate).HasMaxLength(255);

                entity.Property(e => e.TranAmount).HasMaxLength(255);

                entity.Property(e => e.TranBran).HasMaxLength(255);

                entity.Property(e => e.TranCcy).HasMaxLength(255);

                entity.Property(e => e.TranCenter).HasMaxLength(255);

                entity.Property(e => e.TranCond).HasMaxLength(255);

                entity.Property(e => e.TranDept).HasMaxLength(255);

                entity.Property(e => e.TranDesc).HasMaxLength(255);

                entity.Property(e => e.TranDocNo).HasMaxLength(255);

                entity.Property(e => e.TranDocseq).HasMaxLength(255);

                entity.Property(e => e.TranEvent).HasMaxLength(255);

                entity.Property(e => e.TranExch).HasMaxLength(255);

                entity.Property(e => e.TranMod).HasMaxLength(255);

                entity.Property(e => e.TranNature).HasMaxLength(255);

                entity.Property(e => e.TranRef).HasMaxLength(255);

                entity.Property(e => e.TranSeq).HasMaxLength(255);

                entity.Property(e => e.TranStatus).HasMaxLength(255);

                entity.Property(e => e.VouchDate).HasMaxLength(255);

                entity.Property(e => e.VouchId)
                    .HasMaxLength(255)
                    .HasColumnName("VouchID");
            });

            modelBuilder.Entity<PDailyGlmap>(entity =>
            {
                entity.HasKey(e => new { e.VouchDate, e.VouchId, e.TranSeq, e.TranDocNo, e.TranDocseq });

                entity.ToTable("pDailyGLMap");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(15)
                    .HasColumnName("VouchID");

                entity.Property(e => e.TranDocNo).HasMaxLength(15);

                entity.Property(e => e.TranBsarea)
                    .HasMaxLength(4)
                    .HasColumnName("TranBSArea");

                entity.Property(e => e.TranBsline)
                    .HasMaxLength(10)
                    .HasColumnName("TranBSLine");

                entity.Property(e => e.TranCost).HasMaxLength(10);

                entity.Property(e => e.TranIndex2).HasMaxLength(15);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranProd).HasMaxLength(10);

                entity.Property(e => e.TranProfit).HasMaxLength(10);

                entity.Property(e => e.TranSale).HasMaxLength(10);

                entity.Property(e => e.TranSapAcc).HasMaxLength(19);

                entity.Property(e => e.TranTerm).HasMaxLength(10);
            });

            modelBuilder.Entity<PDailyGlsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDailyGLSum");

                entity.Property(e => e.SumCcy).HasColumnName("SumCCY");

                entity.Property(e => e.SumThb).HasColumnName("SumTHB");

                entity.Property(e => e.TranBsarea)
                    .HasMaxLength(4)
                    .HasColumnName("TranBSArea");

                entity.Property(e => e.TranBsline)
                    .HasMaxLength(10)
                    .HasColumnName("TranBSLine");

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCost).HasMaxLength(10);

                entity.Property(e => e.TranIndex).HasMaxLength(5);

                entity.Property(e => e.TranIndex2).HasMaxLength(15);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranProd).HasMaxLength(10);

                entity.Property(e => e.TranProfit).HasMaxLength(10);

                entity.Property(e => e.TranSale).HasMaxLength(10);

                entity.Property(e => e.TranSapAcc).HasMaxLength(19);

                entity.Property(e => e.TranTerm).HasMaxLength(10);

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PDailySap>(entity =>
            {
                entity.HasKey(e => new { e.VouchDate, e.RecNo });

                entity.ToTable("pDailySap");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranAllocate).HasMaxLength(10);

                entity.Property(e => e.TranBatch).HasMaxLength(15);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCenter).HasMaxLength(4);

                entity.Property(e => e.TranEvent).HasMaxLength(20);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranThb).HasColumnName("TranTHB");
            });

            modelBuilder.Entity<PDailySapHead>(entity =>
            {
                entity.HasKey(e => new { e.VouchDate, e.TranIndex });

                entity.ToTable("pDailySapHead");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranIndex).HasMaxLength(5);

                entity.Property(e => e.TranCcy).HasMaxLength(3);
            });

            modelBuilder.Entity<PDailySapMap>(entity =>
            {
                entity.HasKey(e => new { e.VouchDate, e.RecNo })
                    .HasName("PK_pDailySapNew");

                entity.ToTable("pDailySapMap");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranBatch).HasMaxLength(15);

                entity.Property(e => e.TranBsarea)
                    .HasMaxLength(4)
                    .HasColumnName("TranBSArea");

                entity.Property(e => e.TranBsline)
                    .HasMaxLength(10)
                    .HasColumnName("TranBSLine");

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCost).HasMaxLength(10);

                entity.Property(e => e.TranExch)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranIndex).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranProd).HasMaxLength(10);

                entity.Property(e => e.TranProfit).HasMaxLength(10);

                entity.Property(e => e.TranSale).HasMaxLength(10);

                entity.Property(e => e.TranTerm).HasMaxLength(10);

                entity.Property(e => e.TranThb).HasColumnName("TranTHB");
            });

            modelBuilder.Entity<PDmsfla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSFLA");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(50)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(50)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.ArrangeContDate).HasMaxLength(8);

                entity.Property(e => e.ArrangeTerm).HasMaxLength(3);

                entity.Property(e => e.ArrangeTermType).HasMaxLength(6);

                entity.Property(e => e.ArrangeTermUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.CallOpWholeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CentralId)
                    .HasMaxLength(9)
                    .HasColumnName("CentralID");

                entity.Property(e => e.ContractCcyId)
                    .HasMaxLength(3)
                    .HasColumnName("ContractCcyID");

                entity.Property(e => e.CreditType).HasMaxLength(8);

                entity.Property(e => e.DataProviderBranchNumber).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EffectiveDate).HasMaxLength(8);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExtendedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburseDate).HasMaxLength(8);

                entity.Property(e => e.FirstRepaymentDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.IntRepayTerm).HasMaxLength(3);

                entity.Property(e => e.IntRepayTermUnit).HasMaxLength(1);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.LoanCallOptExAmt).HasMaxLength(8);

                entity.Property(e => e.LoanCallOptExDate).HasMaxLength(8);

                entity.Property(e => e.LoanPutOptExDate).HasMaxLength(8);

                entity.Property(e => e.LoanType).HasMaxLength(6);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevArrangeNum).HasMaxLength(6);

                entity.Property(e => e.PrimaryInvoBrnNum).HasMaxLength(6);

                entity.Property(e => e.PrimaryInvoIbf)
                    .HasMaxLength(6)
                    .HasColumnName("PrimaryInvoIBF");

                entity.Property(e => e.PrnRepayTermUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.PutOpWholeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelInvoPartyName).HasMaxLength(50);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");
            });

            modelBuilder.Entity<PDmsftu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSFTU");

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.CurId)
                    .HasMaxLength(3)
                    .HasColumnName("CurID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExcInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.FxarrangeType)
                    .HasMaxLength(6)
                    .HasColumnName("FXArrangeType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.LegType).HasMaxLength(6);

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTimeU)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RunTime_U")
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");
            });

            modelBuilder.Entity<PDmsftx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSFTX");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(200)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(200)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.AppvDocDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AppvDocNo).HasMaxLength(15);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenName).HasMaxLength(200);

                entity.Property(e => e.BotReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.BuyCurId)
                    .HasMaxLength(3)
                    .HasColumnName("BuyCurID");

                entity.Property(e => e.CancelationReasonType).HasMaxLength(50);

                entity.Property(e => e.CancellationReasonType).HasMaxLength(200);

                entity.Property(e => e.CentralId)
                    .HasMaxLength(50)
                    .HasColumnName("CentralID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.CustInvestType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DebtInstruIssueDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExcInvPartyBrNo).HasMaxLength(4);

                entity.Property(e => e.ExcInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.ExcInvPartyIbfind)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ExcInvPartyIBFInd")
                    .IsFixedLength(true);

                entity.Property(e => e.ExcInvPartyName).HasMaxLength(70);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirstInstallDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromToAccNo).HasMaxLength(19);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(6)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelTxdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FromToRelTXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.FromTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FromTXType");

                entity.Property(e => e.FxarrangeType)
                    .HasMaxLength(6)
                    .HasColumnName("FXArrangeType");

                entity.Property(e => e.FxtradingTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FXTradingTXType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.InstallTermUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.InvestReason).HasMaxLength(200);

                entity.Property(e => e.KeyInTimestamp).HasMaxLength(200);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.ListinMarketFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDecType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoofInstall)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoofShare).HasMaxLength(3);

                entity.Property(e => e.NotionalCurId)
                    .HasMaxLength(3)
                    .HasColumnName("NotionalCurID");

                entity.Property(e => e.ObjectiveType).HasMaxLength(50);

                entity.Property(e => e.OthTxpurposeDesc)
                    .HasMaxLength(200)
                    .HasColumnName("OthTXPurposeDesc");

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.OutsNotCurId)
                    .HasMaxLength(3)
                    .HasColumnName("OutsNotCurID");

                entity.Property(e => e.ParValue).HasMaxLength(3);

                entity.Property(e => e.PaymentMeth).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PreviousArrangementFicode)
                    .HasMaxLength(200)
                    .HasColumnName("PreviousArrangementFICode");

                entity.Property(e => e.PreviousArrangementNumber).HasMaxLength(200);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RePayDueIndicator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.RelInvPartyName).HasMaxLength(70);

                entity.Property(e => e.RelationRelInvParty).HasMaxLength(6);

                entity.Property(e => e.RelationwithBen).HasMaxLength(6);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SellCurId)
                    .HasMaxLength(3)
                    .HasColumnName("SellCurID");

                entity.Property(e => e.SetUpReasonType).HasMaxLength(200);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("ToTXType");

                entity.Property(e => e.Txdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.TxpurposeCode)
                    .HasMaxLength(6)
                    .HasColumnName("TXPurposeCode");

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");

                entity.Property(e => e.UnderlyingOwnerName).HasMaxLength(50);

                entity.Property(e => e.WholePartRepayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.YtdaccumAmt).HasColumnName("YTDAccumAmt");
            });

            modelBuilder.Entity<PDmsftxlimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSFTXLimit");

                entity.Property(e => e.DeleteFlag)
                    .HasMaxLength(50)
                    .HasColumnName("Delete_Flag");

                entity.Property(e => e.EventNo)
                    .HasMaxLength(50)
                    .HasColumnName("Event_No");

                entity.Property(e => e.FtxAmount).HasColumnName("FTX_Amount");
            });

            modelBuilder.Entity<PDmsltx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSLTX");

                entity.Property(e => e.AppvDocDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AppvDocNo).HasMaxLength(15);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(20);

                entity.Property(e => e.BenName).HasMaxLength(200);

                entity.Property(e => e.BotReferenceNumber).HasMaxLength(200);

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(3)
                    .HasColumnName("CurrencyID");

                entity.Property(e => e.CustInvestType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DataProviderBranchNumber).HasMaxLength(200);

                entity.Property(e => e.DebtInstruIssueDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirstInstallDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromToAccNo).HasMaxLength(19);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(6)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelTxdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FromToRelTXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.FromTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FromTXType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.InstallTermUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InstallmentNo).HasMaxLength(2);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.InvestReason).HasMaxLength(200);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.ListinMarketFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDepositTrxType).HasMaxLength(6);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoOfShare).HasMaxLength(3);

                entity.Property(e => e.NoofInstall)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OthRepayResonDesc).HasMaxLength(50);

                entity.Property(e => e.OthTxpurposeDesc)
                    .HasMaxLength(200)
                    .HasColumnName("OthTXPurposeDesc");

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.ParValue).HasMaxLength(3);

                entity.Property(e => e.PaymentMeth).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RePayDueIndicator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelationwithBen).HasMaxLength(6);

                entity.Property(e => e.RepaymentReson).HasMaxLength(6);

                entity.Property(e => e.ResCentralId)
                    .HasMaxLength(8)
                    .HasColumnName("ResCentralID");

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("ToTXType");

                entity.Property(e => e.TransactionDate).HasMaxLength(8);

                entity.Property(e => e.TxpurposeCode)
                    .HasMaxLength(6)
                    .HasColumnName("TXPurposeCode");

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");

                entity.Property(e => e.UnderlyingOwnerName).HasMaxLength(200);

                entity.Property(e => e.WholePartRepayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.YtdaccumAmt).HasColumnName("YTDAccumAmt");
            });

            modelBuilder.Entity<PDmsptx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDMSPTX");

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.CntryIdofInvolParty)
                    .HasMaxLength(2)
                    .HasColumnName("CntryIDOfInvolParty");

                entity.Property(e => e.CountryIdofIssuerorInvestedOrganization).HasMaxLength(2);

                entity.Property(e => e.CouponRate).HasMaxLength(20);

                entity.Property(e => e.CurrencyId).HasMaxLength(3);

                entity.Property(e => e.DebtInstrumentName).HasMaxLength(70);

                entity.Property(e => e.DebtInstrumentType).HasMaxLength(20);

                entity.Property(e => e.DefaultedBillPurchaseDate).HasMaxLength(8);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.IntentionCountryId).HasMaxLength(2);

                entity.Property(e => e.InvolPartyId)
                    .HasMaxLength(20)
                    .HasColumnName("InvolPartyID");

                entity.Property(e => e.InvolPartyName).HasMaxLength(70);

                entity.Property(e => e.Isincode)
                    .HasMaxLength(10)
                    .HasColumnName("ISINCode");

                entity.Property(e => e.IssueDate).HasMaxLength(8);

                entity.Property(e => e.IssuerorInvestedOrganizationName).HasMaxLength(70);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.MaturityDate).HasMaxLength(8);

                entity.Property(e => e.NostroAcc).HasMaxLength(15);

                entity.Property(e => e.OriginalTerm).HasMaxLength(3);

                entity.Property(e => e.OriginalTermUnit).HasMaxLength(3);

                entity.Property(e => e.PaymentMethod).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RecpPayTrnCode).HasMaxLength(6);

                entity.Property(e => e.RecpPayTrnDate).HasMaxLength(10);

                entity.Property(e => e.RecpPayTrnItmDesc).HasMaxLength(50);

                entity.Property(e => e.RecpPayTrnItmType).HasMaxLength(6);

                entity.Property(e => e.RecpPayTrnType).HasMaxLength(6);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTimeU)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RunTime_U")
                    .IsFixedLength(true);

                entity.Property(e => e.SellForeignCurSecTransAmtinBahtEqui).HasMaxLength(20);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq).HasColumnName("TXSeq");

                entity.Property(e => e.UnitofTransaction).HasMaxLength(5);
            });

            modelBuilder.Entity<PDocRegInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDocRegInv");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.InvNumber).HasMaxLength(26);

                entity.Property(e => e.RegDocno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Reg_Docno");

                entity.Property(e => e.RegDocseq).HasColumnName("Reg_Docseq");
            });

            modelBuilder.Entity<PDocRegInv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDocRegInv1");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.InvNumber).HasMaxLength(20);

                entity.Property(e => e.RegDocno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Reg_Docno");

                entity.Property(e => e.RegDocseq).HasColumnName("Reg_Docseq");
            });

            modelBuilder.Entity<PDocRegInv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pDocRegInv2");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.InvNumber).HasMaxLength(20);

                entity.Property(e => e.RegDocno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Reg_Docno");

                entity.Property(e => e.RegDocseq).HasColumnName("Reg_Docseq");
            });

            modelBuilder.Entity<PDocRegister>(entity =>
            {
                entity.HasKey(e => new { e.RegLogin, e.RegFunct, e.RegDocno });

                entity.ToTable("pDocRegister");

                entity.Property(e => e.RegLogin)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Reg_Login")
                    .IsFixedLength(true);

                entity.Property(e => e.RegFunct)
                    .HasMaxLength(6)
                    .HasColumnName("Reg_Funct");

                entity.Property(e => e.RegDocno)
                    .HasMaxLength(15)
                    .HasColumnName("Reg_Docno");

                entity.Property(e => e.AccessId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ID");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cif)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.EditionNumber)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Edition_Number");

                entity.Property(e => e.RegAmt)
                    .HasColumnName("Reg_Amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegAmt1)
                    .HasColumnName("Reg_Amt1")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegAppv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_Appv")
                    .IsFixedLength(true);

                entity.Property(e => e.RegAppvNo)
                    .HasMaxLength(15)
                    .HasColumnName("Reg_AppvNo");

                entity.Property(e => e.RegBankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Reg_BankCode");

                entity.Property(e => e.RegBhtAmt)
                    .HasColumnName("Reg_BhtAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Reg_Ccy");

                entity.Property(e => e.RegCcyAmt)
                    .HasColumnName("Reg_CcyAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegCcyBal)
                    .HasColumnName("Reg_CcyBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegCustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Reg_CustCode");

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Reg_Date");

                entity.Property(e => e.RegDocType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_DocType")
                    .IsFixedLength(true);

                entity.Property(e => e.RegExchRate)
                    .HasColumnName("Reg_ExchRate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegFacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Reg_FacilityNo");

                entity.Property(e => e.RegMinus)
                    .HasColumnName("Reg_Minus")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegPlus)
                    .HasColumnName("Reg_Plus")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegRecStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_RecStat")
                    .IsFixedLength(true);

                entity.Property(e => e.RegRefAmt)
                    .HasColumnName("Reg_RefAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RegRefNo)
                    .HasMaxLength(35)
                    .HasColumnName("Reg_RefNo");

                entity.Property(e => e.RegRefNo2)
                    .HasMaxLength(70)
                    .HasColumnName("Reg_RefNo2");

                entity.Property(e => e.RegRefNo3)
                    .HasMaxLength(35)
                    .HasColumnName("Reg_RefNo3");

                entity.Property(e => e.RegRefNo4)
                    .HasMaxLength(35)
                    .HasColumnName("Reg_RefNo4");

                entity.Property(e => e.RegRefType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_RefType")
                    .IsFixedLength(true);

                entity.Property(e => e.RegSeq).HasColumnName("Reg_seq");

                entity.Property(e => e.RegStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_Status")
                    .IsFixedLength(true);

                entity.Property(e => e.RegTenor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reg_Tenor")
                    .IsFixedLength(true);

                entity.Property(e => e.RegTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Reg_Time")
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.TradeRefNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Trade_ref_Number");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOut)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PDombe>(entity =>
            {
                entity.HasKey(e => new { e.Benumber, e.RecType, e.Beseqno });

                entity.ToTable("pDOMBE");

                entity.Property(e => e.Benumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BENumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Beseqno).HasColumnName("BESeqno");

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.AdviceDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AdviceResult)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoOverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Beamount).HasColumnName("BEAmount");

                entity.Property(e => e.Bebalance).HasColumnName("BEBalance");

                entity.Property(e => e.Beccy)
                    .HasMaxLength(3)
                    .HasColumnName("BECcy");

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenInfo).HasMaxLength(144);

                entity.Property(e => e.BeoverDrawn).HasColumnName("BEOverDrawn");

                entity.Property(e => e.BeoverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BEOverDue")
                    .IsFixedLength(true);

                entity.Property(e => e.Bestatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BEStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChkDeduct)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CommDesc).HasMaxLength(200);

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateGenAc).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Discrepancy).HasMaxLength(1000);

                entity.Property(e => e.Dlcamt).HasColumnName("DLCAmt");

                entity.Property(e => e.Dlcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DLCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.FcyreceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCYReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Instruction).HasMaxLength(1000);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.NegoDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PaymentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PendingPayable).HasColumnName("Pending_Payable");

                entity.Property(e => e.PrevDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferBe)
                    .HasMaxLength(20)
                    .HasColumnName("ReferBE");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SwFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(30);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.Trflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PDomlc>(entity =>
            {
                entity.HasKey(e => new { e.Dlcnumber, e.RecType, e.Dlcseqno });

                entity.ToTable("pDOMLC");

                entity.Property(e => e.Dlcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DLCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Dlcseqno).HasColumnName("DLCSeqno");

                entity.Property(e => e.Allocation).HasMaxLength(13);

                entity.Property(e => e.AmendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AmendNo).HasMaxLength(15);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BenCode).HasMaxLength(6);

                entity.Property(e => e.BenInfo).HasMaxLength(300);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CommLcrate).HasColumnName("CommLCRate");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DateIssue).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLateShip).HasColumnType("smalldatetime");

                entity.Property(e => e.DeplusFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPlus_flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Dlcamt).HasColumnName("DLCAmt");

                entity.Property(e => e.DlcavalBal).HasColumnName("DLCAvalBal");

                entity.Property(e => e.Dlcbal).HasColumnName("DLCBal");

                entity.Property(e => e.Dlcccy)
                    .HasMaxLength(3)
                    .HasColumnName("DLCCcy");

                entity.Property(e => e.Dlcmove)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DLCMove")
                    .IsFixedLength(true);

                entity.Property(e => e.Dlcnet).HasColumnName("DLCNet");

                entity.Property(e => e.DlcpostAmt).HasColumnName("DLCPostAmt");

                entity.Property(e => e.DlcrefNo)
                    .HasMaxLength(20)
                    .HasColumnName("DLCRefNo");

                entity.Property(e => e.Dlcstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DLCStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.GoodsDesc).HasMaxLength(2000);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InvoiceInfo).HasMaxLength(2000);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lcdays).HasColumnName("LCDays");

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.NoVary)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PartialShipment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.PrevBenCode).HasMaxLength(6);

                entity.Property(e => e.PrevBenInfo).HasMaxLength(300);

                entity.Property(e => e.PrevDateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevDlcamt).HasColumnName("PrevDLCAmt");

                entity.Property(e => e.PrevDlcavalBal).HasColumnName("PrevDLCAvalBal");

                entity.Property(e => e.PrevDlcbal).HasColumnName("PrevDLCBal");

                entity.Property(e => e.PrevDlcnet).HasColumnName("PrevDLCNet");

                entity.Property(e => e.PrevLcdays).HasColumnName("PrevLCDays");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipmentFrom).HasMaxLength(70);

                entity.Property(e => e.ShipmentTo).HasMaxLength(70);

                entity.Property(e => e.SpecialInfo).HasMaxLength(2000);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(30);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TranShipment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TrappvNo)
                    .HasMaxLength(15)
                    .HasColumnName("TRAppvNo");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PExPastDue>(entity =>
            {
                entity.HasKey(e => new { e.DocNumber, e.RecType, e.EventNo });

                entity.ToTable("pExPastDue");

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppName).HasMaxLength(175);

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CommOther).HasColumnName("CommOTher");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DintBaseDay).HasColumnName("DIntBaseDay");

                entity.Property(e => e.DintRate).HasColumnName("DIntRate");

                entity.Property(e => e.DintRateCode)
                    .HasMaxLength(10)
                    .HasColumnName("DIntRateCode");

                entity.Property(e => e.DintSpread).HasColumnName("DIntSpread");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DueStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.Fmodule)
                    .HasMaxLength(4)
                    .HasColumnName("FModule");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Invoice).HasMaxLength(70);

                entity.Property(e => e.IssBankId)
                    .HasMaxLength(13)
                    .HasColumnName("IssBankID");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Narrative).HasMaxLength(2100);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefLcNo).HasMaxLength(35);

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorType).HasMaxLength(15);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PExPayment>(entity =>
            {
                entity.HasKey(e => new { e.Docnumber, e.EventNo });

                entity.ToTable("pExPayment");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(15)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.AcBahtnet).HasMaxLength(15);

                entity.Property(e => e.AccountNo1)
                    .HasMaxLength(15)
                    .HasColumnName("ACCOUNT_NO1");

                entity.Property(e => e.AccountNo2)
                    .HasMaxLength(15)
                    .HasColumnName("ACCOUNT_NO2");

                entity.Property(e => e.AccountNo3)
                    .HasMaxLength(15)
                    .HasColumnName("ACCOUNT_NO3");

                entity.Property(e => e.AgentAmt).HasColumnName("Agent_amt");

                entity.Property(e => e.AgentPayBy).HasColumnName("AGENT_PAY_BY");

                entity.Property(e => e.AgentRate).HasColumnName("Agent_rate");

                entity.Property(e => e.AgentThb).HasColumnName("Agent_thb");

                entity.Property(e => e.AmtCreditAc1).HasColumnName("AMT_CREDIT_AC1");

                entity.Property(e => e.AmtCreditAc2).HasColumnName("AMT_CREDIT_AC2");

                entity.Property(e => e.AmtCreditAc3).HasColumnName("AMT_CREDIT_AC3");

                entity.Property(e => e.AmtDebitAc1).HasColumnName("AMT_DEBIT_AC1");

                entity.Property(e => e.AmtDebitAc2).HasColumnName("AMT_DEBIT_AC2");

                entity.Property(e => e.AmtDebitAc3).HasColumnName("AMT_DEBIT_AC3");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.Cash).HasColumnName("CASH");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChargeCcy).HasColumnName("Charge_Ccy");

                entity.Property(e => e.ChargeRate).HasColumnName("Charge_Rate");

                entity.Property(e => e.ChargeThb).HasColumnName("Charge_Thb");

                entity.Property(e => e.ChequeAmt).HasColumnName("CHEQUE_AMT");

                entity.Property(e => e.ChequeBkBrn)
                    .HasMaxLength(35)
                    .HasColumnName("CHEQUE_BK_BRN");

                entity.Property(e => e.ChequeNo)
                    .HasMaxLength(35)
                    .HasColumnName("CHEQUE_NO");

                entity.Property(e => e.ComLieu).HasColumnName("Com_Lieu");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.DebitCreditFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Debit_credit_flag")
                    .IsFixedLength(true);

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.FbAmt)
                    .HasColumnName("fb_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbAmtThb)
                    .HasColumnName("fb_amt_thb")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbCcy)
                    .HasMaxLength(3)
                    .HasColumnName("fb_ccy");

                entity.Property(e => e.FbRate)
                    .HasColumnName("fb_rate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FcdAcc).HasMaxLength(15);

                entity.Property(e => e.ForwardConractNo1)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.IntDay).HasColumnName("int_day");

                entity.Property(e => e.IntExchRate).HasColumnName("int_exch_rate");

                entity.Property(e => e.IntPaidAmt).HasColumnName("int_paid_amt");

                entity.Property(e => e.IntPaidRate).HasColumnName("int_paid_rate");

                entity.Property(e => e.IntPaidThb).HasColumnName("int_paid_thb");

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method).HasMaxLength(10);

                entity.Property(e => e.Mtamt).HasColumnName("MTAmt");

                entity.Property(e => e.Mtflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.OverPaidAmt)
                    .HasColumnName("over_paid_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.OverPaidRate).HasColumnName("over_paid_rate");

                entity.Property(e => e.OverPaidThb).HasColumnName("over_paid_thb");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type1")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type2")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type3")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type4")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type5")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type6")
                    .IsFixedLength(true);

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PayType)
                    .HasColumnName("PAY_TYPE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PAYMENT_DATE");

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(10)
                    .HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrnPaidThb).HasColumnName("prn_paid_thb");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceivePayAmt)
                    .HasColumnName("RECEIVE_PAY_AMT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SettlementCredit)
                    .HasColumnName("SETTLEMENT_CREDIT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SightForward)
                    .HasMaxLength(15)
                    .HasColumnName("SIGHT_FORWARD");

                entity.Property(e => e.SightPaidAmt)
                    .HasColumnName("SIGHT_PAID_AMT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SightPaidRate).HasColumnName("SIGHT_PAID_RATE");

                entity.Property(e => e.SightPaidThb)
                    .HasColumnName("SIGHT_PAID_THB")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TermForward)
                    .HasMaxLength(15)
                    .HasColumnName("TERM_FORWARD");

                entity.Property(e => e.TermPaidAmt)
                    .HasColumnName("TERM_PAID_AMT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TermPaidRate).HasColumnName("TERM_PAID_RATE");

                entity.Property(e => e.TermPaidThb)
                    .HasColumnName("TERM_PAID_THB")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotPrincPaid)
                    .HasColumnName("TOT_PRINC_PAID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("Total_Charge");

                entity.Property(e => e.TotalDueToCus).HasColumnName("TOTAL_DUE_TO_CUS");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");
            });

            modelBuilder.Entity<PExad>(entity =>
            {
                entity.HasKey(e => new { e.RecordType, e.RecStatus, e.ExportAdviceNo, e.EventNo });

                entity.ToTable("pExad");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REC_STATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.ExportAdviceNo)
                    .HasMaxLength(15)
                    .HasColumnName("EXPORT_ADVICE_NO");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.AdviceCom).HasColumnName("ADVICE_COM");

                entity.Property(e => e.AdviceMethod)
                    .HasMaxLength(15)
                    .HasColumnName("ADVICE_METHOD");

                entity.Property(e => e.AdviceOther)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AdviseThruAddress)
                    .HasMaxLength(180)
                    .HasColumnName("ADVISE_THRU_ADDRESS");

                entity.Property(e => e.AdviseThruCity)
                    .HasMaxLength(35)
                    .HasColumnName("ADVISE_THRU_CITY");

                entity.Property(e => e.AdviseThruCountryCode)
                    .HasMaxLength(2)
                    .HasColumnName("ADVISE_THRU_COUNTRY_CODE");

                entity.Property(e => e.AdviseThruThruBkId)
                    .HasMaxLength(13)
                    .HasColumnName("ADVISE_THRU_THRU_BK_ID");

                entity.Property(e => e.AdviseThruThruBkName)
                    .HasMaxLength(35)
                    .HasColumnName("ADVISE_THRU_THRU_BK_NAME");

                entity.Property(e => e.AdvisingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADVISING_DATE");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(10)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.AmendCom).HasColumnName("AMEND_COM");

                entity.Property(e => e.AmendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AMEND_DATE");

                entity.Property(e => e.AmendNo).HasColumnName("AMEND_NO");

                entity.Property(e => e.AmendtrnCom).HasColumnName("AMENDTRN_COM");

                entity.Property(e => e.ApplicantAddress)
                    .HasMaxLength(105)
                    .HasColumnName("APPLICANT_ADDRESS");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(75)
                    .HasColumnName("APPLICANT_NAME");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(12)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.AutoOverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BeneficiaryId)
                    .HasMaxLength(13)
                    .HasColumnName("BENEFICIARY_ID");

                entity.Property(e => e.BeneficiaryInfo)
                    .HasMaxLength(180)
                    .HasColumnName("BENEFICIARY_INFO");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(4)
                    .HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CableCom).HasColumnName("CABLE_COM");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChargeFor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_FOR")
                    .IsFixedLength(true);

                entity.Property(e => e.ChargeForId)
                    .HasMaxLength(13)
                    .HasColumnName("CHARGE_FOR_ID");

                entity.Property(e => e.ChargeForInfo)
                    .HasMaxLength(180)
                    .HasColumnName("CHARGE_FOR_INFO");

                entity.Property(e => e.ClaimAdvCom).HasColumnName("CLAIM_ADV_COM");

                entity.Property(e => e.ClaimAmendCom).HasColumnName("CLAIM_AMEND_COM");

                entity.Property(e => e.ClaimCableCharge).HasColumnName("CLAIM_CABLE_CHARGE");

                entity.Property(e => e.ClaimCcy)
                    .HasMaxLength(3)
                    .HasColumnName("CLAIM_CCY");

                entity.Property(e => e.ClaimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLAIM_DATE");

                entity.Property(e => e.ClaimDate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ClaimDate");

                entity.Property(e => e.ClaimDutyStamp).HasColumnName("CLAIM_DUTY_STAMP");

                entity.Property(e => e.ClaimOtherCharge).HasColumnName("CLAIM_OTHER_CHARGE");

                entity.Property(e => e.ClaimRecTpye)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLAIM_REC_TPYE")
                    .IsFixedLength(true);

                entity.Property(e => e.CollectType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COLLECT_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.ConfirmCom).HasColumnName("CONFIRM_COM");

                entity.Property(e => e.ConfirmFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConfirmRefer).HasMaxLength(15);

                entity.Property(e => e.ConfirmType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Confirmation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONFIRMATION")
                    .IsFixedLength(true);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(35)
                    .HasColumnName("COUNTRY_NAME");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DecreaseAmt).HasColumnName("DECREASE_AMT");

                entity.Property(e => e.Description).HasMaxLength(35);

                entity.Property(e => e.DraftAt)
                    .HasMaxLength(35)
                    .HasColumnName("DRAFT_AT");

                entity.Property(e => e.DraftTernorDay).HasColumnName("DRAFT_TERNOR_DAY");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventType)
                    .HasMaxLength(30)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.FlagTransfer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_TRANSFER")
                    .IsFixedLength(true);

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENACC_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_USE")
                    .IsFixedLength(true);

                entity.Property(e => e.IncreaseAmt).HasColumnName("INCREASE_AMT");

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IssueBankCity)
                    .HasMaxLength(35)
                    .HasColumnName("ISSUE_BANK_CITY");

                entity.Property(e => e.IssueBankId)
                    .HasMaxLength(13)
                    .HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankName)
                    .HasMaxLength(140)
                    .HasColumnName("ISSUE_BANK_NAME");

                entity.Property(e => e.IssueCcyamt).HasColumnName("ISSUE_CCYAMT");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LcAmount).HasColumnName("LC_AMOUNT");

                entity.Property(e => e.LcBalAmt).HasColumnName("LC_BAL_AMT");

                entity.Property(e => e.LcBalCcy)
                    .HasMaxLength(3)
                    .HasColumnName("LC_BAL_CCY");

                entity.Property(e => e.LcCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("LC_CURRENCY");

                entity.Property(e => e.LcIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LC_ISSUE_DATE");

                entity.Property(e => e.LcNo)
                    .HasMaxLength(35)
                    .HasColumnName("LC_NO");

                entity.Property(e => e.LcType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LC_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Nostro)
                    .HasMaxLength(19)
                    .HasColumnName("NOSTRO");

                entity.Property(e => e.NostroBank).HasMaxLength(14);

                entity.Property(e => e.OtherCharge).HasColumnName("OTHER_CHARGE");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayRecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAY_REC_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.PayRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAY_REFUND")
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_INSTRU")
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlaceOfExpiry)
                    .HasMaxLength(35)
                    .HasColumnName("PLACE_OF_EXPIRY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.PrevExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("PREV_EXPIRY");

                entity.Property(e => e.ReasonOfCancel)
                    .HasMaxLength(140)
                    .HasColumnName("REASON_OF_CANCEL");

                entity.Property(e => e.RecAdvCom).HasColumnName("REC_ADV_COM");

                entity.Property(e => e.RecAmendCom).HasColumnName("REC_AMEND_COM");

                entity.Property(e => e.RecCableCharge).HasColumnName("REC_CABLE_CHARGE");

                entity.Property(e => e.RecDutyStamp).HasColumnName("REC_DUTY_STAMP");

                entity.Property(e => e.RecOtherCharge).HasColumnName("REC_OTHER_CHARGE");

                entity.Property(e => e.ReceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("RECEIPT_NO");

                entity.Property(e => e.RefundTax).HasColumnName("REFUND_TAX");

                entity.Property(e => e.ReimBkId)
                    .HasMaxLength(13)
                    .HasColumnName("REIM_BK_ID");

                entity.Property(e => e.ReimBkName)
                    .HasMaxLength(35)
                    .HasColumnName("REIM_BK_NAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(140)
                    .HasColumnName("REMARK");

                entity.Property(e => e.SendingBankId)
                    .HasMaxLength(13)
                    .HasColumnName("SENDING_BANK_ID");

                entity.Property(e => e.SendingBankInfo)
                    .HasMaxLength(180)
                    .HasColumnName("SENDING_BANK_INFO");

                entity.Property(e => e.SendingBankRef)
                    .HasMaxLength(35)
                    .HasColumnName("SENDING_BANK_REF");

                entity.Property(e => e.ShipmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIPMENT_DATE");

                entity.Property(e => e.SubStationDoc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("subStation_doc");

                entity.Property(e => e.SwifInId)
                    .HasMaxLength(50)
                    .HasColumnName("SwifInID");

                entity.Property(e => e.SwiftMt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SwiftMT")
                    .IsFixedLength(true);

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDes)
                    .HasMaxLength(35)
                    .HasColumnName("TENOR_DES");

                entity.Property(e => e.TenorType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TENOR_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.Tranflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.TransferAmount).HasColumnName("TRANSFER_AMOUNT");

                entity.Property(e => e.TransferAmtCancel).HasColumnName("TRANSFER_AMT_CANCEL");

                entity.Property(e => e.TransferCom).HasColumnName("TRANSFER_COM");

                entity.Property(e => e.TransferComRate).HasColumnName("TRANSFER_COM_RATE");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER_DATE");

                entity.Property(e => e.TransferExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER_EXPIRY_DATE");

                entity.Property(e => e.TransferId)
                    .HasMaxLength(13)
                    .HasColumnName("TRANSFER_ID");

                entity.Property(e => e.TransferInfo)
                    .HasMaxLength(180)
                    .HasColumnName("TRANSFER_INFO");

                entity.Property(e => e.TransferRate).HasColumnName("TRANSFER_RATE");

                entity.Property(e => e.TransferShipmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER_SHIPMENT_DATE");

                entity.Property(e => e.TypeOfChargeTransfer)
                    .HasMaxLength(15)
                    .HasColumnName("TYPE_OF_CHARGE_TRANSFER");

                entity.Property(e => e.UnadviceCom).HasColumnName("UNADVICE_COM");

                entity.Property(e => e.UnamendCom).HasColumnName("UNAMEND_COM");

                entity.Property(e => e.UnamendtrnCom).HasColumnName("UNAMENDTRN_COM");

                entity.Property(e => e.UncableCom).HasColumnName("UNCABLE_COM");

                entity.Property(e => e.UnconfirmCom).HasColumnName("UNCONFIRM_COM");

                entity.Property(e => e.UnotherCharge).HasColumnName("UNOTHER_CHARGE");

                entity.Property(e => e.Unpostage).HasColumnName("UNPOSTAGE");

                entity.Property(e => e.UntransferCom).HasColumnName("UNTRANSFER_COM");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(35)
                    .HasColumnName("VOUCH_ID");
            });

            modelBuilder.Entity<PExadSwin>(entity =>
            {
                entity.HasKey(e => e.SwifInId);

                entity.ToTable("pExadSWIn");

                entity.Property(e => e.SwifInId)
                    .HasMaxLength(50)
                    .HasColumnName("SwifInID");

                entity.Property(e => e.AdviseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Appicant).HasMaxLength(150);

                entity.Property(e => e.BenName).HasMaxLength(150);

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpiryPlace).HasMaxLength(50);

                entity.Property(e => e.GoodsDesc).HasMaxLength(60);

                entity.Property(e => e.IssueBank).HasMaxLength(14);

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssueName).HasMaxLength(148);

                entity.Property(e => e.Lcamt).HasColumnName("LCAmt");

                entity.Property(e => e.Lcccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LCCcy")
                    .IsFixedLength(true);

                entity.Property(e => e.Lcflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Lcno)
                    .HasMaxLength(20)
                    .HasColumnName("LCNo");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MTType")
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PExbc>(entity =>
            {
                entity.HasKey(e => new { e.RecordType, e.RecStatus, e.EventNo, e.ExportBcNo });

                entity.ToTable("pExbc");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.ExportBcNo)
                    .HasMaxLength(15)
                    .HasColumnName("EXPORT_BC_NO");

                entity.Property(e => e.Acbahtnet)
                    .HasMaxLength(15)
                    .HasColumnName("ACBAHTNET");

                entity.Property(e => e.Accruamt).HasColumnName("ACCRUAMT");

                entity.Property(e => e.Accrubht).HasColumnName("ACCRUBHT");

                entity.Property(e => e.AdjLessChargeAmt).HasColumnName("ADJ_LESS_CHARGE_AMT");

                entity.Property(e => e.AdjTotNegoAmount).HasColumnName("ADJ_TOT_NEGO_AMOUNT");

                entity.Property(e => e.AdjustCoveringAmt).HasColumnName("ADJUST_COVERING_AMT");

                entity.Property(e => e.AdjustLcRef)
                    .HasMaxLength(50)
                    .HasColumnName("ADJUST_LC_REF");

                entity.Property(e => e.AdjustTenor)
                    .HasMaxLength(50)
                    .HasColumnName("ADJUST_TENOR");

                entity.Property(e => e.AdviceFormat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADVICE_FORMAT")
                    .IsFixedLength(true);

                entity.Property(e => e.AdviceIssueBank)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADVICE_ISSUE_BANK")
                    .IsFixedLength(true);

                entity.Property(e => e.AgentBankId)
                    .HasMaxLength(13)
                    .HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("AGENT_BANK_INFO");

                entity.Property(e => e.AgentBankNostro)
                    .HasMaxLength(25)
                    .HasColumnName("AGENT_BANK_NOSTRO");

                entity.Property(e => e.AgentBankRef)
                    .HasMaxLength(35)
                    .HasColumnName("AGENT_BANK_REF");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(15)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.Appvno)
                    .HasMaxLength(15)
                    .HasColumnName("APPVNO");

                entity.Property(e => e.Art44a).HasColumnName("ART44A");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(12)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.Autooverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTOOVERDUE")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Bahtnet).HasColumnName("BAHTNET");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BcpastDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BCPastDue")
                    .IsFixedLength(true);

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId)
                    .HasMaxLength(13)
                    .HasColumnName("BENE_ID");

                entity.Property(e => e.BeneInfo)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("BENE_INFO")
                    .IsFixedLength(true);

                entity.Property(e => e.Bfintamt).HasColumnName("BFINTAMT");

                entity.Property(e => e.Bfintthb).HasColumnName("BFINTTHB");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(4)
                    .HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(20)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChargeAcc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_ACC")
                    .IsFixedLength(true);

                entity.Property(e => e.ClaimFormat)
                    .HasMaxLength(5)
                    .HasColumnName("CLAIM_FORMAT");

                entity.Property(e => e.ClaimPayBy).HasColumnName("CLAIM_PAY_BY");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("CNTY_CODE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COLLECT_REFUND")
                    .IsFixedLength(true);

                entity.Property(e => e.ComfirmDue)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COMFIRM_DUE");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.Commontt).HasColumnName("COMMONTT");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CONFIRM_DATE");

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CoveringDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COVERING_DATE");

                entity.Property(e => e.CoveringFor)
                    .HasMaxLength(50)
                    .HasColumnName("COVERING_FOR");

                entity.Property(e => e.CreditCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("CREDIT_CURRENCY");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustLo)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_LO");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Datelastaccru)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DATELASTACCRU");

                entity.Property(e => e.DiscBaseDay).HasColumnName("DISC_BASE_DAY");

                entity.Property(e => e.DiscDaysPlusMinus).HasColumnName("DISC_DAYS_PLUS_MINUS");

                entity.Property(e => e.DiscReceive).HasColumnName("DISC_RECEIVE");

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("DISCOUNT_DAY");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.DiscrepancyType)
                    .HasMaxLength(10)
                    .HasColumnName("DISCREPANCY_TYPE");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocumentCopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_COPY")
                    .IsFixedLength(true);

                entity.Property(e => e.Draft)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DRAFT")
                    .IsFixedLength(true);

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.DraweeInfo)
                    .HasMaxLength(175)
                    .HasColumnName("DRAWEE_INFO");

                entity.Property(e => e.Endorsed).HasColumnName("ENDORSED");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchangeRate).HasColumnName("EXCHANGE_RATE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(13)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FbAmt)
                    .HasColumnName("FB_AMT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbAmtThb)
                    .HasColumnName("FB_AMT_THB")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("FB_CURRENCY");

                entity.Property(e => e.FbRate)
                    .HasColumnName("FB_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FlagBack)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ForwardConractNo)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO");

                entity.Property(e => e.ForwardConractNo1)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENACC_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(4)
                    .HasColumnName("GOOD_CODE");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.IntAmtThb).HasColumnName("INT_AMT_THB");

                entity.Property(e => e.IntBaseRate).HasColumnName("INT_BASE_RATE");

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntRateMethod).HasColumnName("INT_RATE_METHOD");

                entity.Property(e => e.IntSpreadRate).HasColumnName("INT_SPREAD_RATE");

                entity.Property(e => e.Intbalance).HasColumnName("INTBALANCE");

                entity.Property(e => e.Intcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INTCODE")
                    .IsFixedLength(true);

                entity.Property(e => e.Intflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Invoice)
                    .HasMaxLength(70)
                    .HasColumnName("INVOICE");

                entity.Property(e => e.IssueBankId)
                    .HasMaxLength(13)
                    .HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("ISSUE_BANK_INFO");

                entity.Property(e => e.Lastintamt).HasColumnName("LASTINTAMT");

                entity.Property(e => e.Lastintdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LASTINTDATE");

                entity.Property(e => e.LcDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LC_DATE");

                entity.Property(e => e.Lcoverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCOVERDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt750).HasColumnName("MT750");

                entity.Property(e => e.Narrative)
                    .HasMaxLength(2100)
                    .HasColumnName("NARRATIVE");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.Oveseqno).HasColumnName("OVESEQNO");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type1")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type2")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type3")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type4")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type5")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type6")
                    .IsFixedLength(true);

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.Pastduedate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PASTDUEDATE");

                entity.Property(e => e.Pastdueflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASTDUEFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PaymentInstrc)
                    .HasMaxLength(1000)
                    .HasColumnName("PAYMENT_INSTRC");

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(10)
                    .HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.Paymenttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENTTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.PlusMinusDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PLUS_MINUS_DISC")
                    .IsFixedLength(true);

                entity.Property(e => e.Prnbalance).HasColumnName("PRNBALANCE");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(15)
                    .HasColumnName("RECEIVED_NO");

                entity.Property(e => e.ReferBcNo)
                    .HasMaxLength(15)
                    .HasColumnName("REFER_BC_NO");

                entity.Property(e => e.RefundDiscReceive).HasColumnName("REFUND_DISC_RECEIVE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.ReimburseBankId)
                    .HasMaxLength(13)
                    .HasColumnName("REIMBURSE_BANK_ID");

                entity.Property(e => e.ReimburseBankInfo)
                    .HasMaxLength(140)
                    .HasColumnName("REIMBURSE_BANK_INFO");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("REL_CODE");

                entity.Property(e => e.ReletePack)
                    .HasMaxLength(15)
                    .HasColumnName("RELETE_PACK");

                entity.Property(e => e.RemitClaimType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REMIT_CLAIM_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Restrict).HasColumnName("RESTRICT");

                entity.Property(e => e.RestrictFrBkAddr1)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR1");

                entity.Property(e => e.RestrictFrBkAddr2)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR2");

                entity.Property(e => e.RestrictFrBkAddr3)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR3");

                entity.Property(e => e.RestrictFrBkName)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_NAME");

                entity.Property(e => e.RestrictRefer)
                    .HasMaxLength(50)
                    .HasColumnName("RESTRICT_REFER");

                entity.Property(e => e.RestrictToBkAddr1)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR1");

                entity.Property(e => e.RestrictToBkAddr2)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR2");

                entity.Property(e => e.RestrictToBkAddr3)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR3");

                entity.Property(e => e.RestrictToBkName)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_NAME");

                entity.Property(e => e.SellingRate).HasColumnName("SELLING_RATE");

                entity.Property(e => e.SeqAcceptDue).HasColumnName("SEQ_ACCEPT_DUE");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightBasis).HasColumnName("SIGHT_BASIS");

                entity.Property(e => e.SightDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIGHT_DUE_DATE");

                entity.Property(e => e.SightStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIGHT_START_DATE");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.Suspamt).HasColumnName("SUSPAMT");

                entity.Property(e => e.Suspbht).HasColumnName("SUSPBHT");

                entity.Property(e => e.SwiftBank)
                    .HasMaxLength(5)
                    .HasColumnName("SWIFT_BANK");

                entity.Property(e => e.SwiftDisc)
                    .HasMaxLength(800)
                    .HasColumnName("SWIFT_DISC");

                entity.Property(e => e.SwiftMail)
                    .HasMaxLength(500)
                    .HasColumnName("SWIFT_MAIL");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDayDesc)
                    .HasMaxLength(50)
                    .HasColumnName("TENOR_DAY_DESC");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.TermStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_START_DATE");

                entity.Property(e => e.ThirdBankId)
                    .HasMaxLength(13)
                    .HasColumnName("THIRD_BANK_ID");

                entity.Property(e => e.ThirdBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("THIRD_BANK_INFO");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");

                entity.Property(e => e.Totalaccruamt).HasColumnName("TOTALACCRUAMT");

                entity.Property(e => e.Totalaccrubht).HasColumnName("TOTALACCRUBHT");

                entity.Property(e => e.Totalsuspamt).HasColumnName("TOTALSUSPAMT");

                entity.Property(e => e.Totalsuspbht).HasColumnName("TOTALSUSPBHT");

                entity.Property(e => e.Txtdocument)
                    .HasMaxLength(1000)
                    .HasColumnName("TXTDOCUMENT");

                entity.Property(e => e.TypeOfAccount).HasColumnName("TYPE_OF_ACCOUNT");

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ValueDate");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(50)
                    .HasColumnName("VOUCH_ID");
            });

            modelBuilder.Entity<PExchange>(entity =>
            {
                entity.HasKey(e => new { e.ExchDate, e.ExchTime, e.ExchCcy });

                entity.ToTable("pExchange");

                entity.Property(e => e.ExchDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Exch_Date");

                entity.Property(e => e.ExchTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Exch_Time")
                    .IsFixedLength(true);

                entity.Property(e => e.ExchCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Exch_Ccy");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.ExchAverage).HasColumnName("Exch_Average");

                entity.Property(e => e.ExchBnbuy)
                    .HasColumnName("Exch_BNBuy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchBnsell)
                    .HasColumnName("Exch_BNSell")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchSeqno).HasColumnName("Exch_Seqno");

                entity.Property(e => e.ExchTrate1)
                    .HasColumnName("Exch_TRate1")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchTrate2)
                    .HasColumnName("Exch_TRate2")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchTrate3)
                    .HasColumnName("Exch_TRate3")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PExdoc>(entity =>
            {
                entity.HasKey(e => new { e.ExlcNo, e.Seqno, e.EventNo });

                entity.ToTable("pExdoc");

                entity.Property(e => e.ExlcNo)
                    .HasMaxLength(15)
                    .HasColumnName("EXLC_NO");

                entity.Property(e => e.Seqno).HasColumnName("SEQNO");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(25)
                    .HasColumnName("DOCUMENT_ID");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(50)
                    .HasColumnName("DOCUMENT_NAME");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.FmailNo)
                    .HasMaxLength(20)
                    .HasColumnName("FMail_No");

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE_TYPE");

                entity.Property(e => e.SmailNo)
                    .HasMaxLength(20)
                    .HasColumnName("SMail_No");
            });

            modelBuilder.Entity<PExinterest>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.Event, e.DocNo, e.EventNo, e.Seqno });

                entity.ToTable("pEXInterest");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.IntCode).HasMaxLength(10);

                entity.Property(e => e.IntFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.IntTo).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PExlc>(entity =>
            {
                entity.HasKey(e => new { e.RecordType, e.RecStatus, e.EventNo, e.ExportLcNo });

                entity.ToTable("pExlc");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.ExportLcNo)
                    .HasMaxLength(15)
                    .HasColumnName("EXPORT_LC_NO");

                entity.Property(e => e.Acbahtnet)
                    .HasMaxLength(15)
                    .HasColumnName("ACBAHTNET");

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Accruamt).HasColumnName("ACCRUAMT");

                entity.Property(e => e.Accrubht).HasColumnName("ACCRUBHT");

                entity.Property(e => e.AdjLessChargeAmt).HasColumnName("ADJ_LESS_CHARGE_AMT");

                entity.Property(e => e.AdjTotNegoAmount).HasColumnName("ADJ_TOT_NEGO_AMOUNT");

                entity.Property(e => e.AdjustCoveringAmt).HasColumnName("ADJUST_COVERING_AMT");

                entity.Property(e => e.AdjustLcRef)
                    .HasMaxLength(50)
                    .HasColumnName("ADJUST_LC_REF");

                entity.Property(e => e.AdjustTenor)
                    .HasMaxLength(50)
                    .HasColumnName("ADJUST_TENOR");

                entity.Property(e => e.AdviceFormat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADVICE_FORMAT")
                    .IsFixedLength(true);

                entity.Property(e => e.AdviceIssueBank)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADVICE_ISSUE_BANK")
                    .IsFixedLength(true);

                entity.Property(e => e.AgentBankId)
                    .HasMaxLength(13)
                    .HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("AGENT_BANK_INFO");

                entity.Property(e => e.AgentBankNostro)
                    .HasMaxLength(25)
                    .HasColumnName("AGENT_BANK_NOSTRO");

                entity.Property(e => e.AgentBankRef)
                    .HasMaxLength(35)
                    .HasColumnName("AGENT_BANK_REF");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(15)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.ApplicantInfo)
                    .HasMaxLength(240)
                    .HasColumnName("applicant_info");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(70)
                    .HasColumnName("APPLICANT_NAME");

                entity.Property(e => e.Appvno)
                    .HasMaxLength(15)
                    .HasColumnName("APPVNO");

                entity.Property(e => e.Art44a).HasColumnName("ART44A");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(12)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.Autooverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTOOVERDUE")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Bahtnet).HasColumnName("BAHTNET");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId)
                    .HasMaxLength(13)
                    .HasColumnName("BENE_ID");

                entity.Property(e => e.BeneInfo)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("BENE_INFO")
                    .IsFixedLength(true);

                entity.Property(e => e.Bfintamt).HasColumnName("BFINTAMT");

                entity.Property(e => e.Bfintthb).HasColumnName("BFINTTHB");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(4)
                    .HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(20)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChargeAcc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_ACC")
                    .IsFixedLength(true);

                entity.Property(e => e.ClaimFormat)
                    .HasMaxLength(5)
                    .HasColumnName("CLAIM_FORMAT");

                entity.Property(e => e.ClaimPayBy).HasColumnName("CLAIM_PAY_BY");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("CNTY_CODE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COLLECT_REFUND")
                    .IsFixedLength(true);

                entity.Property(e => e.ComLieu).HasColumnName("Com_Lieu");

                entity.Property(e => e.ComfirmDue)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COMFIRM_DUE");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.Commontt).HasColumnName("COMMONTT");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CONFIRM_DATE");

                entity.Property(e => e.ConfirmFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CoveringDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COVERING_DATE");

                entity.Property(e => e.CoveringFor)
                    .HasMaxLength(50)
                    .HasColumnName("COVERING_FOR");

                entity.Property(e => e.CreditCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("CREDIT_CURRENCY");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustLo)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_LO");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Datelastaccru)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DATELASTACCRU");

                entity.Property(e => e.DiscBaseDay).HasColumnName("DISC_BASE_DAY");

                entity.Property(e => e.DiscDaysPlusMinus).HasColumnName("DISC_DAYS_PLUS_MINUS");

                entity.Property(e => e.DiscReceive).HasColumnName("DISC_RECEIVE");

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("DISCOUNT_DAY");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.DiscrepancyType)
                    .HasMaxLength(10)
                    .HasColumnName("DISCREPANCY_TYPE");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocumentCopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_COPY")
                    .IsFixedLength(true);

                entity.Property(e => e.Draft)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DRAFT")
                    .IsFixedLength(true);

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.Endorsed).HasColumnName("ENDORSED");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchangeRate).HasColumnName("EXCHANGE_RATE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(13)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FbAmt)
                    .HasColumnName("FB_AMT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbAmtThb)
                    .HasColumnName("FB_AMT_THB")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FbCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("FB_CURRENCY");

                entity.Property(e => e.FbRate)
                    .HasColumnName("FB_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FlagBack)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ForwardConractNo)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO");

                entity.Property(e => e.ForwardConractNo1)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENACC_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(4)
                    .HasColumnName("GOOD_CODE");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.IntAmtCcy).HasColumnName("INT_AMT_CCY");

                entity.Property(e => e.IntAmtRate).HasColumnName("INT_AMT_RATE");

                entity.Property(e => e.IntAmtThb).HasColumnName("INT_AMT_THB");

                entity.Property(e => e.IntBaseRate).HasColumnName("INT_BASE_RATE");

                entity.Property(e => e.IntPaidAmt).HasColumnName("INT_PAID_AMT");

                entity.Property(e => e.IntPaidRate).HasColumnName("INT_PAID_RATE");

                entity.Property(e => e.IntPaidThb).HasColumnName("INT_PAID_THB");

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntRateMethod).HasColumnName("INT_RATE_METHOD");

                entity.Property(e => e.IntSpreadRate).HasColumnName("INT_SPREAD_RATE");

                entity.Property(e => e.Intbalance).HasColumnName("INTBALANCE");

                entity.Property(e => e.Intcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INTCODE")
                    .IsFixedLength(true);

                entity.Property(e => e.Intflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Invoice)
                    .HasMaxLength(70)
                    .HasColumnName("INVOICE");

                entity.Property(e => e.IssueBankId)
                    .HasMaxLength(13)
                    .HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("ISSUE_BANK_INFO");

                entity.Property(e => e.Lastintamt).HasColumnName("LASTINTAMT");

                entity.Property(e => e.Lastintdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LASTINTDATE");

                entity.Property(e => e.LcDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LC_DATE");

                entity.Property(e => e.LcRefNo)
                    .HasMaxLength(35)
                    .HasColumnName("LC_REF_NO");

                entity.Property(e => e.Lcoverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCOVERDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.LcpastDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCPastDue")
                    .IsFixedLength(true);

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt750).HasColumnName("MT750");

                entity.Property(e => e.Narrative)
                    .HasMaxLength(2100)
                    .HasColumnName("NARRATIVE");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.Oveseqno).HasColumnName("OVESEQNO");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type1")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type2")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type3")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type4")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type5")
                    .IsFixedLength(true);

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ParTnor_Type6")
                    .IsFixedLength(true);

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.Pastduedate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PASTDUEDATE");

                entity.Property(e => e.Pastdueflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PASTDUEFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PaymentInstrc)
                    .HasMaxLength(1000)
                    .HasColumnName("PAYMENT_INSTRC");

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(10)
                    .HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.Paymenttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENTTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.PendingPayable).HasColumnName("Pending_Payable");

                entity.Property(e => e.PlusMinusDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PLUS_MINUS_DISC")
                    .IsFixedLength(true);

                entity.Property(e => e.Prnbalance).HasColumnName("PRNBALANCE");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(15)
                    .HasColumnName("RECEIVED_NO");

                entity.Property(e => e.ReferLcNo)
                    .HasMaxLength(15)
                    .HasColumnName("REFER_LC_NO");

                entity.Property(e => e.RefundDiscReceive).HasColumnName("REFUND_DISC_RECEIVE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.ReimburseBankId)
                    .HasMaxLength(13)
                    .HasColumnName("REIMBURSE_BANK_ID");

                entity.Property(e => e.ReimburseBankInfo)
                    .HasMaxLength(140)
                    .HasColumnName("REIMBURSE_BANK_INFO");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("REL_CODE");

                entity.Property(e => e.ReleteConfirm)
                    .HasMaxLength(15)
                    .HasColumnName("RELETE_CONFIRM");

                entity.Property(e => e.ReletePack)
                    .HasMaxLength(15)
                    .HasColumnName("RELETE_PACK");

                entity.Property(e => e.RemitClaimType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REMIT_CLAIM_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Restrict).HasColumnName("RESTRICT");

                entity.Property(e => e.RestrictFrBkAddr1)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR1");

                entity.Property(e => e.RestrictFrBkAddr2)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR2");

                entity.Property(e => e.RestrictFrBkAddr3)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_ADDR3");

                entity.Property(e => e.RestrictFrBkName)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_FR_BK_NAME");

                entity.Property(e => e.RestrictRefer)
                    .HasMaxLength(50)
                    .HasColumnName("RESTRICT_REFER");

                entity.Property(e => e.RestrictToBkAddr1)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR1");

                entity.Property(e => e.RestrictToBkAddr2)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR2");

                entity.Property(e => e.RestrictToBkAddr3)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_ADDR3");

                entity.Property(e => e.RestrictToBkName)
                    .HasMaxLength(35)
                    .HasColumnName("RESTRICT_TO_BK_NAME");

                entity.Property(e => e.SellingRate).HasColumnName("SELLING_RATE");

                entity.Property(e => e.SeqAcceptDue).HasColumnName("SEQ_ACCEPT_DUE");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightBasis).HasColumnName("SIGHT_BASIS");

                entity.Property(e => e.SightDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIGHT_DUE_DATE");

                entity.Property(e => e.SightStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIGHT_START_DATE");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.Suspamt).HasColumnName("SUSPAMT");

                entity.Property(e => e.Suspbht).HasColumnName("SUSPBHT");

                entity.Property(e => e.SwiftBank)
                    .HasMaxLength(5)
                    .HasColumnName("SWIFT_BANK");

                entity.Property(e => e.SwiftDisc)
                    .HasMaxLength(800)
                    .HasColumnName("SWIFT_DISC");

                entity.Property(e => e.SwiftMail)
                    .HasMaxLength(500)
                    .HasColumnName("SWIFT_MAIL");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDayDesc)
                    .HasMaxLength(50)
                    .HasColumnName("TENOR_DAY_DESC");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.TermStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_START_DATE");

                entity.Property(e => e.ThirdBankId)
                    .HasMaxLength(13)
                    .HasColumnName("THIRD_BANK_ID");

                entity.Property(e => e.ThirdBankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("THIRD_BANK_INFO");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");

                entity.Property(e => e.Totalaccruamt).HasColumnName("TOTALACCRUAMT");

                entity.Property(e => e.Totalaccrubht).HasColumnName("TOTALACCRUBHT");

                entity.Property(e => e.Totalsuspamt).HasColumnName("TOTALSUSPAMT");

                entity.Property(e => e.Totalsuspbht).HasColumnName("TOTALSUSPBHT");

                entity.Property(e => e.Txtdocument)
                    .HasMaxLength(1000)
                    .HasColumnName("TXTDOCUMENT");

                entity.Property(e => e.TypeOfAccount).HasColumnName("TYPE_OF_ACCOUNT");

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ValueDate");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(50)
                    .HasColumnName("VOUCH_ID");

                entity.Property(e => e.WithOut)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Wofund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WOFUND")
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<PExpc>(entity =>
            {
                entity.HasKey(e => new { e.PackingNo, e.RecordType, e.EventNo });

                entity.ToTable("pExpc");

                entity.Property(e => e.PackingNo)
                    .HasMaxLength(15)
                    .HasColumnName("PACKING_NO");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("record_type");

                entity.Property(e => e.EventNo).HasColumnName("event_no");

                entity.Property(e => e.AcBahtnet).HasMaxLength(15);

                entity.Property(e => e.Allocation)
                    .HasMaxLength(15)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.AmendNo).HasColumnName("Amend_no");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(70)
                    .HasColumnName("applicant_name");

                entity.Property(e => e.ApproveBorad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(12)
                    .HasColumnName("auth_code");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("auth_date");

                entity.Property(e => e.AutoOverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(4)
                    .HasColumnName("business_type");

                entity.Property(e => e.CalIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(20)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(2)
                    .HasColumnName("cnty_code");

                entity.Property(e => e.ComLieu).HasColumnName("Com_Lieu");

                entity.Property(e => e.CommCerti).HasColumnName("Comm_Certi");

                entity.Property(e => e.CommOnTt).HasColumnName("comm_OnTT");

                entity.Property(e => e.CommOther).HasColumnName("comm_other");

                entity.Property(e => e.ContraBal).HasColumnName("contra_bal");

                entity.Property(e => e.ContraDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("contra_date");

                entity.Property(e => e.Current60Daydue)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("current_60_daydue");

                entity.Property(e => e.CurrentIntrate).HasColumnName("current_intrate");

                entity.Property(e => e.CurrentPcDue)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("current_pc_due");

                entity.Property(e => e.CustId)
                    .HasMaxLength(13)
                    .HasColumnName("cust_id");

                entity.Property(e => e.CustInfo)
                    .HasMaxLength(170)
                    .HasColumnName("cust_info");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DeductExportThb).HasColumnName("deduct_export_thb");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocAmount).HasColumnName("doc_amount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(3)
                    .HasColumnName("doc_ccy");

                entity.Property(e => e.DocExpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("doc_expiry_date");

                entity.Property(e => e.DueNo).HasColumnName("Due_no");

                entity.Property(e => e.DutyStamp).HasColumnName("duty_stamp");

                entity.Property(e => e.EventDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("event_date");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .HasColumnName("event_mode");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("event_type");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExchRate1).HasColumnName("exch_rate1");

                entity.Property(e => e.ExchRate2).HasColumnName("exch_rate2");

                entity.Property(e => e.ExchRate3).HasColumnName("exch_rate3");

                entity.Property(e => e.ExchRate4).HasColumnName("exch_rate4");

                entity.Property(e => e.ExchRate5).HasColumnName("exch_rate5");

                entity.Property(e => e.ExchRate6).HasColumnName("exch_rate6");

                entity.Property(e => e.ExchRate7).HasColumnName("exch_rate7");

                entity.Property(e => e.ExchRate8).HasColumnName("exch_rate8");

                entity.Property(e => e.ExchRate9).HasColumnName("exch_rate9");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FcdAcc).HasMaxLength(15);

                entity.Property(e => e.FixDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FlagAmend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagBack)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagSettle)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ForwardContract1)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract1");

                entity.Property(e => e.ForwardContract2)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract2");

                entity.Property(e => e.ForwardContract3)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract3");

                entity.Property(e => e.ForwardContract4)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract4");

                entity.Property(e => e.ForwardContract5)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract5");

                entity.Property(e => e.ForwardContract6)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract6");

                entity.Property(e => e.ForwardContract7)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract7");

                entity.Property(e => e.ForwardContract8)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract8");

                entity.Property(e => e.ForwardContract9)
                    .HasMaxLength(20)
                    .HasColumnName("forward_contract9");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("genacc_date");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("genacc_flag")
                    .IsFixedLength(true);

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(3)
                    .HasColumnName("good_code");

                entity.Property(e => e.GoodDesc)
                    .HasMaxLength(200)
                    .HasColumnName("good_desc");

                entity.Property(e => e.HandlingFee).HasColumnName("handling_Fee");

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("in_Use")
                    .IsFixedLength(true);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.InterestCcy1).HasColumnName("interest_ccy1");

                entity.Property(e => e.InterestCcy2).HasColumnName("interest_ccy2");

                entity.Property(e => e.InterestThb1).HasColumnName("interest_thb1");

                entity.Property(e => e.InterestThb2).HasColumnName("interest_thb2");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .HasColumnName("method");

                entity.Property(e => e.NewPnNo)
                    .HasMaxLength(20)
                    .HasColumnName("new_pn_no");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.Ointcode)
                    .HasMaxLength(10)
                    .HasColumnName("OINTCODE");

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.OrderFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OtherNo).HasColumnName("other_no");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PackCcy).HasColumnName("pack_ccy");

                entity.Property(e => e.PackNote).HasMaxLength(70);

                entity.Property(e => e.PackThb).HasColumnName("pack_thb");

                entity.Property(e => e.PackUnder)
                    .HasMaxLength(35)
                    .HasColumnName("pack_under");

                entity.Property(e => e.PackingFor)
                    .HasMaxLength(3)
                    .HasColumnName("packing_for");

                entity.Property(e => e.PartialAmtCcy1).HasColumnName("partial_amt_ccy1");

                entity.Property(e => e.PartialAmtCcy2).HasColumnName("partial_amt_ccy2");

                entity.Property(e => e.PartialAmtCcy3).HasColumnName("partial_amt_ccy3");

                entity.Property(e => e.PartialAmtCcy4).HasColumnName("partial_amt_ccy4");

                entity.Property(e => e.PartialAmtCcy5).HasColumnName("partial_amt_ccy5");

                entity.Property(e => e.PartialAmtCcy6).HasColumnName("partial_amt_ccy6");

                entity.Property(e => e.PartialAmtCcy7).HasColumnName("partial_amt_ccy7");

                entity.Property(e => e.PartialAmtCcy8).HasColumnName("partial_amt_ccy8");

                entity.Property(e => e.PartialAmtCcy9).HasColumnName("partial_amt_ccy9");

                entity.Property(e => e.PartialAmtThb1).HasColumnName("partial_amt_thb1");

                entity.Property(e => e.PartialAmtThb2).HasColumnName("partial_amt_thb2");

                entity.Property(e => e.PartialAmtThb3).HasColumnName("partial_amt_thb3");

                entity.Property(e => e.PartialAmtThb4).HasColumnName("partial_amt_thb4");

                entity.Property(e => e.PartialAmtThb5).HasColumnName("partial_amt_thb5");

                entity.Property(e => e.PartialAmtThb6).HasColumnName("partial_amt_thb6");

                entity.Property(e => e.PartialAmtThb7).HasColumnName("partial_amt_thb7");

                entity.Property(e => e.PartialAmtThb8).HasColumnName("partial_amt_thb8");

                entity.Property(e => e.PartialAmtThb9).HasColumnName("partial_amt_thb9");

                entity.Property(e => e.PartialFullRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partial_full_rate")
                    .IsFixedLength(true);

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayInstruc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pay_instruc")
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pay_method")
                    .IsFixedLength(true);

                entity.Property(e => e.PayRecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pay_rec_type")
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PcIntRate).HasColumnName("pc_int_rate");

                entity.Property(e => e.PcIntType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PcStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("pc_start_date");

                entity.Property(e => e.Pcoverdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PCOverdue")
                    .IsFixedLength(true);

                entity.Property(e => e.PcpastDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PCPastDue")
                    .IsFixedLength(true);

                entity.Property(e => e.Pcprofit).HasColumnName("PCProfit");

                entity.Property(e => e.PenaltyAmt).HasColumnName("penalty_amt");

                entity.Property(e => e.PnNo)
                    .HasMaxLength(20)
                    .HasColumnName("pn_no");

                entity.Property(e => e.PrePackCcy)
                    .HasColumnName("Pre_pack_ccy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrePackThb)
                    .HasColumnName("Pre_pack_thb")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrevContraBal).HasColumnName("prev_contra_bal");

                entity.Property(e => e.PrevStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("prev_start_date");

                entity.Property(e => e.PrincipleAmtCcy1).HasColumnName("principle_amt_ccy1");

                entity.Property(e => e.PrincipleAmtCcy2).HasColumnName("principle_amt_ccy2");

                entity.Property(e => e.PrincipleAmtCcy3).HasColumnName("principle_amt_ccy3");

                entity.Property(e => e.PrincipleAmtCcy4).HasColumnName("principle_amt_ccy4");

                entity.Property(e => e.PrincipleAmtThb1).HasColumnName("principle_amt_thb1");

                entity.Property(e => e.PrincipleAmtThb2).HasColumnName("principle_amt_thb2");

                entity.Property(e => e.PrincipleAmtThb3).HasColumnName("principle_amt_thb3");

                entity.Property(e => e.PrincipleAmtThb4).HasColumnName("principle_amt_thb4");

                entity.Property(e => e.PrincipleAmtThb5).HasColumnName("principle_amt_thb5");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.Rate).HasColumnName("rate");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("rec_status");

                entity.Property(e => e.ReceivePayBy).HasMaxLength(50);

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(15)
                    .HasColumnName("received_no");

                entity.Property(e => e.ReferLcno)
                    .HasMaxLength(20)
                    .HasColumnName("refer_lcno");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("refund_tax_amt");

                entity.Property(e => e.Refundtax)
                    .HasColumnName("REFUNDTAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("Rel_code");

                entity.Property(e => e.Remark)
                    .HasMaxLength(2100)
                    .HasColumnName("remark");

                entity.Property(e => e.ShipmentFr)
                    .HasMaxLength(70)
                    .HasColumnName("shipmentFr");

                entity.Property(e => e.ShipmentTo)
                    .HasMaxLength(70)
                    .HasColumnName("shipmentTo");

                entity.Property(e => e.SpreadRate).HasColumnName("spread_rate");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotPcDay).HasColumnName("tot_pc_day");

                entity.Property(e => e.TotalAmount).HasColumnName("total_amount");

                entity.Property(e => e.TotalBalCcy).HasColumnName("total_bal_ccy");

                entity.Property(e => e.TotalBalThb).HasColumnName("total_bal_thb");

                entity.Property(e => e.TotalCharge).HasColumnName("total_charge");

                entity.Property(e => e.TotalCreditAc).HasColumnName("total_credit_ac");

                entity.Property(e => e.TotalDate).HasColumnName("total_date");

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("update_date");

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("user_id");

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(35)
                    .HasColumnName("vouch_id");
            });

            modelBuilder.Entity<PExpc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pExpc2");

                entity.Property(e => e.AcBahtnet).HasMaxLength(255);

                entity.Property(e => e.AccruAmt).HasMaxLength(255);

                entity.Property(e => e.AccruCcy).HasMaxLength(255);

                entity.Property(e => e.AccruPending).HasMaxLength(255);

                entity.Property(e => e.Allocation)
                    .HasMaxLength(255)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.AmendNo)
                    .HasMaxLength(255)
                    .HasColumnName("Amend_no");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(255)
                    .HasColumnName("applicant_name");

                entity.Property(e => e.ApproveBorad).HasMaxLength(255);

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(255)
                    .HasColumnName("auth_code");

                entity.Property(e => e.AuthDate)
                    .HasMaxLength(255)
                    .HasColumnName("auth_date");

                entity.Property(e => e.AutoOverdue).HasMaxLength(255);

                entity.Property(e => e.BahtNet).HasMaxLength(255);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(255)
                    .HasColumnName("business_type");

                entity.Property(e => e.CalIntDate).HasMaxLength(255);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(255)
                    .HasColumnName("cnty_code");

                entity.Property(e => e.ComLieu)
                    .HasMaxLength(255)
                    .HasColumnName("Com_Lieu");

                entity.Property(e => e.CommCerti)
                    .HasMaxLength(255)
                    .HasColumnName("Comm_Certi");

                entity.Property(e => e.CommOnTt)
                    .HasMaxLength(255)
                    .HasColumnName("comm_OnTT");

                entity.Property(e => e.CommOther)
                    .HasMaxLength(255)
                    .HasColumnName("comm_other");

                entity.Property(e => e.ContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("contra_bal");

                entity.Property(e => e.ContraDate)
                    .HasMaxLength(255)
                    .HasColumnName("contra_date");

                entity.Property(e => e.Current60Daydue)
                    .HasMaxLength(255)
                    .HasColumnName("current_60_daydue");

                entity.Property(e => e.CurrentIntrate)
                    .HasMaxLength(255)
                    .HasColumnName("current_intrate");

                entity.Property(e => e.CurrentPcDue)
                    .HasMaxLength(255)
                    .HasColumnName("current_pc_due");

                entity.Property(e => e.CustId)
                    .HasMaxLength(255)
                    .HasColumnName("cust_id");

                entity.Property(e => e.DaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasMaxLength(255);

                entity.Property(e => e.DateStartAccru).HasMaxLength(255);

                entity.Property(e => e.DateToStop).HasMaxLength(255);

                entity.Property(e => e.DeductExportThb)
                    .HasMaxLength(255)
                    .HasColumnName("deduct_export_thb");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocAmount)
                    .HasMaxLength(255)
                    .HasColumnName("doc_amount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("doc_ccy");

                entity.Property(e => e.DocExpiryDate)
                    .HasMaxLength(255)
                    .HasColumnName("doc_expiry_date");

                entity.Property(e => e.DueNo)
                    .HasMaxLength(255)
                    .HasColumnName("Due_no");

                entity.Property(e => e.DutyStamp)
                    .HasMaxLength(255)
                    .HasColumnName("duty_stamp");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(255)
                    .HasColumnName("event_date");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(255)
                    .HasColumnName("event_mode");

                entity.Property(e => e.EventNo)
                    .HasMaxLength(255)
                    .HasColumnName("event_no");

                entity.Property(e => e.EventType)
                    .HasMaxLength(255)
                    .HasColumnName("event_type");

                entity.Property(e => e.ExchRate)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate");

                entity.Property(e => e.ExchRate1)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate1");

                entity.Property(e => e.ExchRate2)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate2");

                entity.Property(e => e.ExchRate3)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate3");

                entity.Property(e => e.ExchRate4)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate4");

                entity.Property(e => e.ExchRate5)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate5");

                entity.Property(e => e.ExchRate6)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate6");

                entity.Property(e => e.ExchRate7)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate7");

                entity.Property(e => e.ExchRate8)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate8");

                entity.Property(e => e.ExchRate9)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate9");

                entity.Property(e => e.Facno)
                    .HasMaxLength(255)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FcdAcc).HasMaxLength(255);

                entity.Property(e => e.FcdAmt).HasMaxLength(255);

                entity.Property(e => e.FixDate).HasMaxLength(255);

                entity.Property(e => e.FlagAmend).HasMaxLength(255);

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.FlagSettle).HasMaxLength(255);

                entity.Property(e => e.ForwardContract1)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract1");

                entity.Property(e => e.ForwardContract2)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract2");

                entity.Property(e => e.ForwardContract3)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract3");

                entity.Property(e => e.ForwardContract4)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract4");

                entity.Property(e => e.ForwardContract5)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract5");

                entity.Property(e => e.ForwardContract6)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract6");

                entity.Property(e => e.ForwardContract7)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract7");

                entity.Property(e => e.ForwardContract8)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract8");

                entity.Property(e => e.ForwardContract9)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract9");

                entity.Property(e => e.FrontFee).HasMaxLength(255);

                entity.Property(e => e.GenaccDate)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_date");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_flag");

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(255)
                    .HasColumnName("good_code");

                entity.Property(e => e.HandlingFee)
                    .HasMaxLength(255)
                    .HasColumnName("handling_Fee");

                entity.Property(e => e.InUse)
                    .HasMaxLength(255)
                    .HasColumnName("in_Use");

                entity.Property(e => e.IntBalance).HasMaxLength(255);

                entity.Property(e => e.IntBaseDay).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntReceived).HasMaxLength(255);

                entity.Property(e => e.InterestCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy1");

                entity.Property(e => e.InterestCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy2");

                entity.Property(e => e.InterestThb1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb1");

                entity.Property(e => e.InterestThb2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb2");

                entity.Property(e => e.LastAccruAmt).HasMaxLength(255);

                entity.Property(e => e.LastAccruCcy).HasMaxLength(255);

                entity.Property(e => e.LastIntAmt).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasMaxLength(255);

                entity.Property(e => e.LastPayDate).HasMaxLength(255);

                entity.Property(e => e.LastPrnthb).HasMaxLength(255);

                entity.Property(e => e.Method)
                    .HasMaxLength(255)
                    .HasColumnName("method");

                entity.Property(e => e.MidRate).HasMaxLength(255);

                entity.Property(e => e.NewAccruAmt).HasMaxLength(255);

                entity.Property(e => e.NewAccruCcy).HasMaxLength(255);

                entity.Property(e => e.NewPnNo)
                    .HasMaxLength(255)
                    .HasColumnName("new_pn_no");

                entity.Property(e => e.Obaseday)
                    .HasMaxLength(255)
                    .HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(255);

                entity.Property(e => e.Ointcode)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCODE");

                entity.Property(e => e.Ointcurrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday)
                    .HasMaxLength(255)
                    .HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTSPDRATE");

                entity.Property(e => e.OrderFlag).HasMaxLength(255);

                entity.Property(e => e.OtherNo)
                    .HasMaxLength(255)
                    .HasColumnName("other_no");

                entity.Property(e => e.OveSeqno).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("PAccruAmt");

                entity.Property(e => e.PackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("pack_ccy");

                entity.Property(e => e.PackNote).HasMaxLength(255);

                entity.Property(e => e.PackThb)
                    .HasMaxLength(255)
                    .HasColumnName("pack_thb");

                entity.Property(e => e.PackUnder)
                    .HasMaxLength(255)
                    .HasColumnName("pack_under");

                entity.Property(e => e.PackingFor)
                    .HasMaxLength(255)
                    .HasColumnName("packing_for");

                entity.Property(e => e.PackingNo)
                    .HasMaxLength(255)
                    .HasColumnName("PACKING_NO");

                entity.Property(e => e.PartialAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy1");

                entity.Property(e => e.PartialAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy2");

                entity.Property(e => e.PartialAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy3");

                entity.Property(e => e.PartialAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy4");

                entity.Property(e => e.PartialAmtCcy5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy5");

                entity.Property(e => e.PartialAmtCcy6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy6");

                entity.Property(e => e.PartialAmtCcy7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy7");

                entity.Property(e => e.PartialAmtCcy8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy8");

                entity.Property(e => e.PartialAmtCcy9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy9");

                entity.Property(e => e.PartialAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb1");

                entity.Property(e => e.PartialAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb2");

                entity.Property(e => e.PartialAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb3");

                entity.Property(e => e.PartialAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb4");

                entity.Property(e => e.PartialAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb5");

                entity.Property(e => e.PartialAmtThb6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb6");

                entity.Property(e => e.PartialAmtThb7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb7");

                entity.Property(e => e.PartialAmtThb8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb8");

                entity.Property(e => e.PartialAmtThb9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb9");

                entity.Property(e => e.PartialFullRate)
                    .HasMaxLength(255)
                    .HasColumnName("partial_full_rate");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PastDueFlag).HasMaxLength(255);

                entity.Property(e => e.PayInstruc)
                    .HasMaxLength(255)
                    .HasColumnName("pay_instruc");

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(255)
                    .HasColumnName("pay_method");

                entity.Property(e => e.PayNo).HasMaxLength(255);

                entity.Property(e => e.PayRecType)
                    .HasMaxLength(255)
                    .HasColumnName("pay_rec_type");

                entity.Property(e => e.PaymentType).HasMaxLength(255);

                entity.Property(e => e.PcIntRate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_int_rate");

                entity.Property(e => e.PcIntType).HasMaxLength(255);

                entity.Property(e => e.PcStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_start_date");

                entity.Property(e => e.Pcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("PCOverdue");

                entity.Property(e => e.PcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("PCPastDue");

                entity.Property(e => e.Pcprofit)
                    .HasMaxLength(255)
                    .HasColumnName("PCProfit");

                entity.Property(e => e.PenaltyAmt)
                    .HasMaxLength(255)
                    .HasColumnName("penalty_amt");

                entity.Property(e => e.PnNo)
                    .HasMaxLength(255)
                    .HasColumnName("pn_no");

                entity.Property(e => e.PrePackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_ccy");

                entity.Property(e => e.PrePackThb)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_thb");

                entity.Property(e => e.PrevContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("prev_contra_bal");

                entity.Property(e => e.PrevStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("prev_start_date");

                entity.Property(e => e.PrincipleAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy1");

                entity.Property(e => e.PrincipleAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy2");

                entity.Property(e => e.PrincipleAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy3");

                entity.Property(e => e.PrincipleAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy4");

                entity.Property(e => e.PrincipleAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb1");

                entity.Property(e => e.PrincipleAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb2");

                entity.Property(e => e.PrincipleAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb3");

                entity.Property(e => e.PrincipleAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb4");

                entity.Property(e => e.PrincipleAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb5");

                entity.Property(e => e.PrnBalance).HasMaxLength(255);

                entity.Property(e => e.PurposeCode).HasMaxLength(255);

                entity.Property(e => e.Rate)
                    .HasMaxLength(255)
                    .HasColumnName("rate");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(255)
                    .HasColumnName("rec_status");

                entity.Property(e => e.ReceivePayBy).HasMaxLength(255);

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(255)
                    .HasColumnName("received_no");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(255)
                    .HasColumnName("record_type");

                entity.Property(e => e.ReferLcno)
                    .HasMaxLength(255)
                    .HasColumnName("refer_lcno");

                entity.Property(e => e.RefundTaxAmt)
                    .HasMaxLength(255)
                    .HasColumnName("refund_tax_amt");

                entity.Property(e => e.Refundtax)
                    .HasMaxLength(255)
                    .HasColumnName("REFUNDTAX");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(255)
                    .HasColumnName("Rel_code");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .HasColumnName("remark");

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.ShipmentFr)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentFr");

                entity.Property(e => e.ShipmentTo)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentTo");

                entity.Property(e => e.SpreadRate)
                    .HasMaxLength(255)
                    .HasColumnName("spread_rate");

                entity.Property(e => e.SuspAmt).HasMaxLength(255);

                entity.Property(e => e.SuspBht).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TotPcDay)
                    .HasMaxLength(255)
                    .HasColumnName("tot_pc_day");

                entity.Property(e => e.TotalAccruAmt).HasMaxLength(255);

                entity.Property(e => e.TotalAccruBht).HasMaxLength(255);

                entity.Property(e => e.TotalAmount)
                    .HasMaxLength(255)
                    .HasColumnName("total_amount");

                entity.Property(e => e.TotalBalCcy)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_ccy");

                entity.Property(e => e.TotalBalThb)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_thb");

                entity.Property(e => e.TotalCharge)
                    .HasMaxLength(255)
                    .HasColumnName("total_charge");

                entity.Property(e => e.TotalCreditAc)
                    .HasMaxLength(255)
                    .HasColumnName("total_credit_ac");

                entity.Property(e => e.TotalDate)
                    .HasMaxLength(255)
                    .HasColumnName("total_date");

                entity.Property(e => e.TotalSuspAmt).HasMaxLength(255);

                entity.Property(e => e.TotalSuspBht).HasMaxLength(255);

                entity.Property(e => e.UnderlyName).HasMaxLength(255);

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(255)
                    .HasColumnName("update_date");

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .HasColumnName("user_id");

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.ValueDate1)
                    .HasMaxLength(255)
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(255)
                    .HasColumnName("vouch_id");

                entity.Property(e => e.Xxxx)
                    .HasMaxLength(255)
                    .HasColumnName("xxxx");
            });

            modelBuilder.Entity<PExpc3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pExpc3");

                entity.Property(e => e.AcBahtnet).HasMaxLength(255);

                entity.Property(e => e.AccruAmt).HasMaxLength(255);

                entity.Property(e => e.AccruCcy).HasMaxLength(255);

                entity.Property(e => e.AccruPending).HasMaxLength(255);

                entity.Property(e => e.Allocation)
                    .HasMaxLength(255)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.AmendNo)
                    .HasMaxLength(255)
                    .HasColumnName("Amend_no");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(255)
                    .HasColumnName("applicant_name");

                entity.Property(e => e.ApproveBorad).HasMaxLength(255);

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(255)
                    .HasColumnName("auth_code");

                entity.Property(e => e.AuthDate)
                    .HasMaxLength(255)
                    .HasColumnName("auth_date");

                entity.Property(e => e.AutoOverdue).HasMaxLength(255);

                entity.Property(e => e.BahtNet).HasMaxLength(255);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(255)
                    .HasColumnName("business_type");

                entity.Property(e => e.CalIntDate).HasMaxLength(255);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(255)
                    .HasColumnName("cnty_code");

                entity.Property(e => e.ComLieu)
                    .HasMaxLength(255)
                    .HasColumnName("Com_Lieu");

                entity.Property(e => e.CommCerti)
                    .HasMaxLength(255)
                    .HasColumnName("Comm_Certi");

                entity.Property(e => e.CommOnTt)
                    .HasMaxLength(255)
                    .HasColumnName("comm_OnTT");

                entity.Property(e => e.CommOther)
                    .HasMaxLength(255)
                    .HasColumnName("comm_other");

                entity.Property(e => e.ContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("contra_bal");

                entity.Property(e => e.ContraDate)
                    .HasMaxLength(255)
                    .HasColumnName("contra_date");

                entity.Property(e => e.Current60Daydue)
                    .HasMaxLength(255)
                    .HasColumnName("current_60_daydue");

                entity.Property(e => e.CurrentIntrate)
                    .HasMaxLength(255)
                    .HasColumnName("current_intrate");

                entity.Property(e => e.CurrentPcDue)
                    .HasMaxLength(255)
                    .HasColumnName("current_pc_due");

                entity.Property(e => e.CustId)
                    .HasMaxLength(255)
                    .HasColumnName("cust_id");

                entity.Property(e => e.CustInfo)
                    .HasMaxLength(255)
                    .HasColumnName("cust_info");

                entity.Property(e => e.DaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasMaxLength(255);

                entity.Property(e => e.DateStartAccru).HasMaxLength(255);

                entity.Property(e => e.DateToStop).HasMaxLength(255);

                entity.Property(e => e.DeductExportThb)
                    .HasMaxLength(255)
                    .HasColumnName("deduct_export_thb");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocAmount)
                    .HasMaxLength(255)
                    .HasColumnName("doc_amount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("doc_ccy");

                entity.Property(e => e.DocExpiryDate)
                    .HasMaxLength(255)
                    .HasColumnName("doc_expiry_date");

                entity.Property(e => e.DueNo)
                    .HasMaxLength(255)
                    .HasColumnName("Due_no");

                entity.Property(e => e.DutyStamp)
                    .HasMaxLength(255)
                    .HasColumnName("duty_stamp");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(255)
                    .HasColumnName("event_date");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(255)
                    .HasColumnName("event_mode");

                entity.Property(e => e.EventNo)
                    .HasMaxLength(255)
                    .HasColumnName("event_no");

                entity.Property(e => e.EventType)
                    .HasMaxLength(255)
                    .HasColumnName("event_type");

                entity.Property(e => e.ExchRate)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate");

                entity.Property(e => e.ExchRate1)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate1");

                entity.Property(e => e.ExchRate2)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate2");

                entity.Property(e => e.ExchRate3)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate3");

                entity.Property(e => e.ExchRate4)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate4");

                entity.Property(e => e.ExchRate5)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate5");

                entity.Property(e => e.ExchRate6)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate6");

                entity.Property(e => e.ExchRate7)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate7");

                entity.Property(e => e.ExchRate8)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate8");

                entity.Property(e => e.ExchRate9)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate9");

                entity.Property(e => e.Facno)
                    .HasMaxLength(255)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FcdAcc).HasMaxLength(255);

                entity.Property(e => e.FcdAmt).HasMaxLength(255);

                entity.Property(e => e.FixDate).HasMaxLength(255);

                entity.Property(e => e.FlagAmend).HasMaxLength(255);

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.FlagSettle).HasMaxLength(255);

                entity.Property(e => e.ForwardContract1)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract1");

                entity.Property(e => e.ForwardContract2)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract2");

                entity.Property(e => e.ForwardContract3)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract3");

                entity.Property(e => e.ForwardContract4)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract4");

                entity.Property(e => e.ForwardContract5)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract5");

                entity.Property(e => e.ForwardContract6)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract6");

                entity.Property(e => e.ForwardContract7)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract7");

                entity.Property(e => e.ForwardContract8)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract8");

                entity.Property(e => e.ForwardContract9)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract9");

                entity.Property(e => e.FrontFee).HasMaxLength(255);

                entity.Property(e => e.GenaccDate)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_date");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_flag");

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(255)
                    .HasColumnName("good_code");

                entity.Property(e => e.GoodDesc)
                    .HasMaxLength(255)
                    .HasColumnName("good_desc");

                entity.Property(e => e.HandlingFee)
                    .HasMaxLength(255)
                    .HasColumnName("handling_Fee");

                entity.Property(e => e.InUse)
                    .HasMaxLength(255)
                    .HasColumnName("in_Use");

                entity.Property(e => e.IntBalance).HasMaxLength(255);

                entity.Property(e => e.IntBaseDay).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntReceived).HasMaxLength(255);

                entity.Property(e => e.InterestCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy1");

                entity.Property(e => e.InterestCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy2");

                entity.Property(e => e.InterestThb1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb1");

                entity.Property(e => e.InterestThb2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb2");

                entity.Property(e => e.LastAccruAmt).HasMaxLength(255);

                entity.Property(e => e.LastAccruCcy).HasMaxLength(255);

                entity.Property(e => e.LastIntAmt).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasMaxLength(255);

                entity.Property(e => e.LastPayDate).HasMaxLength(255);

                entity.Property(e => e.LastPrnthb).HasMaxLength(255);

                entity.Property(e => e.Method)
                    .HasMaxLength(255)
                    .HasColumnName("method");

                entity.Property(e => e.MidRate).HasMaxLength(255);

                entity.Property(e => e.NewAccruAmt).HasMaxLength(255);

                entity.Property(e => e.NewAccruCcy).HasMaxLength(255);

                entity.Property(e => e.NewPnNo)
                    .HasMaxLength(255)
                    .HasColumnName("new_pn_no");

                entity.Property(e => e.Obaseday)
                    .HasMaxLength(255)
                    .HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(255);

                entity.Property(e => e.Ointcode)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCODE");

                entity.Property(e => e.Ointcurrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday)
                    .HasMaxLength(255)
                    .HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTSPDRATE");

                entity.Property(e => e.OrderFlag).HasMaxLength(255);

                entity.Property(e => e.OtherNo)
                    .HasMaxLength(255)
                    .HasColumnName("other_no");

                entity.Property(e => e.OveSeqno).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("PAccruAmt");

                entity.Property(e => e.PackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("pack_ccy");

                entity.Property(e => e.PackNote).HasMaxLength(255);

                entity.Property(e => e.PackThb)
                    .HasMaxLength(255)
                    .HasColumnName("pack_thb");

                entity.Property(e => e.PackUnder)
                    .HasMaxLength(255)
                    .HasColumnName("pack_under");

                entity.Property(e => e.PackingFor)
                    .HasMaxLength(255)
                    .HasColumnName("packing_for");

                entity.Property(e => e.PackingNo)
                    .HasMaxLength(255)
                    .HasColumnName("PACKING_NO");

                entity.Property(e => e.PartialAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy1");

                entity.Property(e => e.PartialAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy2");

                entity.Property(e => e.PartialAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy3");

                entity.Property(e => e.PartialAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy4");

                entity.Property(e => e.PartialAmtCcy5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy5");

                entity.Property(e => e.PartialAmtCcy6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy6");

                entity.Property(e => e.PartialAmtCcy7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy7");

                entity.Property(e => e.PartialAmtCcy8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy8");

                entity.Property(e => e.PartialAmtCcy9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy9");

                entity.Property(e => e.PartialAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb1");

                entity.Property(e => e.PartialAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb2");

                entity.Property(e => e.PartialAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb3");

                entity.Property(e => e.PartialAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb4");

                entity.Property(e => e.PartialAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb5");

                entity.Property(e => e.PartialAmtThb6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb6");

                entity.Property(e => e.PartialAmtThb7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb7");

                entity.Property(e => e.PartialAmtThb8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb8");

                entity.Property(e => e.PartialAmtThb9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb9");

                entity.Property(e => e.PartialFullRate)
                    .HasMaxLength(255)
                    .HasColumnName("partial_full_rate");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PastDueFlag).HasMaxLength(255);

                entity.Property(e => e.PayInstruc)
                    .HasMaxLength(255)
                    .HasColumnName("pay_instruc");

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(255)
                    .HasColumnName("pay_method");

                entity.Property(e => e.PayNo).HasMaxLength(255);

                entity.Property(e => e.PayRecType)
                    .HasMaxLength(255)
                    .HasColumnName("pay_rec_type");

                entity.Property(e => e.PaymentType).HasMaxLength(255);

                entity.Property(e => e.PcIntRate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_int_rate");

                entity.Property(e => e.PcIntType).HasMaxLength(255);

                entity.Property(e => e.PcStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_start_date");

                entity.Property(e => e.Pcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("PCOverdue");

                entity.Property(e => e.PcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("PCPastDue");

                entity.Property(e => e.Pcprofit)
                    .HasMaxLength(255)
                    .HasColumnName("PCProfit");

                entity.Property(e => e.PenaltyAmt)
                    .HasMaxLength(255)
                    .HasColumnName("penalty_amt");

                entity.Property(e => e.PnNo)
                    .HasMaxLength(255)
                    .HasColumnName("pn_no");

                entity.Property(e => e.PrePackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_ccy");

                entity.Property(e => e.PrePackThb)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_thb");

                entity.Property(e => e.PrevContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("prev_contra_bal");

                entity.Property(e => e.PrevStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("prev_start_date");

                entity.Property(e => e.PrincipleAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy1");

                entity.Property(e => e.PrincipleAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy2");

                entity.Property(e => e.PrincipleAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy3");

                entity.Property(e => e.PrincipleAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy4");

                entity.Property(e => e.PrincipleAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb1");

                entity.Property(e => e.PrincipleAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb2");

                entity.Property(e => e.PrincipleAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb3");

                entity.Property(e => e.PrincipleAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb4");

                entity.Property(e => e.PrincipleAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb5");

                entity.Property(e => e.PrnBalance).HasMaxLength(255);

                entity.Property(e => e.PurposeCode).HasMaxLength(255);

                entity.Property(e => e.Rate)
                    .HasMaxLength(255)
                    .HasColumnName("rate");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(255)
                    .HasColumnName("rec_status");

                entity.Property(e => e.ReceivePayBy).HasMaxLength(255);

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(255)
                    .HasColumnName("received_no");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(255)
                    .HasColumnName("record_type");

                entity.Property(e => e.ReferLcno)
                    .HasMaxLength(255)
                    .HasColumnName("refer_lcno");

                entity.Property(e => e.RefundTaxAmt)
                    .HasMaxLength(255)
                    .HasColumnName("refund_tax_amt");

                entity.Property(e => e.Refundtax)
                    .HasMaxLength(255)
                    .HasColumnName("REFUNDTAX");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(255)
                    .HasColumnName("Rel_code");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .HasColumnName("remark");

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.ShipmentFr)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentFr");

                entity.Property(e => e.ShipmentTo)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentTo");

                entity.Property(e => e.SpreadRate)
                    .HasMaxLength(255)
                    .HasColumnName("spread_rate");

                entity.Property(e => e.SuspAmt).HasMaxLength(255);

                entity.Property(e => e.SuspBht).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TotPcDay)
                    .HasMaxLength(255)
                    .HasColumnName("tot_pc_day");

                entity.Property(e => e.TotalAccruAmt).HasMaxLength(255);

                entity.Property(e => e.TotalAccruBht).HasMaxLength(255);

                entity.Property(e => e.TotalAmount)
                    .HasMaxLength(255)
                    .HasColumnName("total_amount");

                entity.Property(e => e.TotalBalCcy)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_ccy");

                entity.Property(e => e.TotalBalThb)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_thb");

                entity.Property(e => e.TotalCharge)
                    .HasMaxLength(255)
                    .HasColumnName("total_charge");

                entity.Property(e => e.TotalCreditAc)
                    .HasMaxLength(255)
                    .HasColumnName("total_credit_ac");

                entity.Property(e => e.TotalDate)
                    .HasMaxLength(255)
                    .HasColumnName("total_date");

                entity.Property(e => e.TotalSuspAmt).HasMaxLength(255);

                entity.Property(e => e.TotalSuspBht).HasMaxLength(255);

                entity.Property(e => e.UnderlyName).HasMaxLength(255);

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(255)
                    .HasColumnName("update_date");

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .HasColumnName("user_id");

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.ValueDate1)
                    .HasMaxLength(255)
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(255)
                    .HasColumnName("vouch_id");
            });

            modelBuilder.Entity<PExpcA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pExpcA");

                entity.Property(e => e.AcBahtnet).HasMaxLength(255);

                entity.Property(e => e.AccruAmt).HasMaxLength(255);

                entity.Property(e => e.AccruCcy).HasMaxLength(255);

                entity.Property(e => e.AccruPending).HasMaxLength(255);

                entity.Property(e => e.Allocation)
                    .HasMaxLength(255)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.AmendNo)
                    .HasMaxLength(255)
                    .HasColumnName("Amend_no");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(255)
                    .HasColumnName("applicant_name");

                entity.Property(e => e.ApproveBorad).HasMaxLength(255);

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(255)
                    .HasColumnName("auth_code");

                entity.Property(e => e.AuthDate)
                    .HasMaxLength(255)
                    .HasColumnName("auth_date");

                entity.Property(e => e.AutoOverdue).HasMaxLength(255);

                entity.Property(e => e.BahtNet).HasMaxLength(255);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(255)
                    .HasColumnName("business_type");

                entity.Property(e => e.CalIntDate).HasMaxLength(255);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(255)
                    .HasColumnName("cnty_code");

                entity.Property(e => e.ComLieu)
                    .HasMaxLength(255)
                    .HasColumnName("Com_Lieu");

                entity.Property(e => e.CommCerti)
                    .HasMaxLength(255)
                    .HasColumnName("Comm_Certi");

                entity.Property(e => e.CommOnTt)
                    .HasMaxLength(255)
                    .HasColumnName("comm_OnTT");

                entity.Property(e => e.CommOther)
                    .HasMaxLength(255)
                    .HasColumnName("comm_other");

                entity.Property(e => e.ContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("contra_bal");

                entity.Property(e => e.ContraDate)
                    .HasMaxLength(255)
                    .HasColumnName("contra_date");

                entity.Property(e => e.Current60Daydue)
                    .HasMaxLength(255)
                    .HasColumnName("current_60_daydue");

                entity.Property(e => e.CurrentIntrate)
                    .HasMaxLength(255)
                    .HasColumnName("current_intrate");

                entity.Property(e => e.CurrentPcDue)
                    .HasMaxLength(255)
                    .HasColumnName("current_pc_due");

                entity.Property(e => e.CustId)
                    .HasMaxLength(255)
                    .HasColumnName("cust_id");

                entity.Property(e => e.CustInfo)
                    .HasMaxLength(255)
                    .HasColumnName("cust_info");

                entity.Property(e => e.DaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasMaxLength(255);

                entity.Property(e => e.DateStartAccru).HasMaxLength(255);

                entity.Property(e => e.DateToStop).HasMaxLength(255);

                entity.Property(e => e.DeductExportThb)
                    .HasMaxLength(255)
                    .HasColumnName("deduct_export_thb");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocAmount)
                    .HasMaxLength(255)
                    .HasColumnName("doc_amount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("doc_ccy");

                entity.Property(e => e.DocExpiryDate)
                    .HasMaxLength(255)
                    .HasColumnName("doc_expiry_date");

                entity.Property(e => e.DueNo)
                    .HasMaxLength(255)
                    .HasColumnName("Due_no");

                entity.Property(e => e.DutyStamp)
                    .HasMaxLength(255)
                    .HasColumnName("duty_stamp");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(255)
                    .HasColumnName("event_date");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(255)
                    .HasColumnName("event_mode");

                entity.Property(e => e.EventNo)
                    .HasMaxLength(255)
                    .HasColumnName("event_no");

                entity.Property(e => e.EventType)
                    .HasMaxLength(255)
                    .HasColumnName("event_type");

                entity.Property(e => e.ExchRate)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate");

                entity.Property(e => e.ExchRate1)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate1");

                entity.Property(e => e.ExchRate2)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate2");

                entity.Property(e => e.ExchRate3)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate3");

                entity.Property(e => e.ExchRate4)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate4");

                entity.Property(e => e.ExchRate5)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate5");

                entity.Property(e => e.ExchRate6)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate6");

                entity.Property(e => e.ExchRate7)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate7");

                entity.Property(e => e.ExchRate8)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate8");

                entity.Property(e => e.ExchRate9)
                    .HasMaxLength(255)
                    .HasColumnName("exch_rate9");

                entity.Property(e => e.Facno)
                    .HasMaxLength(255)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FcdAcc).HasMaxLength(255);

                entity.Property(e => e.FcdAmt).HasMaxLength(255);

                entity.Property(e => e.FixDate).HasMaxLength(255);

                entity.Property(e => e.FlagAmend).HasMaxLength(255);

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.FlagSettle).HasMaxLength(255);

                entity.Property(e => e.ForwardContract1)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract1");

                entity.Property(e => e.ForwardContract2)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract2");

                entity.Property(e => e.ForwardContract3)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract3");

                entity.Property(e => e.ForwardContract4)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract4");

                entity.Property(e => e.ForwardContract5)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract5");

                entity.Property(e => e.ForwardContract6)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract6");

                entity.Property(e => e.ForwardContract7)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract7");

                entity.Property(e => e.ForwardContract8)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract8");

                entity.Property(e => e.ForwardContract9)
                    .HasMaxLength(255)
                    .HasColumnName("forward_contract9");

                entity.Property(e => e.FrontFee).HasMaxLength(255);

                entity.Property(e => e.GenaccDate)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_date");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("genacc_flag");

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(255)
                    .HasColumnName("good_code");

                entity.Property(e => e.GoodDesc)
                    .HasMaxLength(255)
                    .HasColumnName("good_desc");

                entity.Property(e => e.HandlingFee)
                    .HasMaxLength(255)
                    .HasColumnName("handling_Fee");

                entity.Property(e => e.InUse)
                    .HasMaxLength(255)
                    .HasColumnName("in_Use");

                entity.Property(e => e.IntBalance).HasMaxLength(255);

                entity.Property(e => e.IntBaseDay).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntReceived).HasMaxLength(255);

                entity.Property(e => e.InterestCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy1");

                entity.Property(e => e.InterestCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_ccy2");

                entity.Property(e => e.InterestThb1)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb1");

                entity.Property(e => e.InterestThb2)
                    .HasMaxLength(255)
                    .HasColumnName("interest_thb2");

                entity.Property(e => e.LastAccruAmt).HasMaxLength(255);

                entity.Property(e => e.LastAccruCcy).HasMaxLength(255);

                entity.Property(e => e.LastIntAmt).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasMaxLength(255);

                entity.Property(e => e.LastPayDate).HasMaxLength(255);

                entity.Property(e => e.LastPrnthb).HasMaxLength(255);

                entity.Property(e => e.Method)
                    .HasMaxLength(255)
                    .HasColumnName("method");

                entity.Property(e => e.MidRate).HasMaxLength(255);

                entity.Property(e => e.NewAccruAmt).HasMaxLength(255);

                entity.Property(e => e.NewAccruCcy).HasMaxLength(255);

                entity.Property(e => e.NewPnNo)
                    .HasMaxLength(255)
                    .HasColumnName("new_pn_no");

                entity.Property(e => e.Obaseday)
                    .HasMaxLength(255)
                    .HasColumnName("OBASEDAY");

                entity.Property(e => e.ObjectType).HasMaxLength(255);

                entity.Property(e => e.Ointcode)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCODE");

                entity.Property(e => e.Ointcurrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday)
                    .HasMaxLength(255)
                    .HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate)
                    .HasMaxLength(255)
                    .HasColumnName("OINTSPDRATE");

                entity.Property(e => e.OrderFlag).HasMaxLength(255);

                entity.Property(e => e.OtherNo)
                    .HasMaxLength(255)
                    .HasColumnName("other_no");

                entity.Property(e => e.OveSeqno).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("PAccruAmt");

                entity.Property(e => e.PackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("pack_ccy");

                entity.Property(e => e.PackNote).HasMaxLength(255);

                entity.Property(e => e.PackThb)
                    .HasMaxLength(255)
                    .HasColumnName("pack_thb");

                entity.Property(e => e.PackUnder)
                    .HasMaxLength(255)
                    .HasColumnName("pack_under");

                entity.Property(e => e.PackingFor)
                    .HasMaxLength(255)
                    .HasColumnName("packing_for");

                entity.Property(e => e.PackingNo)
                    .HasMaxLength(255)
                    .HasColumnName("PACKING_NO");

                entity.Property(e => e.PartialAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy1");

                entity.Property(e => e.PartialAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy2");

                entity.Property(e => e.PartialAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy3");

                entity.Property(e => e.PartialAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy4");

                entity.Property(e => e.PartialAmtCcy5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy5");

                entity.Property(e => e.PartialAmtCcy6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy6");

                entity.Property(e => e.PartialAmtCcy7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy7");

                entity.Property(e => e.PartialAmtCcy8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy8");

                entity.Property(e => e.PartialAmtCcy9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_ccy9");

                entity.Property(e => e.PartialAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb1");

                entity.Property(e => e.PartialAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb2");

                entity.Property(e => e.PartialAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb3");

                entity.Property(e => e.PartialAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb4");

                entity.Property(e => e.PartialAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb5");

                entity.Property(e => e.PartialAmtThb6)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb6");

                entity.Property(e => e.PartialAmtThb7)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb7");

                entity.Property(e => e.PartialAmtThb8)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb8");

                entity.Property(e => e.PartialAmtThb9)
                    .HasMaxLength(255)
                    .HasColumnName("partial_amt_thb9");

                entity.Property(e => e.PartialFullRate)
                    .HasMaxLength(255)
                    .HasColumnName("partial_full_rate");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PastDueFlag).HasMaxLength(255);

                entity.Property(e => e.PayInstruc)
                    .HasMaxLength(255)
                    .HasColumnName("pay_instruc");

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(255)
                    .HasColumnName("pay_method");

                entity.Property(e => e.PayNo).HasMaxLength(255);

                entity.Property(e => e.PayRecType)
                    .HasMaxLength(255)
                    .HasColumnName("pay_rec_type");

                entity.Property(e => e.PaymentType).HasMaxLength(255);

                entity.Property(e => e.PcIntRate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_int_rate");

                entity.Property(e => e.PcIntType).HasMaxLength(255);

                entity.Property(e => e.PcStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("pc_start_date");

                entity.Property(e => e.Pcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("PCOverdue");

                entity.Property(e => e.PcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("PCPastDue");

                entity.Property(e => e.Pcprofit)
                    .HasMaxLength(255)
                    .HasColumnName("PCProfit");

                entity.Property(e => e.PenaltyAmt)
                    .HasMaxLength(255)
                    .HasColumnName("penalty_amt");

                entity.Property(e => e.PnNo)
                    .HasMaxLength(255)
                    .HasColumnName("pn_no");

                entity.Property(e => e.PrePackCcy)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_ccy");

                entity.Property(e => e.PrePackThb)
                    .HasMaxLength(255)
                    .HasColumnName("Pre_pack_thb");

                entity.Property(e => e.PrevContraBal)
                    .HasMaxLength(255)
                    .HasColumnName("prev_contra_bal");

                entity.Property(e => e.PrevStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("prev_start_date");

                entity.Property(e => e.PrincipleAmtCcy1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy1");

                entity.Property(e => e.PrincipleAmtCcy2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy2");

                entity.Property(e => e.PrincipleAmtCcy3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy3");

                entity.Property(e => e.PrincipleAmtCcy4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_ccy4");

                entity.Property(e => e.PrincipleAmtThb1)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb1");

                entity.Property(e => e.PrincipleAmtThb2)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb2");

                entity.Property(e => e.PrincipleAmtThb3)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb3");

                entity.Property(e => e.PrincipleAmtThb4)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb4");

                entity.Property(e => e.PrincipleAmtThb5)
                    .HasMaxLength(255)
                    .HasColumnName("principle_amt_thb5");

                entity.Property(e => e.PrnBalance).HasMaxLength(255);

                entity.Property(e => e.PurposeCode).HasMaxLength(255);

                entity.Property(e => e.Rate)
                    .HasMaxLength(255)
                    .HasColumnName("rate");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(255)
                    .HasColumnName("rec_status");

                entity.Property(e => e.ReceivePayBy).HasMaxLength(255);

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(255)
                    .HasColumnName("received_no");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(255)
                    .HasColumnName("record_type");

                entity.Property(e => e.ReferLcno)
                    .HasMaxLength(255)
                    .HasColumnName("refer_lcno");

                entity.Property(e => e.RefundTaxAmt)
                    .HasMaxLength(255)
                    .HasColumnName("refund_tax_amt");

                entity.Property(e => e.Refundtax)
                    .HasMaxLength(255)
                    .HasColumnName("REFUNDTAX");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(255)
                    .HasColumnName("Rel_code");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .HasColumnName("remark");

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.ShipmentFr)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentFr");

                entity.Property(e => e.ShipmentTo)
                    .HasMaxLength(255)
                    .HasColumnName("shipmentTo");

                entity.Property(e => e.SpreadRate)
                    .HasMaxLength(255)
                    .HasColumnName("spread_rate");

                entity.Property(e => e.SuspAmt).HasMaxLength(255);

                entity.Property(e => e.SuspBht).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TotPcDay)
                    .HasMaxLength(255)
                    .HasColumnName("tot_pc_day");

                entity.Property(e => e.TotalAccruAmt).HasMaxLength(255);

                entity.Property(e => e.TotalAccruBht).HasMaxLength(255);

                entity.Property(e => e.TotalAmount)
                    .HasMaxLength(255)
                    .HasColumnName("total_amount");

                entity.Property(e => e.TotalBalCcy)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_ccy");

                entity.Property(e => e.TotalBalThb)
                    .HasMaxLength(255)
                    .HasColumnName("total_bal_thb");

                entity.Property(e => e.TotalCharge)
                    .HasMaxLength(255)
                    .HasColumnName("total_charge");

                entity.Property(e => e.TotalCreditAc)
                    .HasMaxLength(255)
                    .HasColumnName("total_credit_ac");

                entity.Property(e => e.TotalDate)
                    .HasMaxLength(255)
                    .HasColumnName("total_date");

                entity.Property(e => e.TotalSuspAmt).HasMaxLength(255);

                entity.Property(e => e.TotalSuspBht).HasMaxLength(255);

                entity.Property(e => e.UnderlyName).HasMaxLength(255);

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(255)
                    .HasColumnName("update_date");

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .HasColumnName("user_id");

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.ValueDate1)
                    .HasMaxLength(255)
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(255)
                    .HasColumnName("vouch_id");
            });

            modelBuilder.Entity<PExpcOrder>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.EventNo, e.Seqno })
                    .HasName("PK_pExpcOrderName");

                entity.ToTable("pExpcOrder");

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.OrderCnty).HasMaxLength(2);

                entity.Property(e => e.OrderName).HasMaxLength(70);
            });

            modelBuilder.Entity<PFcdAccTran>(entity =>
            {
                entity.HasKey(e => new { e.FcdAccNo, e.FcdEntryDate, e.TranSeqNo, e.TranDoc })
                    .HasName("PK_pFcdAccount");

                entity.ToTable("pFcdAccTrans");

                entity.Property(e => e.FcdAccNo).HasMaxLength(13);

                entity.Property(e => e.FcdEntryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranDoc).HasMaxLength(15);

                entity.Property(e => e.AccNo1).HasMaxLength(10);

                entity.Property(e => e.AccNo2).HasMaxLength(10);

                entity.Property(e => e.AccNo3).HasMaxLength(10);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChqBank).HasMaxLength(20);

                entity.Property(e => e.ChqBran).HasMaxLength(70);

                entity.Property(e => e.ChqNo).HasMaxLength(20);

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FcdCcy).HasMaxLength(3);

                entity.Property(e => e.FcdCross)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagReverse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ForwardNo).HasMaxLength(15);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Mixpayment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RefAccount).HasMaxLength(35);

                entity.Property(e => e.RefTranDoc).HasMaxLength(20);

                entity.Property(e => e.RelateCode).HasMaxLength(6);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Thbbal).HasColumnName("THBBal");

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranCode).HasMaxLength(25);

                entity.Property(e => e.TranDept).HasMaxLength(3);

                entity.Property(e => e.TranFcashAmt).HasColumnName("TranFCashAmt");

                entity.Property(e => e.TranFcdStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranFdepos)
                    .HasMaxLength(50)
                    .HasColumnName("TranFDepos");

                entity.Property(e => e.TranFmethod)
                    .HasMaxLength(15)
                    .HasColumnName("TranFMethod");

                entity.Property(e => e.TranFtel)
                    .HasMaxLength(10)
                    .HasColumnName("TranFTel");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PFcdDayBalance>(entity =>
            {
                entity.HasKey(e => new { e.FcdAccNo, e.TranDate, e.EffectDate });

                entity.ToTable("pFcdDayBalance");

                entity.Property(e => e.FcdAccNo).HasMaxLength(13);

                entity.Property(e => e.TranDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EffectDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.FcdAccType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdCcy).HasMaxLength(3);
            });

            modelBuilder.Entity<PFcdIntRate>(entity =>
            {
                entity.HasKey(e => new { e.ExchCcy, e.CreateTime, e.TranDate });

                entity.ToTable("pFcdIntRate");

                entity.Property(e => e.ExchCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Exch_Ccy");

                entity.Property(e => e.CreateTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.ExchCa)
                    .HasColumnName("Exch_CA")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchSa)
                    .HasColumnName("Exch_SA")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PFcdtext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pFCDText");

                entity.HasIndex(e => new { e.Module, e.FcdAccNew, e.TranDocNew, e.UpdateDate }, "IX_pFCDText")
                    .IsUnique();

                entity.Property(e => e.AccCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AccruThbal).HasColumnName("AccruTHBal");

                entity.Property(e => e.Aocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AOCode");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CustCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CustName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateStartAccru)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DepositDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.EndMonthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ErpAccCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ERP_Acc_Code");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ExchCa).HasColumnName("Exch_CA");

                entity.Property(e => e.ExchSa).HasColumnName("Exch_SA");

                entity.Property(e => e.FcdAccNew)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FcdAccOld)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FcdAccType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FcdSavFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GenFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Module)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OpenDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OutBalTh).HasColumnName("OutBalTH");

                entity.Property(e => e.TermUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TranDocNew)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TranDocOld)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TranFflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TranFFlag");

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Update_date");

                entity.Property(e => e.Zzdate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ZZDate");

                entity.Property(e => e.Zzuser)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZZuser")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PHoliday>(entity =>
            {
                entity.HasKey(e => new { e.HolYear, e.HolDate });

                entity.ToTable("pHoliday");

                entity.Property(e => e.HolYear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hol_Year")
                    .IsFixedLength(true);

                entity.Property(e => e.HolDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Hol_Date");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.HolDesc)
                    .HasMaxLength(50)
                    .HasColumnName("Hol_Desc");

                entity.Property(e => e.HolRecStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Hol_RecStat")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PImbackPay>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.RefNumber, e.EventNo });

                entity.ToTable("pIMBackPay");

                entity.Property(e => e.Login)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Reverse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(13)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImbc>(entity =>
            {
                entity.HasKey(e => new { e.Bcnumber, e.Bcseqno });

                entity.ToTable("pIMBC");

                entity.Property(e => e.Bcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.Bcseqno).HasColumnName("BCSeqno");

                entity.Property(e => e.AcAddr).HasMaxLength(144);

                entity.Property(e => e.AcBank).HasMaxLength(14);

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AmendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoOverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bcamount).HasColumnName("BCAmount");

                entity.Property(e => e.Bcbalance).HasColumnName("BCBalance");

                entity.Property(e => e.Bcccy)
                    .HasMaxLength(3)
                    .HasColumnName("BCCcy");

                entity.Property(e => e.BcoverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BCOverDue")
                    .IsFixedLength(true);

                entity.Property(e => e.Bcstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BCStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Bctype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BCType")
                    .IsFixedLength(true);

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(35)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChipAcBank).HasMaxLength(20);

                entity.Property(e => e.ChipInterm).HasMaxLength(20);

                entity.Property(e => e.ChipReim).HasMaxLength(20);

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.Document).HasMaxLength(800);

                entity.Property(e => e.DraftDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerCity).HasMaxLength(25);

                entity.Property(e => e.DrawerCnty).HasMaxLength(3);

                entity.Property(e => e.DrawerInfo).HasMaxLength(144);

                entity.Property(e => e.DrawerName).HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.FbchargeThb).HasColumnName("FBChargeTHB");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FbinterestThb).HasColumnName("FBInterestTHB");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FCyPayFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Goods).HasMaxLength(4);

                entity.Property(e => e.GoodsDesc).HasMaxLength(1000);

                entity.Property(e => e.IbccomRate).HasColumnName("IBCComRate");

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntermAddr).HasMaxLength(144);

                entity.Property(e => e.IntermBank).HasMaxLength(14);

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(50)
                    .HasColumnName("INVNumber");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Mtnego)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTNego")
                    .IsFixedLength(true);

                entity.Property(e => e.Mtno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTNo")
                    .IsFixedLength(true);

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimAddr).HasMaxLength(144);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.RemitAddr).HasMaxLength(144);

                entity.Property(e => e.RemitBank).HasMaxLength(14);

                entity.Property(e => e.RemitChipUid)
                    .HasMaxLength(20)
                    .HasColumnName("RemitChipUID");

                entity.Property(e => e.RemitCity).HasMaxLength(25);

                entity.Property(e => e.RemitCnty)
                    .HasMaxLength(2)
                    .IsFixedLength(true);

                entity.Property(e => e.RemitDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemitFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RemitRefno).HasMaxLength(25);

                entity.Property(e => e.Sgamt).HasColumnName("SGAmt");

                entity.Property(e => e.Sgamt1).HasColumnName("SGAmt1");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.Sgnumber2)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber2");

                entity.Property(e => e.Sgnumber3)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber3");

                entity.Property(e => e.Sgnumber4)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber4");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.ThirdAddr).HasMaxLength(144);

                entity.Property(e => e.ThirdBank).HasMaxLength(14);

                entity.Property(e => e.ThirdRefno).HasMaxLength(25);

                entity.Property(e => e.TransBy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransFrom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tx23E).HasMaxLength(4);

                entity.Property(e => e.Tx26)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tx59A).HasMaxLength(35);

                entity.Property(e => e.Tx59D).HasMaxLength(144);

                entity.Property(e => e.Tx70).HasMaxLength(144);

                entity.Property(e => e.Tx71A).HasMaxLength(10);

                entity.Property(e => e.Tx72).HasMaxLength(432);

                entity.Property(e => e.Tx79).HasMaxLength(2100);

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImbl>(entity =>
            {
                entity.HasKey(e => new { e.Adnumber, e.RecType, e.Blseqno });

                entity.ToTable("pIMBL");

                entity.Property(e => e.Adnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ADNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Blseqno).HasColumnName("BLSeqno");

                entity.Property(e => e.AcBank).HasMaxLength(14);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.AdviceDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AdviceResult)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoOverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenInfo).HasMaxLength(144);

                entity.Property(e => e.Blamount).HasColumnName("BLAmount");

                entity.Property(e => e.Blbalance).HasColumnName("BLBalance");

                entity.Property(e => e.Blccy)
                    .HasMaxLength(3)
                    .HasColumnName("BLCcy");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BLNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.BloverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BLOverDue")
                    .IsFixedLength(true);

                entity.Property(e => e.Blstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BLStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChipAcBank).HasMaxLength(20);

                entity.Property(e => e.ChipInterm).HasMaxLength(20);

                entity.Property(e => e.ChipNego).HasMaxLength(20);

                entity.Property(e => e.CommBenCcy).HasDefaultValueSql("(0)");

                entity.Property(e => e.CommDesc).HasMaxLength(200);

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DeductCcy).HasMaxLength(3);

                entity.Property(e => e.Discrepancy).HasMaxLength(1500);

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(3)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.FbchargeThb).HasColumnName("FBChargeTHB");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FbinterestThb).HasColumnName("FBInterestTHB");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FCyPayFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Instruction).HasMaxLength(1000);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntermBank).HasMaxLength(14);

                entity.Property(e => e.IssueAdvice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lc740)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LC740")
                    .IsFixedLength(true);

                entity.Property(e => e.Lcamt).HasColumnName("LCAmt");

                entity.Property(e => e.Lcbal)
                    .HasColumnName("LCBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Mt799)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT799")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt999)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT999")
                    .IsFixedLength(true);

                entity.Property(e => e.Mtno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Mttelex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTTelex")
                    .IsFixedLength(true);

                entity.Property(e => e.NegoAcno)
                    .HasMaxLength(20)
                    .HasColumnName("NegoACNo");

                entity.Property(e => e.NegoAddr).HasMaxLength(144);

                entity.Property(e => e.NegoBank).HasMaxLength(14);

                entity.Property(e => e.NegoCity).HasMaxLength(20);

                entity.Property(e => e.NegoCnty).HasMaxLength(2);

                entity.Property(e => e.NegoDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NegoRefno).HasMaxLength(25);

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(50);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PendingPayable).HasColumnName("Pending_Payable");

                entity.Property(e => e.PrevDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevFbchrg).HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbint).HasColumnName("PrevFBInt");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.RemitDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemitFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SettleFlag).HasMaxLength(20);

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.Sgnumber2)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber2");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(30);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImbldoc>(entity =>
            {
                entity.HasKey(e => new { e.Adnumber, e.SeqNo });

                entity.ToTable("pIMBLDocs");

                entity.Property(e => e.Adnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ADNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Copy).HasMaxLength(10);

                entity.Property(e => e.DocDetails).HasMaxLength(150);

                entity.Property(e => e.OrgCopy).HasMaxLength(10);
            });

            modelBuilder.Entity<PImbltext>(entity =>
            {
                entity.HasKey(e => new { e.Adnumber, e.Seqno });

                entity.ToTable("pIMBLText");

                entity.Property(e => e.Adnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ADNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Text23).HasMaxLength(16);

                entity.Property(e => e.Text72).HasMaxLength(432);

                entity.Property(e => e.Text77).HasMaxLength(432);

                entity.Property(e => e.Text79).HasMaxLength(2100);

                entity.Property(e => e.Text791)
                    .HasMaxLength(2100)
                    .HasColumnName("Text79_1");

                entity.Property(e => e.Text792)
                    .HasMaxLength(2100)
                    .HasColumnName("Text79_2");
            });

            modelBuilder.Entity<PIminstall>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.EventNo, e.Seqno });

                entity.ToTable("pIMInstall");

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fbint).HasColumnName("FBInt");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PIminterest>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.Event, e.DocNo, e.EventNo, e.Seqno });

                entity.ToTable("pIMInterest");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.Event).HasMaxLength(15);

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.IntCode).HasMaxLength(10);

                entity.Property(e => e.IntFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.IntTo).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PImlc>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.Lcseqno, e.RecType });

                entity.ToTable("pIMLC");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AdBankCode).HasMaxLength(14);

                entity.Property(e => e.AdThruBank).HasMaxLength(14);

                entity.Property(e => e.AdThruCity).HasMaxLength(25);

                entity.Property(e => e.AdThruCnty).HasMaxLength(2);

                entity.Property(e => e.AdThruInfo1).HasMaxLength(148);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AllowMinus).HasDefaultValueSql("(0)");

                entity.Property(e => e.AllowPlus).HasDefaultValueSql("(0)");

                entity.Property(e => e.AmendAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.AmendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.AmendMinus).HasDefaultValueSql("(0)");

                entity.Property(e => e.AmendNo).HasMaxLength(15);

                entity.Property(e => e.AmendPlus).HasDefaultValueSql("(0)");

                entity.Property(e => e.AmendSeq).HasDefaultValueSql("(0)");

                entity.Property(e => e.AmendStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AvailBy).HasMaxLength(16);

                entity.Property(e => e.AvailCnty).HasMaxLength(148);

                entity.Property(e => e.AvailWith).HasMaxLength(16);

                entity.Property(e => e.Bank740).HasMaxLength(224);

                entity.Property(e => e.BanktoBank72).HasMaxLength(224);

                entity.Property(e => e.BenCity).HasMaxLength(25);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenInfo1).HasMaxLength(35);

                entity.Property(e => e.BenInfo2).HasMaxLength(35);

                entity.Property(e => e.BenInfo3).HasMaxLength(35);

                entity.Property(e => e.BenInfo4).HasMaxLength(35);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Charge71B).HasMaxLength(224);

                entity.Property(e => e.Charge740).HasMaxLength(224);

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CommBenCcy).HasColumnName("CommBenCCy");

                entity.Property(e => e.CommLcrate)
                    .HasColumnName("CommLCRate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CommType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConfBankCode).HasMaxLength(14);

                entity.Property(e => e.ConfirmComm)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConfirmRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Confirmation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.DateExpiryMax).HasColumnType("smalldatetime");

                entity.Property(e => e.DateIssue).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLateShip).HasColumnType("smalldatetime");

                entity.Property(e => e.DateMt740)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DateMT740");

                entity.Property(e => e.DePlusFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DePlus_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.DraftAt).HasMaxLength(108);

                entity.Property(e => e.Drawee).HasMaxLength(40);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.ExchRate).HasDefaultValueSql("(0)");

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Incoterms).HasMaxLength(20);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lcamt)
                    .HasColumnName("LCAmt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LcavalBal)
                    .HasColumnName("LCAvalBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lcbal)
                    .HasColumnName("LCBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lcccy)
                    .HasMaxLength(3)
                    .HasColumnName("LCCcy");

                entity.Property(e => e.Lcdays)
                    .HasColumnName("LCDays")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lcform)
                    .HasMaxLength(50)
                    .HasColumnName("LCForm");

                entity.Property(e => e.Lcnet).HasColumnName("LCNet");

                entity.Property(e => e.LcpostAmt).HasColumnName("LCPostAmt");

                entity.Property(e => e.LcreferNo)
                    .HasMaxLength(16)
                    .HasColumnName("LCReferNo");

                entity.Property(e => e.Lcrevolve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCRevolve")
                    .IsFixedLength(true);

                entity.Property(e => e.LcsentBy)
                    .HasMaxLength(15)
                    .HasColumnName("LCSentBy");

                entity.Property(e => e.Lcstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Lcvary)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCVary")
                    .IsFixedLength(true);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.MixPayment).HasMaxLength(650);

                entity.Property(e => e.Mt747Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT747_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.OutsideCharge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PartialShipment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.PeriodComm).HasDefaultValueSql("(0)");

                entity.Property(e => e.PeriodCommExt).HasDefaultValueSql("(0)");

                entity.Property(e => e.PlaceExpiry).HasMaxLength(29);

                entity.Property(e => e.PostageAmt)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PresentDay).HasDefaultValueSql("(0)");

                entity.Property(e => e.PresentPeriod).HasMaxLength(144);

                entity.Property(e => e.PrevAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevBenInfo).HasMaxLength(144);

                entity.Property(e => e.PrevDateExpMax).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevDateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevLcavalBal)
                    .HasColumnName("PrevLCAvalBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevLcbal)
                    .HasColumnName("PrevLCBal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevLcdays)
                    .HasColumnName("PrevLCDays")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevMunus).HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevPlus).HasDefaultValueSql("(0)");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimAddr).HasMaxLength(144);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.ReimCharge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimMt740)
                    .HasMaxLength(3)
                    .HasColumnName("ReimMT740");

                entity.Property(e => e.ReimNote).HasMaxLength(792);

                entity.Property(e => e.ReimPay).HasMaxLength(15);

                entity.Property(e => e.RequestCancel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Restricted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipPlace).HasMaxLength(65);

                entity.Property(e => e.ShipmentFrom).HasMaxLength(65);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(30);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.Transhipment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransportTo).HasMaxLength(65);

                entity.Property(e => e.TransportType).HasMaxLength(50);

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImlcamend>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.RecType, e.Lcseqno });

                entity.ToTable("pIMLCAmend");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.Amend79)
                    .HasMaxLength(1820)
                    .IsUnicode(false);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Narr77A)
                    .HasMaxLength(740)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PImlccond>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.RecType, e.Lcseqno, e.Mt })
                    .HasName("PK_pIMLCCond47");

                entity.ToTable("pIMLCCond");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.Mt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MT")
                    .IsFixedLength(true);

                entity.Property(e => e.AddCondition)
                    .HasMaxLength(6600)
                    .IsUnicode(false);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");
            });

            modelBuilder.Entity<PImlcdoc>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.RecType, e.Lcseqno, e.Mt })
                    .HasName("PK_pIMLCDoc46");

                entity.ToTable("pIMLCDocs");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.Mt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MT")
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocRequire)
                    .HasMaxLength(6600)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PImlcgood>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.RecType, e.Lcseqno, e.Mt });

                entity.ToTable("pIMLCGoods");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.Mt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MT")
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.GoodsDesc)
                    .HasMaxLength(6600)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PImlctext>(entity =>
            {
                entity.HasKey(e => new { e.Lcnumber, e.RecType, e.Lcseqno });

                entity.ToTable("pIMLCText");

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcseqno).HasColumnName("LCSeqno");

                entity.Property(e => e.AddCondition).HasMaxLength(3300);

                entity.Property(e => e.Amend79).HasMaxLength(1800);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocRequire).HasMaxLength(3300);

                entity.Property(e => e.Mt20256a)
                    .HasMaxLength(11)
                    .HasColumnName("MT202_56A");

                entity.Property(e => e.Mt20256d)
                    .HasMaxLength(144)
                    .HasColumnName("MT202_56D");

                entity.Property(e => e.Mt20257a)
                    .HasMaxLength(11)
                    .HasColumnName("MT202_57A");

                entity.Property(e => e.Mt20257d)
                    .HasMaxLength(144)
                    .HasColumnName("MT202_57D");

                entity.Property(e => e.Mt20258a)
                    .HasMaxLength(11)
                    .HasColumnName("MT202_58A");

                entity.Property(e => e.Mt20258d)
                    .HasMaxLength(144)
                    .HasColumnName("MT202_58D");

                entity.Property(e => e.Narr77A).HasMaxLength(720);

                entity.Property(e => e.PresentPeriod).HasMaxLength(144);
            });

            modelBuilder.Entity<PImmiscTran>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.RefNumber, e.Seqno, e.DocNumber });

                entity.ToTable("pIMMiscTran");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AcAddr).HasMaxLength(144);

                entity.Property(e => e.AcBank).HasMaxLength(14);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bank52).HasMaxLength(15);

                entity.Property(e => e.Bank54).HasMaxLength(15);

                entity.Property(e => e.BenAddr).HasMaxLength(144);

                entity.Property(e => e.BenBank).HasMaxLength(14);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChipAcBank).HasMaxLength(35);

                entity.Property(e => e.ChipBank53).HasMaxLength(35);

                entity.Property(e => e.ChipBank54).HasMaxLength(35);

                entity.Property(e => e.ChipBenBank).HasMaxLength(35);

                entity.Property(e => e.ChipInterm).HasMaxLength(35);

                entity.Property(e => e.CommCcy).HasColumnName("CommCCy");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateGenAc).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocFbcharge).HasColumnName("DocFBCharge");

                entity.Property(e => e.DocFbinterest).HasColumnName("DocFBInterest");

                entity.Property(e => e.DocStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(3)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcdacNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDAcNo");

                entity.Property(e => e.FcdreceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntermAddr).HasMaxLength(144);

                entity.Property(e => e.IntermBank).HasMaxLength(14);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTType")
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.ProdCode).HasMaxLength(15);

                entity.Property(e => e.ProdDesc).HasMaxLength(50);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.ReimRefNo).HasMaxLength(16);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.SwiftFile).HasMaxLength(35);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tx72).HasMaxLength(432);

                entity.Property(e => e.Tx79).HasMaxLength(2100);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImmiscTranx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pIMMiscTranx");

                entity.Property(e => e.AcAddr).HasMaxLength(255);

                entity.Property(e => e.AcBank).HasMaxLength(255);

                entity.Property(e => e.Allocation).HasMaxLength(255);

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasMaxLength(255);

                entity.Property(e => e.Bank52).HasMaxLength(255);

                entity.Property(e => e.Bank54).HasMaxLength(255);

                entity.Property(e => e.BenAddr).HasMaxLength(255);

                entity.Property(e => e.BenBank).HasMaxLength(255);

                entity.Property(e => e.CableMail).HasMaxLength(255);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChipAcBank).HasMaxLength(255);

                entity.Property(e => e.ChipBank52).HasMaxLength(255);

                entity.Property(e => e.ChipBank53).HasMaxLength(255);

                entity.Property(e => e.ChipBank54).HasMaxLength(255);

                entity.Property(e => e.ChipBenBank).HasMaxLength(255);

                entity.Property(e => e.ChipInterm).HasMaxLength(255);

                entity.Property(e => e.CommCcy)
                    .HasMaxLength(255)
                    .HasColumnName("CommCCy");

                entity.Property(e => e.CommOther).HasMaxLength(255);

                entity.Property(e => e.CustAddr).HasMaxLength(255);

                entity.Property(e => e.CustBran)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.DateGenAc).HasMaxLength(255);

                entity.Property(e => e.DateLastPaid).HasMaxLength(255);

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocBalance).HasMaxLength(255);

                entity.Property(e => e.DocCcy).HasMaxLength(255);

                entity.Property(e => e.DocCommCcy).HasMaxLength(255);

                entity.Property(e => e.DocDate).HasMaxLength(255);

                entity.Property(e => e.DocFbcharge)
                    .HasMaxLength(255)
                    .HasColumnName("DocFBCharge");

                entity.Property(e => e.DocFbinterest)
                    .HasMaxLength(255)
                    .HasColumnName("DocFBInterest");

                entity.Property(e => e.DocNumber).HasMaxLength(255);

                entity.Property(e => e.DocStatus).HasMaxLength(255);

                entity.Property(e => e.Event).HasMaxLength(255);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag).HasMaxLength(255);

                entity.Property(e => e.ExchRate).HasMaxLength(255);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(255)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge)
                    .HasMaxLength(255)
                    .HasColumnName("FBCharge");

                entity.Property(e => e.Fbinterest)
                    .HasMaxLength(255)
                    .HasColumnName("FBInterest");

                entity.Property(e => e.FcdacNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCDAcNo");

                entity.Property(e => e.FcdreceiptNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCDReceiptNo");

                entity.Property(e => e.GenAccFlag).HasMaxLength(255);

                entity.Property(e => e.InUse).HasMaxLength(255);

                entity.Property(e => e.IntermAddr).HasMaxLength(255);

                entity.Property(e => e.IntermBank).HasMaxLength(255);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(255);

                entity.Property(e => e.Login).HasMaxLength(255);

                entity.Property(e => e.MarginAmt).HasMaxLength(255);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(255)
                    .HasColumnName("MTType");

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.PayMethod).HasMaxLength(255);

                entity.Property(e => e.ProdCode).HasMaxLength(255);

                entity.Property(e => e.ProdDesc).HasMaxLength(255);

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.RefNumber).HasMaxLength(255);

                entity.Property(e => e.ReimBank).HasMaxLength(255);

                entity.Property(e => e.ReimRefNo).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.SwiftFile).HasMaxLength(255);

                entity.Property(e => e.TaxAmt).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.Tx72).HasMaxLength(255);

                entity.Property(e => e.Tx79).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasMaxLength(255);

                entity.Property(e => e.UserCode).HasMaxLength(255);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(255)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImpastDue>(entity =>
            {
                entity.HasKey(e => new { e.CenterId, e.DocModule, e.DocNumber, e.RecType, e.DocSeqno });

                entity.ToTable("pIMPastDue");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocModule).HasMaxLength(15);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CommDesc).HasMaxLength(200);

                entity.Property(e => e.CommDlc).HasColumnName("CommDLC");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag).HasMaxLength(7);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorType).HasMaxLength(5);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImpayment>(entity =>
            {
                entity.HasKey(e => new { e.DocNumber, e.DocSeqno })
                    .HasName("PK_pDocPayment");

                entity.ToTable("pIMPayment");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.BalanceAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.FwdCont).HasMaxLength(15);

                entity.Property(e => e.FwdCont2).HasMaxLength(15);

                entity.Property(e => e.FwdCont3).HasMaxLength(15);

                entity.Property(e => e.FwdCont4).HasMaxLength(15);

                entity.Property(e => e.FwdCont5).HasMaxLength(15);

                entity.Property(e => e.FwdCont6).HasMaxLength(15);

                entity.Property(e => e.FwdContInt1).HasMaxLength(15);

                entity.Property(e => e.FwdContInt2).HasMaxLength(15);

                entity.Property(e => e.InterestAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.InterestBl).HasColumnName("InterestBL");

                entity.Property(e => e.OverDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayAmtBht1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayAmtBht2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayAmtBht3).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayAmtBht4).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayAmtBht5).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayAmtBht6).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht3).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht4).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht5).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayBaht6).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayCcyAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayCcyInt).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch3).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch4).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch5).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayExch6).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayFcd)
                    .HasMaxLength(20)
                    .HasColumnName("PayFCD");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayIntBaht1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayIntBaht2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayIntBht1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayIntBht2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayIntExch1).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayIntExch2).HasDefaultValueSql("(0)");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRDueStatus")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PImsg>(entity =>
            {
                entity.HasKey(e => new { e.Sgnumber, e.RecType, e.Sgseqno });

                entity.ToTable("pIMSG");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SGNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sgseqno).HasColumnName("SGSeqno");

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BenInfo).HasMaxLength(110);

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(35)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENACC_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.HouseAwb).HasMaxLength(35);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.InvNumber).HasMaxLength(65);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.MasterAwb).HasMaxLength(35);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRelation).HasMaxLength(6);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferLc)
                    .HasMaxLength(15)
                    .HasColumnName("ReferLC");

                entity.Property(e => e.RefundFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.Sgamt).HasColumnName("SGAmt");

                entity.Property(e => e.Sgbaht).HasColumnName("SGBaht");

                entity.Property(e => e.Sgccy)
                    .HasMaxLength(3)
                    .HasColumnName("SGCcy");

                entity.Property(e => e.Sgmode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SGMode")
                    .IsFixedLength(true);

                entity.Property(e => e.Sgstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SGStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Sgtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SGType")
                    .IsFixedLength(true);

                entity.Property(e => e.Shipping).HasMaxLength(100);

                entity.Property(e => e.SupStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.Vessel).HasMaxLength(100);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VOUCHER_ID");
            });

            modelBuilder.Entity<PImtr>(entity =>
            {
                entity.HasKey(e => new { e.RefNumber, e.RecType, e.Trseqno });

                entity.ToTable("pIMTR");

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.AcAddr).HasMaxLength(144);

                entity.Property(e => e.AcBank).HasMaxLength(14);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoOverDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenInfo).HasMaxLength(144);

                entity.Property(e => e.BenName).HasMaxLength(35);

                entity.Property(e => e.Bladvice)
                    .HasMaxLength(15)
                    .HasColumnName("BLAdvice");

                entity.Property(e => e.Blbalance)
                    .HasColumnName("BLBalance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Blbase).HasColumnName("BLBase");

                entity.Property(e => e.Blday).HasColumnName("BLDay");

                entity.Property(e => e.Blexch).HasColumnName("BLExch");

                entity.Property(e => e.Blfwd)
                    .HasMaxLength(15)
                    .HasColumnName("BLFwd");

                entity.Property(e => e.BlintAmt).HasColumnName("BLIntAmt");

                entity.Property(e => e.BlintCode)
                    .HasMaxLength(10)
                    .HasColumnName("BLIntCode");

                entity.Property(e => e.BlintRate).HasColumnName("BLIntRate");

                entity.Property(e => e.BlintStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BLIntStartDate");

                entity.Property(e => e.Blinterest).HasColumnName("BLInterest");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(15)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(20)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChipAcBank).HasMaxLength(20);

                entity.Property(e => e.ChipInterm).HasMaxLength(20);

                entity.Property(e => e.ChipNego).HasMaxLength(20);

                entity.Property(e => e.CommDesc).HasMaxLength(200);

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.Doamount).HasColumnName("DOAmount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(3)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbengage).HasColumnName("FBEngage");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FCyPayFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Goods).HasMaxLength(3);

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.Ibcrate).HasColumnName("IBCRate");

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFixDate).HasMaxLength(2);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntPayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntermAddr).HasMaxLength(144);

                entity.Property(e => e.IntermBank).HasMaxLength(14);

                entity.Property(e => e.Invoice).HasMaxLength(50);

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(15)
                    .HasColumnName("LCNumber");

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Mtnego)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTNego")
                    .IsFixedLength(true);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTType")
                    .IsFixedLength(true);

                entity.Property(e => e.Nego799)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nego999)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NegoBank).HasMaxLength(14);

                entity.Property(e => e.NegoCnty).HasMaxLength(2);

                entity.Property(e => e.NegoRefno).HasMaxLength(25);

                entity.Property(e => e.NegoTelex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NostAcinfo)
                    .HasMaxLength(20)
                    .HasColumnName("NostACInfo");

                entity.Property(e => e.ObjectType).HasMaxLength(6);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevFbchrg).HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbeng).HasColumnName("PrevFBEng");

                entity.Property(e => e.PrevFbint).HasColumnName("PrevFBInt");

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.Relation).HasMaxLength(6);

                entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SettleFlag).HasMaxLength(20);

                entity.Property(e => e.Sgamount).HasColumnName("SGAmount");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(15)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.Tramount).HasColumnName("TRAmount");

                entity.Property(e => e.Tramt1).HasColumnName("TRAmt1");

                entity.Property(e => e.Tramt2).HasColumnName("TRAmt2");

                entity.Property(e => e.Tramt3).HasColumnName("TRAmt3");

                entity.Property(e => e.Tramt4).HasColumnName("TRAmt4");

                entity.Property(e => e.Tramt5).HasColumnName("TRAmt5");

                entity.Property(e => e.Trbalance).HasColumnName("TRBalance");

                entity.Property(e => e.Trccy)
                    .HasMaxLength(3)
                    .HasColumnName("TRCcy");

                entity.Property(e => e.Trccy1).HasColumnName("TRCcy1");

                entity.Property(e => e.Trccy2).HasColumnName("TRCcy2");

                entity.Property(e => e.Trccy3).HasColumnName("TRCcy3");

                entity.Property(e => e.Trccy4).HasColumnName("TRCcy4");

                entity.Property(e => e.Trccy5).HasColumnName("TRCcy5");

                entity.Property(e => e.TrccyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRCCyFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Trcont1)
                    .HasMaxLength(15)
                    .HasColumnName("TRCont1");

                entity.Property(e => e.Trcont2)
                    .HasMaxLength(15)
                    .HasColumnName("TRCont2");

                entity.Property(e => e.Trcont3)
                    .HasMaxLength(15)
                    .HasColumnName("TRCont3");

                entity.Property(e => e.Trcont4)
                    .HasMaxLength(15)
                    .HasColumnName("TRCont4");

                entity.Property(e => e.Trcont5)
                    .HasMaxLength(15)
                    .HasColumnName("TRCont5");

                entity.Property(e => e.Trday).HasColumnName("TRDay");

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRDueStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Trexch1).HasColumnName("TRExch1");

                entity.Property(e => e.Trexch2).HasColumnName("TRExch2");

                entity.Property(e => e.Trexch3).HasColumnName("TRExch3");

                entity.Property(e => e.Trexch4).HasColumnName("TRExch4");

                entity.Property(e => e.Trexch5).HasColumnName("TRExch5");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRFLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(35)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trprofit).HasColumnName("TRProfit");

                entity.Property(e => e.Trrate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRRate")
                    .IsFixedLength(true);

                entity.Property(e => e.Trstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.TrtermDay).HasColumnName("TRTermDay");

                entity.Property(e => e.Tx23E).HasMaxLength(4);

                entity.Property(e => e.Tx26)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tx59A).HasMaxLength(35);

                entity.Property(e => e.Tx59Cnty).HasMaxLength(2);

                entity.Property(e => e.Tx59D).HasMaxLength(144);

                entity.Property(e => e.Tx71A).HasMaxLength(10);

                entity.Property(e => e.Tx72).HasMaxLength(432);

                entity.Property(e => e.UnderlyName).HasMaxLength(250);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImtr2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pIMTR2");

                entity.Property(e => e.AcAddr).HasMaxLength(255);

                entity.Property(e => e.AcBank).HasMaxLength(255);

                entity.Property(e => e.AccruAmt).HasMaxLength(255);

                entity.Property(e => e.AccruCcy)
                    .HasMaxLength(255)
                    .HasColumnName("AccruCCy");

                entity.Property(e => e.AccruPending).HasMaxLength(255);

                entity.Property(e => e.Allocation).HasMaxLength(255);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(255)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.AutoOverDue).HasMaxLength(255);

                entity.Property(e => e.BenCnty).HasMaxLength(255);

                entity.Property(e => e.BenInfo).HasMaxLength(255);

                entity.Property(e => e.BenName).HasMaxLength(255);

                entity.Property(e => e.Bladvice)
                    .HasMaxLength(255)
                    .HasColumnName("BLAdvice");

                entity.Property(e => e.Blbalance).HasColumnName("BLBalance");

                entity.Property(e => e.Blbase).HasColumnName("BLBase");

                entity.Property(e => e.Blday).HasColumnName("BLDay");

                entity.Property(e => e.Blexch).HasColumnName("BLExch");

                entity.Property(e => e.Blfwd)
                    .HasMaxLength(255)
                    .HasColumnName("BLFwd");

                entity.Property(e => e.BlintAmt).HasColumnName("BLIntAmt");

                entity.Property(e => e.BlintCode)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntCode");

                entity.Property(e => e.BlintRate).HasColumnName("BLIntRate");

                entity.Property(e => e.BlintStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLIntStartDate");

                entity.Property(e => e.Blinterest).HasColumnName("BLInterest");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(255)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasMaxLength(255)
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId).HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChipAcBank).HasMaxLength(255);

                entity.Property(e => e.ChipInterm).HasMaxLength(255);

                entity.Property(e => e.ChipNego).HasMaxLength(255);

                entity.Property(e => e.CommDesc).HasMaxLength(255);

                entity.Property(e => e.CommExch).HasMaxLength(255);

                entity.Property(e => e.CommFcd)
                    .HasMaxLength(255)
                    .HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(255);

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.DaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasMaxLength(255);

                entity.Property(e => e.DateLastPaid).HasColumnType("datetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasMaxLength(255);

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.Doamount).HasColumnName("DOAmount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Event).HasMaxLength(255);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag).HasMaxLength(255);

                entity.Property(e => e.EventMode).HasMaxLength(255);

                entity.Property(e => e.ExchBefore).HasMaxLength(255);

                entity.Property(e => e.FacNo).HasMaxLength(255);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(255)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbengage).HasColumnName("FBEngage");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(255)
                    .HasColumnName("FCyPayFlag");

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag).HasMaxLength(255);

                entity.Property(e => e.Goods).HasMaxLength(255);

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.Ibcrate).HasColumnName("IBCRate");

                entity.Property(e => e.InUse).HasMaxLength(255);

                entity.Property(e => e.IntBefore).HasMaxLength(255);

                entity.Property(e => e.IntFixDate).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntPayType).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntStartDate).HasColumnType("datetime");

                entity.Property(e => e.IntermAddr).HasMaxLength(255);

                entity.Property(e => e.IntermBank).HasMaxLength(255);

                entity.Property(e => e.LastAccruAmt).HasMaxLength(255);

                entity.Property(e => e.LastAccruCcy).HasMaxLength(255);

                entity.Property(e => e.LastIntAmt).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasColumnType("datetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(255);

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(255)
                    .HasColumnName("LCNumber");

                entity.Property(e => e.Locode)
                    .HasMaxLength(255)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Mtnego).HasColumnName("MTNego");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(255)
                    .HasColumnName("MTType");

                entity.Property(e => e.Nego799).HasMaxLength(255);

                entity.Property(e => e.Nego999).HasMaxLength(255);

                entity.Property(e => e.NegoBank).HasMaxLength(255);

                entity.Property(e => e.NegoCnty).HasMaxLength(255);

                entity.Property(e => e.NegoRefno).HasMaxLength(255);

                entity.Property(e => e.NegoTelex).HasMaxLength(255);

                entity.Property(e => e.NewAccruAmt).HasMaxLength(255);

                entity.Property(e => e.NewAccruCcy).HasMaxLength(255);

                entity.Property(e => e.NostAcinfo)
                    .HasMaxLength(255)
                    .HasColumnName("NostACInfo");

                entity.Property(e => e.ObjectType).HasMaxLength(255);

                entity.Property(e => e.OverdueDate).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt)
                    .HasMaxLength(255)
                    .HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PayAmount).HasMaxLength(255);

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.PayInterest).HasMaxLength(255);

                entity.Property(e => e.PayMethod).HasMaxLength(255);

                entity.Property(e => e.PayType).HasMaxLength(255);

                entity.Property(e => e.PrevDueDate).HasMaxLength(255);

                entity.Property(e => e.PrevFbchrg)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbeng)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBEng");

                entity.Property(e => e.PrevFbint)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBInt");

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.RecType).HasMaxLength(255);

                entity.Property(e => e.RefNumber).HasMaxLength(255);

                entity.Property(e => e.ReimBank).HasMaxLength(255);

                entity.Property(e => e.Relation).HasMaxLength(255);

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.SettleDate).HasMaxLength(255);

                entity.Property(e => e.SettleFlag).HasMaxLength(255);

                entity.Property(e => e.Sgamount).HasColumnName("SGAmount");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TenorType).HasMaxLength(255);

                entity.Property(e => e.Tramount).HasColumnName("TRAmount");

                entity.Property(e => e.Tramt1).HasColumnName("TRAmt1");

                entity.Property(e => e.Tramt2).HasColumnName("TRAmt2");

                entity.Property(e => e.Tramt3).HasColumnName("TRAmt3");

                entity.Property(e => e.Tramt4).HasColumnName("TRAmt4");

                entity.Property(e => e.Tramt5).HasColumnName("TRAmt5");

                entity.Property(e => e.Trbalance).HasColumnName("TRBalance");

                entity.Property(e => e.Trccy)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy");

                entity.Property(e => e.Trccy1).HasColumnName("TRCcy1");

                entity.Property(e => e.Trccy2).HasColumnName("TRCcy2");

                entity.Property(e => e.Trccy3).HasColumnName("TRCcy3");

                entity.Property(e => e.Trccy4).HasColumnName("TRCcy4");

                entity.Property(e => e.Trccy5).HasColumnName("TRCcy5");

                entity.Property(e => e.TrccyFlag)
                    .HasMaxLength(255)
                    .HasColumnName("TRCCyFlag");

                entity.Property(e => e.Trcont1)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont1");

                entity.Property(e => e.Trcont2)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont2");

                entity.Property(e => e.Trcont3)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont3");

                entity.Property(e => e.Trcont4)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont4");

                entity.Property(e => e.Trcont5)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont5");

                entity.Property(e => e.Trday).HasColumnName("TRDay");

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRDueStatus");

                entity.Property(e => e.Trexch1).HasColumnName("TRExch1");

                entity.Property(e => e.Trexch2).HasColumnName("TRExch2");

                entity.Property(e => e.Trexch3).HasColumnName("TRExch3");

                entity.Property(e => e.Trexch4).HasColumnName("TRExch4");

                entity.Property(e => e.Trexch5).HasColumnName("TRExch5");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(255)
                    .HasColumnName("TRFLAG");

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(255)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trprofit).HasColumnName("TRProfit");

                entity.Property(e => e.Trrate)
                    .HasMaxLength(255)
                    .HasColumnName("TRRate");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.Trstatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRStatus");

                entity.Property(e => e.TrtermDay).HasColumnName("TRTermDay");

                entity.Property(e => e.Tx23E).HasMaxLength(255);

                entity.Property(e => e.Tx26).HasMaxLength(255);

                entity.Property(e => e.Tx59A).HasMaxLength(255);

                entity.Property(e => e.Tx59Cnty).HasMaxLength(255);

                entity.Property(e => e.Tx59D).HasMaxLength(255);

                entity.Property(e => e.Tx71A).HasMaxLength(255);

                entity.Property(e => e.Tx72).HasMaxLength(255);

                entity.Property(e => e.UnderlyName).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(255);

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImtr3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pIMTR3");

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.Aocode).HasColumnName("AOCode");

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.AutoOverDue).HasMaxLength(255);

                entity.Property(e => e.Bladvice).HasColumnName("BLAdvice");

                entity.Property(e => e.Blbalance).HasColumnName("BLBalance");

                entity.Property(e => e.Blbase).HasColumnName("BLBase");

                entity.Property(e => e.Blday).HasColumnName("BLDay");

                entity.Property(e => e.Blexch).HasColumnName("BLExch");

                entity.Property(e => e.Blfwd).HasColumnName("BLFwd");

                entity.Property(e => e.BlintAmt).HasColumnName("BLIntAmt");

                entity.Property(e => e.BlintCode).HasColumnName("BLIntCode");

                entity.Property(e => e.BlintRate).HasColumnName("BLIntRate");

                entity.Property(e => e.BlintStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLIntStartDate");

                entity.Property(e => e.Blinterest).HasColumnName("BLInterest");

                entity.Property(e => e.Blnumber).HasColumnName("BLNumber");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.CampaignCode).HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct).HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref).HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum).HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType).HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId).HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate).HasColumnName("CFRRate");

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("datetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("datetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasColumnType("datetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.Doamount).HasColumnName("DOAmount");

                entity.Property(e => e.DocCcy).HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag).HasMaxLength(255);

                entity.Property(e => e.EventMode).HasMaxLength(255);

                entity.Property(e => e.Fbccy).HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbengage).HasColumnName("FBEngage");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcyAcNo).HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(255)
                    .HasColumnName("FCyPayFlag");

                entity.Property(e => e.FcyReceiptNo).HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag).HasMaxLength(255);

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.Ibcrate).HasColumnName("IBCRate");

                entity.Property(e => e.InUse).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntPayType).HasMaxLength(255);

                entity.Property(e => e.IntStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastIntDate).HasColumnType("datetime");

                entity.Property(e => e.Lcnumber).HasColumnName("LCNumber");

                entity.Property(e => e.Locode).HasColumnName("LOCode");

                entity.Property(e => e.Mtnego)
                    .HasMaxLength(255)
                    .HasColumnName("MTNego");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(255)
                    .HasColumnName("MTType");

                entity.Property(e => e.Nego799).HasMaxLength(255);

                entity.Property(e => e.Nego999).HasMaxLength(255);

                entity.Property(e => e.NegoTelex).HasMaxLength(255);

                entity.Property(e => e.NostAcinfo).HasColumnName("NostACInfo");

                entity.Property(e => e.OverdueDate).HasColumnType("datetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("datetime");

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.PayType).HasMaxLength(255);

                entity.Property(e => e.PrevDueDate).HasColumnType("datetime");

                entity.Property(e => e.PrevFbchrg).HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbeng).HasColumnName("PrevFBEng");

                entity.Property(e => e.PrevFbint).HasColumnName("PrevFBInt");

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.RecType).HasMaxLength(255);

                entity.Property(e => e.SettleDate).HasColumnType("datetime");

                entity.Property(e => e.Sgamount).HasColumnName("SGAmount");

                entity.Property(e => e.Sgnumber).HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1).HasColumnName("SGNumber1");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.Tramount).HasColumnName("TRAmount");

                entity.Property(e => e.Tramt1).HasColumnName("TRAmt1");

                entity.Property(e => e.Tramt2).HasColumnName("TRAmt2");

                entity.Property(e => e.Tramt3).HasColumnName("TRAmt3");

                entity.Property(e => e.Tramt4).HasColumnName("TRAmt4");

                entity.Property(e => e.Tramt5).HasColumnName("TRAmt5");

                entity.Property(e => e.Trbalance).HasColumnName("TRBalance");

                entity.Property(e => e.Trccy).HasColumnName("TRCcy");

                entity.Property(e => e.Trccy1).HasColumnName("TRCcy1");

                entity.Property(e => e.Trccy2).HasColumnName("TRCcy2");

                entity.Property(e => e.Trccy3).HasColumnName("TRCcy3");

                entity.Property(e => e.Trccy4).HasColumnName("TRCcy4");

                entity.Property(e => e.Trccy5).HasColumnName("TRCcy5");

                entity.Property(e => e.TrccyFlag)
                    .HasMaxLength(255)
                    .HasColumnName("TRCCyFlag");

                entity.Property(e => e.Trcont1).HasColumnName("TRCont1");

                entity.Property(e => e.Trcont2).HasColumnName("TRCont2");

                entity.Property(e => e.Trcont3).HasColumnName("TRCont3");

                entity.Property(e => e.Trcont4).HasColumnName("TRCont4");

                entity.Property(e => e.Trcont5).HasColumnName("TRCont5");

                entity.Property(e => e.Trday).HasColumnName("TRDay");

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRDueStatus");

                entity.Property(e => e.Trexch1).HasColumnName("TRExch1");

                entity.Property(e => e.Trexch2).HasColumnName("TRExch2");

                entity.Property(e => e.Trexch3).HasColumnName("TRExch3");

                entity.Property(e => e.Trexch4).HasColumnName("TRExch4");

                entity.Property(e => e.Trexch5).HasColumnName("TRExch5");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(255)
                    .HasColumnName("TRFLAG");

                entity.Property(e => e.Trnumber).HasColumnName("TRNumber");

                entity.Property(e => e.Trprofit).HasColumnName("TRProfit");

                entity.Property(e => e.Trrate)
                    .HasMaxLength(255)
                    .HasColumnName("TRRate");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.Trstatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRStatus");

                entity.Property(e => e.TrtermDay).HasColumnName("TRTermDay");

                entity.Property(e => e.Tx26).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.ValueDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PImtrinvoice>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.InvNumber, e.InvStatus });

                entity.ToTable("pIMTRInvoice");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.InvNumber).HasMaxLength(26);

                entity.Property(e => e.InvStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InvCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InvDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvGroup).HasMaxLength(4);

                entity.Property(e => e.InvSupply).HasMaxLength(150);

                entity.Property(e => e.LastUpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UserDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PImtrtext>(entity =>
            {
                entity.HasKey(e => new { e.RefNumber, e.Seqno });

                entity.ToTable("pIMTRText");

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.Text79).HasMaxLength(2100);

                entity.Property(e => e.Text791)
                    .HasMaxLength(2100)
                    .HasColumnName("Text79_1");

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(15)
                    .HasColumnName("TRNumber");
            });

            modelBuilder.Entity<PInstall>(entity =>
            {
                entity.HasKey(e => new { e.LcNo, e.SeqNo });

                entity.ToTable("pInstall");

                entity.Property(e => e.LcNo)
                    .HasMaxLength(15)
                    .HasColumnName("LC_NO");

                entity.Property(e => e.SeqNo).HasColumnName("SEQ_NO");

                entity.Property(e => e.Amt).HasColumnName("AMT");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DUE_DATE");
            });

            modelBuilder.Entity<PIntRate>(entity =>
            {
                entity.HasKey(e => new { e.IrateCode, e.IrateEffDate, e.IrateEffTime })
                    .HasName("PK_pInterestRate");

                entity.ToTable("pIntRate");

                entity.Property(e => e.IrateCode)
                    .HasMaxLength(10)
                    .HasColumnName("IRate_Code");

                entity.Property(e => e.IrateEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("IRate_EffDate");

                entity.Property(e => e.IrateEffTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("IRate_EffTime")
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.Batch)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IrateRate)
                    .HasColumnName("IRate_Rate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogBatch>(entity =>
            {
                entity.HasKey(e => e.RunDate);

                entity.ToTable("pLogBatch");

                entity.Property(e => e.RunDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoPastDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Ccsreve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CCSReve")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenAccru)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenAmort)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenBpocam)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GenBPOCam")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenFcd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenFloat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenMapSap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.GenSapErp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GenSapERP")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.ImpMidRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.LastTime).HasMaxLength(5);

                entity.Property(e => e.PostAccru)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.StartTime).HasMaxLength(5);

                entity.Property(e => e.SumSap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PLogConnect1P>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_Connect1P");

                entity.HasIndex(e => new { e.TrType, e.TrEvent, e.TrRefSeq, e.RqDate, e.Actype, e.Acno, e.Acamt }, "IX_pLog_Connect1P_1");

                entity.HasIndex(e => new { e.TrType, e.RqDate, e.RqSeq, e.Actype, e.Acno, e.Acamt }, "IX_pLog_Connect1P_2");

                entity.HasIndex(e => new { e.TrType, e.TrEvent, e.TrRefSeq, e.RqDate, e.RqSeq, e.Actype, e.Acno, e.Acamt }, "IX_pLog_Connect1P_3");

                entity.Property(e => e.AcName).HasMaxLength(50);

                entity.Property(e => e.Acamt).HasColumnName("ACAmt");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.Autoseq).HasColumnName("autoseq");

                entity.Property(e => e.OnePreturn)
                    .HasMaxLength(100)
                    .HasColumnName("OnePReturn");

                entity.Property(e => e.RqAppheader)
                    .HasMaxLength(106)
                    .HasColumnName("RqAPPHeader");

                entity.Property(e => e.RqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RqDetail).HasMaxLength(1284);

                entity.Property(e => e.RqDspheader)
                    .HasMaxLength(312)
                    .HasColumnName("RqDSPHeader");

                entity.Property(e => e.RqTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RsDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RsMsg).HasMaxLength(2048);

                entity.Property(e => e.RsTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SumLog).HasMaxLength(50);

                entity.Property(e => e.TrEvent)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TrRefSeq)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<PLogCustLiab>(entity =>
            {
                entity.HasKey(e => new { e.LogDate, e.LogTime, e.LogUser, e.LogRec, e.CustCode, e.FacilityNo, e.Currency });

                entity.ToTable("pLog_CustLiab");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LogUser).HasMaxLength(12);

                entity.Property(e => e.LogRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_Amt");

                entity.Property(e => e.DlcBook).HasColumnName("DLC_Book");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.TrsBook).HasColumnName("TRS_Book");

                entity.Property(e => e.TrtrsAmt).HasColumnName("TRTRS_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PLogErrorConnect1P>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_ErrorConnect1P");

                entity.Property(e => e.Acamt).HasColumnName("ACAmt");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.Autoseq).HasColumnName("autoseq");

                entity.Property(e => e.ErrMsg).HasMaxLength(700);

                entity.Property(e => e.OnePreturn)
                    .HasMaxLength(100)
                    .HasColumnName("OnePReturn");

                entity.Property(e => e.RqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RqTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SumLog).HasMaxLength(50);

                entity.Property(e => e.TrEvent)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TrRefSeq)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<PLogFcdAccount>(entity =>
            {
                entity.HasKey(e => new { e.LogDate, e.LogTime });

                entity.ToTable("pLogFcdAccount");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogTime).HasMaxLength(8);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.LogComp).HasMaxLength(20);

                entity.Property(e => e.LogCustCode)
                    .HasMaxLength(6)
                    .HasColumnName("LogCust_Code");

                entity.Property(e => e.LogEvent).HasMaxLength(30);

                entity.Property(e => e.LogFcdAccNo).HasMaxLength(13);

                entity.Property(e => e.LogFcdRef).HasMaxLength(20);

                entity.Property(e => e.LogStatus).HasMaxLength(50);

                entity.Property(e => e.LogUser).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogImportCb>(entity =>
            {
                entity.HasKey(e => new { e.PostDate, e.LogFileName });

                entity.ToTable("pLog_ImportCBS");

                entity.Property(e => e.PostDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LogFileName).HasMaxLength(100);

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogReDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogReUser).HasMaxLength(8);

                entity.Property(e => e.LogRerun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LogStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PLogLoadText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLogLoadText");

                entity.Property(e => e.BatchName).HasMaxLength(20);

                entity.Property(e => e.EndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StartTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PLogMainConnect1P>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_MainConnect1P");

                entity.HasIndex(e => new { e.TrType, e.TrEvent, e.TrRefSeq, e.RqDate, e.Actype, e.Acno, e.Acamt }, "IX_pLog_MainConnect1P_1");

                entity.HasIndex(e => new { e.TrType, e.RqDate, e.RqSeq, e.Actype, e.Acno, e.Acamt }, "IX_pLog_MainConnect1P_2");

                entity.HasIndex(e => new { e.TrType, e.TrEvent, e.TrRefSeq, e.RqDate, e.RqSeq, e.Actype, e.Acno, e.Acamt }, "IX_pLog_MainConnect1P_3");

                entity.Property(e => e.AcName).HasMaxLength(50);

                entity.Property(e => e.Acamt).HasColumnName("ACAmt");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.Autoseq).HasColumnName("autoseq");

                entity.Property(e => e.OnePreturn)
                    .HasMaxLength(100)
                    .HasColumnName("OnePReturn");

                entity.Property(e => e.RqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RqTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RsDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RsTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SumLog).HasMaxLength(50);

                entity.Property(e => e.TrEvent)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TrRefSeq)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<PLogMasterOut>(entity =>
            {
                entity.HasKey(e => new { e.LogDate, e.LogTime, e.LogUser, e.Module, e.KeyNumber });

                entity.ToTable("pLog_MasterOut");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LogUser).HasMaxLength(12);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCy");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastEvent).HasMaxLength(25);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.Reference).HasMaxLength(20);
            });

            modelBuilder.Entity<PLogQueryAc1p>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_QueryAC1P");

                entity.HasIndex(e => new { e.Actype, e.Acno, e.RqSeq, e.RsDate }, "IX_pLog_QueryAC1P_1");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.OnePreturn)
                    .HasMaxLength(100)
                    .HasColumnName("OnePReturn");

                entity.Property(e => e.RqAppheader)
                    .HasMaxLength(106)
                    .HasColumnName("RqAPPHeader");

                entity.Property(e => e.RqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RqDetail).HasMaxLength(1284);

                entity.Property(e => e.RqDspheader)
                    .HasMaxLength(312)
                    .HasColumnName("RqDSPHeader");

                entity.Property(e => e.RqTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RsAcavBal).HasColumnName("RsACAvBal");

                entity.Property(e => e.RsAcname)
                    .HasMaxLength(50)
                    .HasColumnName("RsACName");

                entity.Property(e => e.RsDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RsMsg).HasMaxLength(2048);

                entity.Property(e => e.RsTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SumLog).HasMaxLength(50);
            });

            modelBuilder.Entity<PLogRequest1P>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_Request1P");

                entity.HasIndex(e => new { e.TrType, e.TrEvent, e.TrRefSeq, e.TrRqDate, e.TrRqSeq, e.Actype, e.Acno, e.Acamt }, "IX_pLog_Request1P_1");

                entity.Property(e => e.Acamt).HasColumnName("ACAmt");

                entity.Property(e => e.Acno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.TrEvent)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TrRefSeq)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TrRqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<PLogSendMail>(entity =>
            {
                entity.HasKey(e => new { e.SendDate, e.SendTime })
                    .HasName("PK_pLogSendMail");

                entity.ToTable("pLog_SendMail");

                entity.Property(e => e.SendDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SendTime).HasMaxLength(8);

                entity.Property(e => e.Response).HasMaxLength(500);

                entity.Property(e => e.SendBcc)
                    .HasMaxLength(300)
                    .HasColumnName("SendBCC");

                entity.Property(e => e.SendCc)
                    .HasMaxLength(300)
                    .HasColumnName("SendCC");

                entity.Property(e => e.SendFile1).HasMaxLength(100);

                entity.Property(e => e.SendFile2).HasMaxLength(100);

                entity.Property(e => e.SendFile3).HasMaxLength(100);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SendMod).HasMaxLength(10);

                entity.Property(e => e.SendMsg).HasColumnName("SendMSG");

                entity.Property(e => e.SendPass).HasMaxLength(100);

                entity.Property(e => e.SendSjb)
                    .HasMaxLength(500)
                    .HasColumnName("SendSJB");

                entity.Property(e => e.SendTo)
                    .HasMaxLength(300)
                    .HasColumnName("SendTO");

                entity.Property(e => e.SendUser).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogSendMail1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pLog_SendMail1");

                entity.Property(e => e.Response).HasMaxLength(500);

                entity.Property(e => e.SendBcc)
                    .HasMaxLength(300)
                    .HasColumnName("SendBCC");

                entity.Property(e => e.SendCc)
                    .HasMaxLength(300)
                    .HasColumnName("SendCC");

                entity.Property(e => e.SendDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SendFile1).HasMaxLength(100);

                entity.Property(e => e.SendFile2).HasMaxLength(100);

                entity.Property(e => e.SendFile3).HasMaxLength(100);

                entity.Property(e => e.SendMod).HasMaxLength(10);

                entity.Property(e => e.SendMsg).HasColumnName("SendMSG");

                entity.Property(e => e.SendSjb)
                    .HasMaxLength(500)
                    .HasColumnName("SendSJB");

                entity.Property(e => e.SendTime).HasMaxLength(8);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(300)
                    .HasColumnName("SendTO");

                entity.Property(e => e.SendUser).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogSwift>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.RefNo, e.SeqNo });

                entity.ToTable("pLog_Swift");

                entity.HasIndex(e => new { e.RefNo, e.SeqNo }, "ID_pLog_Swift_1");

                entity.HasIndex(e => e.RefNo, "ID_pLog_Swift_2");

                entity.Property(e => e.FileName).HasMaxLength(35);

                entity.Property(e => e.RefNo).HasMaxLength(16);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ErrCode).HasMaxLength(20);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.LoadDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadFile).HasMaxLength(100);

                entity.Property(e => e.Login).HasMaxLength(5);

                entity.Property(e => e.Resend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SendDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasMaxLength(3);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogSwiftInDetail>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.SwiftInId, e.SwiftInType, e.RunLineNo });

                entity.ToTable("pLog_SwiftInDetail");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.SwiftInId)
                    .HasMaxLength(30)
                    .HasColumnName("SwiftInID");

                entity.Property(e => e.SwiftInType).HasMaxLength(3);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FieldNo).HasMaxLength(6);

                entity.Property(e => e.LoadDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PLogSwiftInFile>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.FileDate });

                entity.ToTable("pLog_SwiftInFile");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.FileDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<PLogSwiftInHead>(entity =>
            {
                entity.HasKey(e => e.SwiftInId)
                    .HasName("PK_pLog_SwiftHead");

                entity.ToTable("pLog_SwiftInHead");

                entity.Property(e => e.SwiftInId)
                    .HasMaxLength(30)
                    .HasColumnName("SwiftInID");

                entity.Property(e => e.FromBank).HasMaxLength(13);

                entity.Property(e => e.Head1).HasMaxLength(60);

                entity.Property(e => e.Head2).HasMaxLength(60);

                entity.Property(e => e.Head3).HasMaxLength(150);

                entity.Property(e => e.SwiftInType).HasMaxLength(3);
            });

            modelBuilder.Entity<PLogSwiftR>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.FileDate });

                entity.ToTable("pLog_SwiftRS");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.FileDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoadStatus).HasMaxLength(10);
            });

            modelBuilder.Entity<PLogUnlockDoc>(entity =>
            {
                entity.HasKey(e => new { e.UnDate, e.UnTime });

                entity.ToTable("pLog_UnlockDoc");

                entity.Property(e => e.UnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnDetail).HasMaxLength(500);

                entity.Property(e => e.UnFunc).HasMaxLength(100);

                entity.Property(e => e.UnRefNo).HasMaxLength(15);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PLogUser>(entity =>
            {
                entity.HasKey(e => new { e.LogDate, e.LogTime, e.SeqNo, e.UserCode })
                    .HasName("PK_pLogIn");

                entity.ToTable("pLogUser");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ComName).HasMaxLength(20);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<PMasterDailyOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pMasterDailyOuts");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCy");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gfbcint)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCInt");

                entity.Property(e => e.Gfbcouts)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCOuts");

                entity.Property(e => e.GfmsaccInt)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccInt");

                entity.Property(e => e.GfmsaccOuts)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccOuts");

                entity.Property(e => e.Gfmsbran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMSBran");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.LastEvent).HasMaxLength(25);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.LiabType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.OutsDate).HasMaxLength(10);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdCode).HasMaxLength(5);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(5)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.Rmcode)
                    .HasMaxLength(10)
                    .HasColumnName("RMCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(5)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SubProduct).HasMaxLength(5);

                entity.Property(e => e.TenorDay).HasMaxLength(4);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TENOR_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PMasterDailyOuts1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pMasterDailyOuts1");

                entity.Property(e => e.AccruCcy).HasMaxLength(255);

                entity.Property(e => e.AccruPending).HasMaxLength(255);

                entity.Property(e => e.BalanceAmt).HasMaxLength(255);

                entity.Property(e => e.Ccy)
                    .HasMaxLength(255)
                    .HasColumnName("CCy");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.FlagDue).HasMaxLength(255);

                entity.Property(e => e.Gfbcint)
                    .HasMaxLength(255)
                    .HasColumnName("GFBCInt");

                entity.Property(e => e.Gfbcouts)
                    .HasMaxLength(255)
                    .HasColumnName("GFBCOuts");

                entity.Property(e => e.GfmsaccInt)
                    .HasMaxLength(255)
                    .HasColumnName("GFMSAccInt");

                entity.Property(e => e.GfmsaccOuts)
                    .HasMaxLength(255)
                    .HasColumnName("GFMSAccOuts");

                entity.Property(e => e.Gfmsbran)
                    .HasMaxLength(255)
                    .HasColumnName("GFMSBran");

                entity.Property(e => e.IntRate)
                    .HasMaxLength(255)
                    .HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(255);

                entity.Property(e => e.LastEvent).HasMaxLength(255);

                entity.Property(e => e.LastPayment).HasMaxLength(255);

                entity.Property(e => e.LiabType).HasMaxLength(255);

                entity.Property(e => e.Module).HasMaxLength(255);

                entity.Property(e => e.OriginalAmt).HasMaxLength(255);

                entity.Property(e => e.OutsDate).HasMaxLength(255);

                entity.Property(e => e.OverdueDate).HasMaxLength(255);

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.ProdCode).HasMaxLength(255);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(255)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Reference).HasMaxLength(255);

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.Rmcode)
                    .HasMaxLength(255)
                    .HasColumnName("RMCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(255)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SubProduct).HasMaxLength(255);

                entity.Property(e => e.TenorDay).HasMaxLength(255);

                entity.Property(e => e.TenorType).HasMaxLength(255);

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(255)
                    .HasColumnName("TENOR_TYPE");

                entity.Property(e => e.WithOutFlag).HasMaxLength(255);

                entity.Property(e => e.WithOutType).HasMaxLength(255);
            });

            modelBuilder.Entity<PMasterDailyOuts2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pMasterDailyOuts2");

                entity.Property(e => e.Ccy).HasColumnName("CCy");

                entity.Property(e => e.FlagDue).HasMaxLength(255);

                entity.Property(e => e.Gfbcint).HasColumnName("GFBCInt");

                entity.Property(e => e.Gfbcouts).HasColumnName("GFBCOuts");

                entity.Property(e => e.GfmsaccInt).HasColumnName("GFMSAccInt");

                entity.Property(e => e.GfmsaccOuts).HasColumnName("GFMSAccOuts");

                entity.Property(e => e.Gfmsbran).HasColumnName("GFMSBran");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.LastPayment).HasColumnType("datetime");

                entity.Property(e => e.LiabType).HasMaxLength(255);

                entity.Property(e => e.OverdueDate).HasColumnType("datetime");

                entity.Property(e => e.PastDueDate).HasColumnType("datetime");

                entity.Property(e => e.Rccode).HasColumnName("RCCode");

                entity.Property(e => e.Rmcode).HasColumnName("RMCode");

                entity.Property(e => e.Sbucode).HasColumnName("SBUCode");

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(255)
                    .HasColumnName("TENOR_TYPE");

                entity.Property(e => e.WithOutFlag).HasMaxLength(255);

                entity.Property(e => e.WithOutType).HasMaxLength(255);
            });

            modelBuilder.Entity<PMidRate>(entity =>
            {
                entity.HasKey(e => new { e.RateDate, e.RateTime, e.RateCcy });

                entity.ToTable("pMidRate");

                entity.Property(e => e.RateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Rate_Date");

                entity.Property(e => e.RateTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Rate_Time")
                    .IsFixedLength(true);

                entity.Property(e => e.RateCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Rate_Ccy");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.RateMidRate).HasColumnName("Rate_MidRate");

                entity.Property(e => e.RateReuter).HasColumnName("Rate_Reuter");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PMisctran>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.RefNumber, e.Seqno });

                entity.ToTable("pMISCTran");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AcAddr).HasMaxLength(144);

                entity.Property(e => e.AcBank).HasMaxLength(14);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BenAddr).HasMaxLength(144);

                entity.Property(e => e.BenBank).HasMaxLength(14);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChipAcBank).HasMaxLength(14);

                entity.Property(e => e.ChipBenBank).HasMaxLength(14);

                entity.Property(e => e.ChipInterm).HasMaxLength(14);

                entity.Property(e => e.CommCcy).HasColumnName("CommCCy");

                entity.Property(e => e.CommFee).HasColumnName("Comm_Fee");

                entity.Property(e => e.CommOther1).HasColumnName("Comm_Other");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateGenAc).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocCommCcy).HasDefaultValueSql("(0)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocFbcharge).HasColumnName("DocFBCharge");

                entity.Property(e => e.DocFbinterest).HasColumnName("DocFBInterest");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(3)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcdacNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDAcNo");

                entity.Property(e => e.FcdreceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDReceiptNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntermAddr).HasMaxLength(144);

                entity.Property(e => e.IntermBank).HasMaxLength(14);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MTType")
                    .IsFixedLength(true);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReimBank).HasMaxLength(14);

                entity.Property(e => e.ReimRefNo).HasMaxLength(16);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tx72).HasMaxLength(432);

                entity.Property(e => e.Tx79).HasMaxLength(2100);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PMonAccrued>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.DocNo, e.DocMode, e.Seqno })
                    .HasName("PK_pAccrInterest");

                entity.ToTable("pMonAccrued");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.DocMode).HasMaxLength(20);

                entity.Property(e => e.BankType).HasMaxLength(14);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocBank).HasMaxLength(14);

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.DocRefer).HasMaxLength(15);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.IntCode).HasMaxLength(10);

                entity.Property(e => e.IntFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.IntTo).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PMonCustInvoice>(entity =>
            {
                entity.HasKey(e => new { e.DocMon, e.DocMod, e.KeyNumber })
                    .HasName("PK_pTmpInvoice");

                entity.ToTable("pMonCustInvoice");

                entity.Property(e => e.DocMon).HasMaxLength(7);

                entity.Property(e => e.DocMod).HasMaxLength(4);

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCy")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DocNumer).HasMaxLength(20);

                entity.Property(e => e.DocType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastRunDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RptFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PMonthlyInterest>(entity =>
            {
                entity.HasKey(e => new { e.DocMonth, e.DocSeq });

                entity.ToTable("pMonthlyInterest");

                entity.Property(e => e.DocMonth).HasMaxLength(7);

                entity.Property(e => e.Atscode)
                    .HasMaxLength(2)
                    .HasColumnName("ATSCode");

                entity.Property(e => e.Atsdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ATSDate");

                entity.Property(e => e.BatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DebitAcc)
                    .HasMaxLength(15)
                    .HasColumnName("DebitACC");

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.DocRefer).HasMaxLength(15);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.IntCode).HasMaxLength(10);

                entity.Property(e => e.IntFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.IntThb).HasColumnName("IntTHB");

                entity.Property(e => e.IntTo).HasColumnType("smalldatetime");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpReceipt).HasMaxLength(15);
            });

            modelBuilder.Entity<POnlunMatchCust>(entity =>
            {
                entity.HasKey(e => new { e.AccessId, e.TradeRefNumber, e.EditionNumber })
                    .HasName("PK_pMatchCustSucess");

                entity.ToTable("pONLUnMatchCust");

                entity.Property(e => e.AccessId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ID");

                entity.Property(e => e.TradeRefNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Trade_ref_Number");

                entity.Property(e => e.EditionNumber)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Edition_Number");

                entity.Property(e => e.Cif)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PPayDetail>(entity =>
            {
                entity.HasKey(e => new { e.DpReceiptNo, e.DpSeq });

                entity.ToTable("pPayDetail");

                entity.Property(e => e.DpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.DpContract).HasMaxLength(20);

                entity.Property(e => e.DpFromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DpPayName).HasMaxLength(80);

                entity.Property(e => e.DpRemark).HasMaxLength(200);

                entity.Property(e => e.DpToDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PPayment>(entity =>
            {
                entity.HasKey(e => e.RpReceiptNo);

                entity.ToTable("pPayment");

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RpApplicant).HasMaxLength(70);

                entity.Property(e => e.RpChqBank).HasMaxLength(10);

                entity.Property(e => e.RpChqBranch).HasMaxLength(25);

                entity.Property(e => e.RpChqNo).HasMaxLength(15);

                entity.Property(e => e.RpCustAc1).HasMaxLength(15);

                entity.Property(e => e.RpCustAc2).HasMaxLength(15);

                entity.Property(e => e.RpCustAc3).HasMaxLength(15);

                entity.Property(e => e.RpCustCode).HasMaxLength(6);

                entity.Property(e => e.RpDocNo).HasMaxLength(15);

                entity.Property(e => e.RpEvent).HasMaxLength(20);

                entity.Property(e => e.RpIssBank).HasMaxLength(70);

                entity.Property(e => e.RpModule).HasMaxLength(5);

                entity.Property(e => e.RpNote).HasMaxLength(200);

                entity.Property(e => e.RpPayBy).HasMaxLength(15);

                entity.Property(e => e.RpPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RpPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RpRecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RpRefer1).HasMaxLength(70);

                entity.Property(e => e.RpRefer2).HasMaxLength(70);

                entity.Property(e => e.RpStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PReferenceNo>(entity =>
            {
                entity.HasKey(e => new { e.PRefTrans, e.PRefBran, e.PRefYear, e.PRefPrefix });

                entity.ToTable("pReferenceNo");

                entity.Property(e => e.PRefTrans)
                    .HasMaxLength(6)
                    .HasColumnName("pRefTrans");

                entity.Property(e => e.PRefBran)
                    .HasMaxLength(4)
                    .HasColumnName("pRefBran");

                entity.Property(e => e.PRefYear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("pRefYear")
                    .IsFixedLength(true);

                entity.Property(e => e.PRefPrefix)
                    .HasMaxLength(5)
                    .HasColumnName("pRefPrefix");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.PRefSeq)
                    .HasColumnName("pRefSeq")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PRefinance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pRefinance");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReFinanceFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ReFinance_Flag")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PRemCleanBill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pRemCleanBill");

                entity.Property(e => e.AgentName).HasMaxLength(500);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BankType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChqBank).HasMaxLength(10);

                entity.Property(e => e.ChqBranch).HasMaxLength(25);

                entity.Property(e => e.ChqNo).HasMaxLength(15);

                entity.Property(e => e.Cicdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CICDate");

                entity.Property(e => e.ClbhtAmt).HasColumnName("CLBhtAmt");

                entity.Property(e => e.Clccy)
                    .HasMaxLength(3)
                    .HasColumnName("CLCCy");

                entity.Property(e => e.ClccyAmt).HasColumnName("CLCcyAmt");

                entity.Property(e => e.Clnumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("CLNumber");

                entity.Property(e => e.CollectBank).HasMaxLength(20);

                entity.Property(e => e.CollectType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Collect_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.CommCic).HasColumnName("CommCIC");

                entity.Property(e => e.CommCip).HasColumnName("CommCIP");

                entity.Property(e => e.CustAc1)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AC1");

                entity.Property(e => e.CustAc2)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AC2");

                entity.Property(e => e.CustAc3)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AC3");

                entity.Property(e => e.CustAddr)
                    .HasMaxLength(500)
                    .HasColumnName("Cust_Addr");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Info");

                entity.Property(e => e.CustTotal1).HasColumnName("Cust_Total1");

                entity.Property(e => e.CustTotal2).HasColumnName("Cust_Total2");

                entity.Property(e => e.CustTotal3).HasColumnName("Cust_Total3");

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DatePaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Description).HasMaxLength(15);

                entity.Property(e => e.Event).HasMaxLength(20);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fcdacno)
                    .HasMaxLength(75)
                    .HasColumnName("FCDACNo");

                entity.Property(e => e.Fcdamt).HasColumnName("FCDAmt");

                entity.Property(e => e.FcdrecNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDRecNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MixPayment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(25);

                entity.Property(e => e.PaySubType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Plexchange).HasColumnName("PLExchange");

                entity.Property(e => e.RateType).HasMaxLength(1);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.ResultType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Result_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranResult).HasMaxLength(15);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PRemCleanBillCcy>(entity =>
            {
                entity.HasKey(e => new { e.Clnumber, e.RecType, e.SeqNo, e.BranCode })
                    .IsClustered(false);

                entity.ToTable("pRemCleanBillCCY");

                entity.Property(e => e.Clnumber)
                    .HasMaxLength(15)
                    .HasColumnName("CLNumber");

                entity.Property(e => e.RecType).HasMaxLength(10);

                entity.Property(e => e.BranCode).HasMaxLength(3);

                entity.Property(e => e.Cicdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CICDate");

                entity.Property(e => e.Clbcomm).HasColumnName("CLBComm");

                entity.Property(e => e.Description).HasMaxLength(15);
            });

            modelBuilder.Entity<PRemPartial>(entity =>
            {
                entity.HasKey(e => new { e.RemRefNo, e.SeqNo });

                entity.ToTable("pRemPartial");

                entity.Property(e => e.RemRefNo).HasMaxLength(16);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.RmForward).HasMaxLength(15);
            });

            modelBuilder.Entity<PRemSwmap>(entity =>
            {
                entity.HasKey(e => e.SwifInId);

                entity.ToTable("pRemSWMap");

                entity.Property(e => e.SwifInId)
                    .HasMaxLength(50)
                    .HasColumnName("SwifInID");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCY");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLag")
                    .IsFixedLength(true);

                entity.Property(e => e.Sender).HasMaxLength(15);

                entity.Property(e => e.SenderName).HasMaxLength(145);

                entity.Property(e => e.SwiftDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SwiftMt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SwiftMT")
                    .IsFixedLength(true);

                entity.Property(e => e.Tag20).HasMaxLength(16);

                entity.Property(e => e.Tag50).HasMaxLength(35);

                entity.Property(e => e.Tag50D).HasMaxLength(145);

                entity.Property(e => e.Tag52).HasMaxLength(145);

                entity.Property(e => e.Tag53).HasMaxLength(15);

                entity.Property(e => e.Tag54).HasMaxLength(15);

                entity.Property(e => e.Tag57).HasMaxLength(145);

                entity.Property(e => e.Tag59).HasMaxLength(35);

                entity.Property(e => e.Tag59D).HasMaxLength(145);

                entity.Property(e => e.Tag70).HasMaxLength(145);

                entity.Property(e => e.VaDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PRemit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pRemit");

                entity.Property(e => e.Addr53).HasMaxLength(144);

                entity.Property(e => e.Addr54).HasMaxLength(144);

                entity.Property(e => e.Addr56).HasMaxLength(144);

                entity.Property(e => e.Addr57).HasMaxLength(144);

                entity.Property(e => e.Addr58).HasMaxLength(144);

                entity.Property(e => e.Allocation).HasMaxLength(15);

                entity.Property(e => e.AppInfo1).HasMaxLength(35);

                entity.Property(e => e.AppInfo2).HasMaxLength(35);

                entity.Property(e => e.AppInfo3).HasMaxLength(35);

                entity.Property(e => e.AppInfo4).HasMaxLength(35);

                entity.Property(e => e.AppvNo).HasMaxLength(13);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bank53).HasMaxLength(14);

                entity.Property(e => e.Bank54).HasMaxLength(14);

                entity.Property(e => e.Bank56).HasMaxLength(14);

                entity.Property(e => e.Bank57).HasMaxLength(14);

                entity.Property(e => e.Bank58).HasMaxLength(14);

                entity.Property(e => e.BhtNet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CommBnet).HasColumnName("CommBNet");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo1).HasMaxLength(35);

                entity.Property(e => e.CustInfo2).HasMaxLength(140);

                entity.Property(e => e.CustLo)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_LO");

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DatePaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23e)
                    .HasMaxLength(4)
                    .HasColumnName("F23E");

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F32a)
                    .HasMaxLength(28)
                    .HasColumnName("F32A");

                entity.Property(e => e.F33b)
                    .HasMaxLength(28)
                    .HasColumnName("F33B");

                entity.Property(e => e.F70).HasMaxLength(140);

                entity.Property(e => e.F71a)
                    .HasMaxLength(10)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71f)
                    .HasMaxLength(19)
                    .HasColumnName("F71F");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fcddesc)
                    .HasMaxLength(75)
                    .HasColumnName("FCDDesc");

                entity.Property(e => e.FcdrecNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDRecNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.GoodsDesc).HasMaxLength(500);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mt103)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT103")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .IsFixedLength(true);

                entity.Property(e => e.PayMainType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PaySubType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RegistDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("Rel_Code");

                entity.Property(e => e.RemAcc).HasMaxLength(35);

                entity.Property(e => e.RemAddr).HasMaxLength(144);

                entity.Property(e => e.RemBank)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.RemBankRefNo).HasMaxLength(20);

                entity.Property(e => e.RemCcy).HasMaxLength(3);

                entity.Property(e => e.RemDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemRefNo)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RemStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RemType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RmFcd).HasColumnName("RmFCD");

                entity.Property(e => e.RmForward).HasMaxLength(15);

                entity.Property(e => e.SenderInfo).HasMaxLength(500);

                entity.Property(e => e.SwiftInfo).HasMaxLength(500);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uid56)
                    .HasMaxLength(10)
                    .HasColumnName("UID56");

                entity.Property(e => e.Uid57)
                    .HasMaxLength(10)
                    .HasColumnName("UID57");

                entity.Property(e => e.Uid58)
                    .HasMaxLength(10)
                    .HasColumnName("UID58");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PRemitBill>(entity =>
            {
                entity.HasKey(e => new { e.RemTranNo, e.RecType, e.SeqNo });

                entity.ToTable("pRemitBill");

                entity.Property(e => e.RemTranNo).HasMaxLength(15);

                entity.Property(e => e.RecType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Addr53).HasMaxLength(144);

                entity.Property(e => e.Addr54).HasMaxLength(144);

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AppInfo).HasMaxLength(140);

                entity.Property(e => e.AppRefNo).HasMaxLength(35);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bank53).HasMaxLength(14);

                entity.Property(e => e.Bank54).HasMaxLength(14);

                entity.Property(e => e.BankRefNo).HasMaxLength(20);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CollectBank).HasMaxLength(14);

                entity.Property(e => e.CommBnet).HasColumnName("CommBNet");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo1).HasMaxLength(35);

                entity.Property(e => e.CustInfo2).HasMaxLength(140);

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DatePaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(20);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23e)
                    .HasMaxLength(4)
                    .HasColumnName("F23E");

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F30).HasMaxLength(13);

                entity.Property(e => e.F32a)
                    .HasMaxLength(19)
                    .HasColumnName("F32A");

                entity.Property(e => e.F59).HasMaxLength(144);

                entity.Property(e => e.Fcdacno)
                    .HasMaxLength(75)
                    .HasColumnName("FCDACNo");

                entity.Property(e => e.FcdrecNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDRecNo");

                entity.Property(e => e.ForwardNo).HasMaxLength(15);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.GoodsDesc).HasMaxLength(500);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MixPayment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mt110)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT110")
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PaySubType).HasMaxLength(1);

                entity.Property(e => e.PrevRefNo).HasMaxLength(35);

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RateType).HasMaxLength(1);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RelateCode).HasMaxLength(6);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.RmCcy).HasMaxLength(3);

                entity.Property(e => e.RmFcd).HasColumnName("RmFCD");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranAddr).HasMaxLength(144);

                entity.Property(e => e.TranBank)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.TranResult).HasMaxLength(15);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uid53)
                    .HasMaxLength(10)
                    .HasColumnName("UID53");

                entity.Property(e => e.Uid54)
                    .HasMaxLength(10)
                    .HasColumnName("UID54");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PRemittance>(entity =>
            {
                entity.HasKey(e => e.RemRefNo);

                entity.ToTable("pRemittance");

                entity.Property(e => e.RemRefNo).HasMaxLength(15);

                entity.Property(e => e.Addr52).HasMaxLength(148);

                entity.Property(e => e.Addr53).HasMaxLength(148);

                entity.Property(e => e.Addr54).HasMaxLength(148);

                entity.Property(e => e.Addr56).HasMaxLength(148);

                entity.Property(e => e.Addr57).HasMaxLength(148);

                entity.Property(e => e.Addr58).HasMaxLength(185);

                entity.Property(e => e.Allocation).HasMaxLength(15);

                entity.Property(e => e.AppInfo1).HasMaxLength(35);

                entity.Property(e => e.AppInfo2).HasMaxLength(35);

                entity.Property(e => e.AppInfo3).HasMaxLength(35);

                entity.Property(e => e.AppInfo4).HasMaxLength(35);

                entity.Property(e => e.AppvNo).HasMaxLength(13);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Bank52).HasMaxLength(14);

                entity.Property(e => e.Bank53).HasMaxLength(14);

                entity.Property(e => e.Bank53B).HasMaxLength(34);

                entity.Property(e => e.Bank54).HasMaxLength(14);

                entity.Property(e => e.Bank54B).HasMaxLength(34);

                entity.Property(e => e.Bank56).HasMaxLength(14);

                entity.Property(e => e.Bank57).HasMaxLength(14);

                entity.Property(e => e.Bank58).HasMaxLength(14);

                entity.Property(e => e.BhtNet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cf50)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CF50")
                    .IsFixedLength(true);

                entity.Property(e => e.Cf59)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CF59")
                    .IsFixedLength(true);

                entity.Property(e => e.CommBnet).HasColumnName("CommBNet");

                entity.Property(e => e.Cov202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustAo)
                    .HasMaxLength(5)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo1).HasMaxLength(35);

                entity.Property(e => e.CustInfo2).HasMaxLength(140);

                entity.Property(e => e.CustLo)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_LO");

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DatePaid).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExchRate).HasDefaultValueSql("(0)");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23e)
                    .HasMaxLength(4)
                    .HasColumnName("F23E");

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F32a)
                    .HasMaxLength(28)
                    .HasColumnName("F32A");

                entity.Property(e => e.F33b)
                    .HasMaxLength(28)
                    .HasColumnName("F33B");

                entity.Property(e => e.F50k)
                    .HasMaxLength(148)
                    .HasColumnName("F50K");

                entity.Property(e => e.F59).HasMaxLength(148);

                entity.Property(e => e.F70).HasMaxLength(148);

                entity.Property(e => e.F71a)
                    .HasMaxLength(10)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71adch)
                    .HasMaxLength(50)
                    .HasColumnName("F71Adch");

                entity.Property(e => e.F71f)
                    .HasMaxLength(19)
                    .HasColumnName("F71F");

                entity.Property(e => e.F72).HasMaxLength(222);

                entity.Property(e => e.Famt71).HasColumnName("FAmt71");

                entity.Property(e => e.Fbamt).HasColumnName("FBAmt");

                entity.Property(e => e.FbamtThb).HasColumnName("FBAmtThb");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbrate).HasColumnName("FBRate");

                entity.Property(e => e.Fcddesc)
                    .HasMaxLength(75)
                    .HasColumnName("FCDDesc");

                entity.Property(e => e.FcdrecNo)
                    .HasMaxLength(15)
                    .HasColumnName("FCDRecNo");

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GoodsCode).HasMaxLength(3);

                entity.Property(e => e.GoodsDesc).HasMaxLength(500);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mt103)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT103")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .IsFixedLength(true);

                entity.Property(e => e.PayMainType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PaySubType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PurposeCode).HasMaxLength(6);

                entity.Property(e => e.RateFlag).HasMaxLength(50);

                entity.Property(e => e.RateRemark).HasMaxLength(50);

                entity.Property(e => e.RateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RegistDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(6)
                    .HasColumnName("Rel_Code");

                entity.Property(e => e.RemAcc).HasMaxLength(35);

                entity.Property(e => e.RemAddr).HasMaxLength(144);

                entity.Property(e => e.RemBank)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.RemBankRefNo).HasMaxLength(20);

                entity.Property(e => e.RemCcy).HasMaxLength(3);

                entity.Property(e => e.RemDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RemType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RmFcd).HasColumnName("RmFCD");

                entity.Property(e => e.RmForward).HasMaxLength(15);

                entity.Property(e => e.SenderAc)
                    .HasMaxLength(50)
                    .HasColumnName("SenderAC");

                entity.Property(e => e.SenderInfo).HasMaxLength(500);

                entity.Property(e => e.SwiftFile).HasMaxLength(35);

                entity.Property(e => e.SwiftInfo).HasMaxLength(500);

                entity.Property(e => e.Swuuid)
                    .HasMaxLength(40)
                    .HasColumnName("SWUuid");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uid53)
                    .HasMaxLength(34)
                    .HasColumnName("UID53");

                entity.Property(e => e.Uid54)
                    .HasMaxLength(34)
                    .HasColumnName("UID54");

                entity.Property(e => e.Uid56)
                    .HasMaxLength(34)
                    .HasColumnName("UID56");

                entity.Property(e => e.Uid57)
                    .HasMaxLength(34)
                    .HasColumnName("UID57");

                entity.Property(e => e.Uid58)
                    .HasMaxLength(34)
                    .HasColumnName("UID58");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PRevalueRate>(entity =>
            {
                entity.HasKey(e => new { e.RevalDate, e.RevalTime, e.RevalCcy });

                entity.ToTable("pRevalueRate");

                entity.Property(e => e.RevalDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Reval_Date");

                entity.Property(e => e.RevalTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Reval_Time")
                    .IsFixedLength(true);

                entity.Property(e => e.RevalCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Reval_Ccy");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.RevalPack)
                    .HasColumnName("Reval_Pack")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RevalRate)
                    .HasColumnName("Reval_Rate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PSblc>(entity =>
            {
                entity.HasKey(e => new { e.Sblcnumber, e.RecType, e.Sblcseqno });

                entity.ToTable("pSBLC");

                entity.Property(e => e.Sblcnumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SBLCNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sblcseqno).HasColumnName("SBLCSeqno");

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.Allocation).HasMaxLength(13);

                entity.Property(e => e.AmendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AmendNo).HasMaxLength(20);

                entity.Property(e => e.Aocode)
                    .HasMaxLength(5)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BankCode).HasMaxLength(20);

                entity.Property(e => e.BankDesc).HasMaxLength(2000);

                entity.Property(e => e.BankName).HasMaxLength(150);

                entity.Property(e => e.BenCode).HasMaxLength(6);

                entity.Property(e => e.BenInfo).HasMaxLength(144);

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChkExpiry)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CommCollected)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CommLcrate).HasColumnName("CommLCRate");

                entity.Property(e => e.CustAddr).HasMaxLength(144);

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateClaimBefore).HasColumnType("smalldatetime");

                entity.Property(e => e.DateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.DateGenAcc).HasColumnType("smalldatetime");

                entity.Property(e => e.DateIssue).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartBond).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.Dms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DMS")
                    .IsFixedLength(true);

                entity.Property(e => e.DueStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(13);

                entity.Property(e => e.GenAccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Informations).HasMaxLength(2000);

                entity.Property(e => e.IntFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvoiceInfo).HasMaxLength(1000);

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Lgmode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LGMODE")
                    .IsFixedLength(true);

                entity.Property(e => e.Lgthbamt).HasColumnName("LGTHBAmt");

                entity.Property(e => e.Lgthbbal).HasColumnName("LGTHBBal");

                entity.Property(e => e.Lgtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LGTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Locode)
                    .HasMaxLength(8)
                    .HasColumnName("LOCode");

                entity.Property(e => e.OverDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMethod).HasMaxLength(15);

                entity.Property(e => e.PayRemark).HasMaxLength(200);

                entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevBenCode).HasMaxLength(6);

                entity.Property(e => e.PrevBenInfo).HasMaxLength(144);

                entity.Property(e => e.PrevDateExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevSblcamt).HasColumnName("PrevSBLCAmt");

                entity.Property(e => e.PrevSblcavalBal).HasColumnName("PrevSBLCAvalBal");

                entity.Property(e => e.PrevSblcbal).HasColumnName("PrevSBLCBal");

                entity.Property(e => e.PrevSblcdays).HasColumnName("PrevSBLCDays");

                entity.Property(e => e.PrevSblcnet).HasColumnName("PrevSBLCNet");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sblcamt).HasColumnName("SBLCAmt");

                entity.Property(e => e.SblcavalBal).HasColumnName("SBLCAvalBal");

                entity.Property(e => e.Sblcbal).HasColumnName("SBLCBal");

                entity.Property(e => e.Sblcccy)
                    .HasMaxLength(3)
                    .HasColumnName("SBLCCcy");

                entity.Property(e => e.Sblcdays).HasColumnName("SBLCDays");

                entity.Property(e => e.Sblcnet).HasColumnName("SBLCNet");

                entity.Property(e => e.SblcpostAmt).HasColumnName("SBLCPostAmt");

                entity.Property(e => e.SblcrefNo)
                    .HasMaxLength(20)
                    .HasColumnName("SBLCRefNo");

                entity.Property(e => e.Sblcstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SBLCStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorTerm).HasMaxLength(30);

                entity.Property(e => e.Thbamt).HasColumnName("THBAmt");

                entity.Property(e => e.TrappvNo)
                    .HasMaxLength(15)
                    .HasColumnName("TRAppvNo");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<PSendLcmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSendLCMail");

                entity.Property(e => e.AccessId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.LcNumber)
                    .HasMaxLength(15)
                    .HasColumnName("LC_Number");

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PSumDmsfla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSumDMSFLA");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(50)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(50)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.ArrangeContDate).HasMaxLength(8);

                entity.Property(e => e.ArrangeTerm).HasMaxLength(3);

                entity.Property(e => e.ArrangeTermType).HasMaxLength(6);

                entity.Property(e => e.ArrangeTermUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.CallOpWholeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CentralId)
                    .HasMaxLength(9)
                    .HasColumnName("CentralID");

                entity.Property(e => e.ContractCcyId)
                    .HasMaxLength(3)
                    .HasColumnName("ContractCcyID");

                entity.Property(e => e.CreditType).HasMaxLength(8);

                entity.Property(e => e.DataProviderBranchNumber).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EffectiveDate).HasMaxLength(8);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExtendedFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburseDate).HasMaxLength(8);

                entity.Property(e => e.FirstRepaymentDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.IntRepayTerm).HasMaxLength(3);

                entity.Property(e => e.IntRepayTermUnit).HasMaxLength(1);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.LoanCallOptExAmt).HasMaxLength(8);

                entity.Property(e => e.LoanCallOptExDate).HasMaxLength(8);

                entity.Property(e => e.LoanPutOptExDate).HasMaxLength(8);

                entity.Property(e => e.LoanType).HasMaxLength(6);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevArrangeNum).HasMaxLength(6);

                entity.Property(e => e.PrimaryInvoBrnNum).HasMaxLength(6);

                entity.Property(e => e.PrimaryInvoIbf)
                    .HasMaxLength(6)
                    .HasColumnName("PrimaryInvoIBF");

                entity.Property(e => e.PrnRepayTermUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.PutOpWholeFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelInvoPartyName).HasMaxLength(50);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");
            });

            modelBuilder.Entity<PSumDmsftu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSumDMSFTU");

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.CurId)
                    .HasMaxLength(3)
                    .HasColumnName("CurID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExcInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.FxarrangeType)
                    .HasMaxLength(6)
                    .HasColumnName("FXArrangeType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.LegType).HasMaxLength(6);

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTimeU)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RunTime_U")
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");
            });

            modelBuilder.Entity<PSumDmsftx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSumDMSFTX");

                entity.Property(e => e.AccdcounterpartyType)
                    .HasMaxLength(200)
                    .HasColumnName("ACCDCounterpartyType");

                entity.Property(e => e.AccdlicenseScheme)
                    .HasMaxLength(200)
                    .HasColumnName("ACCDLicenseScheme");

                entity.Property(e => e.AppvDocDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AppvDocNo).HasMaxLength(15);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(2);

                entity.Property(e => e.BenName).HasMaxLength(200);

                entity.Property(e => e.BotReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.BuyCurId)
                    .HasMaxLength(3)
                    .HasColumnName("BuyCurID");

                entity.Property(e => e.CancelationReasonType).HasMaxLength(50);

                entity.Property(e => e.CancellationReasonType).HasMaxLength(200);

                entity.Property(e => e.CentralId)
                    .HasMaxLength(50)
                    .HasColumnName("CentralID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.CustInvestType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DebtInstruIssueDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ExcInvPartyBrNo).HasMaxLength(4);

                entity.Property(e => e.ExcInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.ExcInvPartyIbfind)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ExcInvPartyIBFInd")
                    .IsFixedLength(true);

                entity.Property(e => e.ExcInvPartyName).HasMaxLength(70);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirstInstallDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromToAccNo).HasMaxLength(19);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(6)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelTxdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FromToRelTXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.FromTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FromTXType");

                entity.Property(e => e.FxarrangeType)
                    .HasMaxLength(6)
                    .HasColumnName("FXArrangeType");

                entity.Property(e => e.FxtradingTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FXTradingTXType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.InstallTermUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.InvestReason).HasMaxLength(200);

                entity.Property(e => e.KeyInTimestamp).HasMaxLength(200);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.ListinMarketFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDecType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoofInstall)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoofShare).HasMaxLength(3);

                entity.Property(e => e.NotionalCurId)
                    .HasMaxLength(3)
                    .HasColumnName("NotionalCurID");

                entity.Property(e => e.ObjectiveType).HasMaxLength(50);

                entity.Property(e => e.OthTxpurposeDesc)
                    .HasMaxLength(200)
                    .HasColumnName("OthTXPurposeDesc");

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.OutsNotCurId)
                    .HasMaxLength(3)
                    .HasColumnName("OutsNotCurID");

                entity.Property(e => e.ParValue).HasMaxLength(3);

                entity.Property(e => e.PaymentMeth).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PreviousArrangementFicode)
                    .HasMaxLength(200)
                    .HasColumnName("PreviousArrangementFICode");

                entity.Property(e => e.PreviousArrangementNumber).HasMaxLength(200);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RePayDueIndicator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelInvPartyBusType).HasMaxLength(7);

                entity.Property(e => e.RelInvPartyName).HasMaxLength(70);

                entity.Property(e => e.RelationRelInvParty).HasMaxLength(6);

                entity.Property(e => e.RelationwithBen).HasMaxLength(6);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SellCurId)
                    .HasMaxLength(3)
                    .HasColumnName("SellCurID");

                entity.Property(e => e.SetUpReasonType).HasMaxLength(200);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("ToTXType");

                entity.Property(e => e.Txdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.TxpurposeCode)
                    .HasMaxLength(6)
                    .HasColumnName("TXPurposeCode");

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");

                entity.Property(e => e.UnderlyingOwnerName).HasMaxLength(50);

                entity.Property(e => e.WholePartRepayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.YtdaccumAmt).HasColumnName("YTDAccumAmt");
            });

            modelBuilder.Entity<PSumDmsltx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSumDMSLTX");

                entity.Property(e => e.AppvDocDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AppvDocNo).HasMaxLength(15);

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.BenCnty).HasMaxLength(20);

                entity.Property(e => e.BenName).HasMaxLength(200);

                entity.Property(e => e.BotReferenceNumber).HasMaxLength(200);

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(3)
                    .HasColumnName("CurrencyID");

                entity.Property(e => e.CustInvestType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DataProviderBranchNumber).HasMaxLength(200);

                entity.Property(e => e.DebtInstruIssueDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.FiarrangementNo)
                    .HasMaxLength(15)
                    .HasColumnName("FIArrangementNo");

                entity.Property(e => e.FirstDisburDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirstInstallDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromToAccNo).HasMaxLength(19);

                entity.Property(e => e.FromToFicode)
                    .HasMaxLength(6)
                    .HasColumnName("FromToFICode");

                entity.Property(e => e.FromToRelTxdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FromToRelTXDate")
                    .IsFixedLength(true);

                entity.Property(e => e.FromTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("FromTXType");

                entity.Property(e => e.InFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("InFlowTXPurpose");

                entity.Property(e => e.InstallTermUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InstallmentNo).HasMaxLength(2);

                entity.Property(e => e.IntRateType).HasMaxLength(10);

                entity.Property(e => e.InvestReason).HasMaxLength(200);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.ListinMarketFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LoanDepositTrxType).HasMaxLength(6);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoOfShare).HasMaxLength(3);

                entity.Property(e => e.NoofInstall)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OthRepayResonDesc).HasMaxLength(50);

                entity.Property(e => e.OthTxpurposeDesc)
                    .HasMaxLength(200)
                    .HasColumnName("OthTXPurposeDesc");

                entity.Property(e => e.OutFlowTxpurpose)
                    .HasMaxLength(6)
                    .HasColumnName("OutFlowTXPurpose");

                entity.Property(e => e.ParValue).HasMaxLength(3);

                entity.Property(e => e.PaymentMeth).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RePayDueIndicator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelationwithBen).HasMaxLength(6);

                entity.Property(e => e.RepaymentReson).HasMaxLength(6);

                entity.Property(e => e.ResCentralId)
                    .HasMaxLength(8)
                    .HasColumnName("ResCentralID");

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTime)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.TermRange)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToTxtype)
                    .HasMaxLength(6)
                    .HasColumnName("ToTXType");

                entity.Property(e => e.TransactionDate).HasMaxLength(8);

                entity.Property(e => e.TxpurposeCode)
                    .HasMaxLength(6)
                    .HasColumnName("TXPurposeCode");

                entity.Property(e => e.Txseq)
                    .HasMaxLength(4)
                    .HasColumnName("TXSeq");

                entity.Property(e => e.UnderlyingOwnerName).HasMaxLength(200);

                entity.Property(e => e.WholePartRepayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.YtdaccumAmt).HasColumnName("YTDAccumAmt");
            });

            modelBuilder.Entity<PSumdmsptx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSUMDMSPTX");

                entity.Property(e => e.AsAtDate).HasMaxLength(10);

                entity.Property(e => e.CntryIdofInvolParty)
                    .HasMaxLength(2)
                    .HasColumnName("CntryIDOfInvolParty");

                entity.Property(e => e.CountryIdofIssuerorInvestedOrganization).HasMaxLength(2);

                entity.Property(e => e.CouponRate).HasMaxLength(20);

                entity.Property(e => e.CurrencyId).HasMaxLength(3);

                entity.Property(e => e.DebtInstrumentName).HasMaxLength(70);

                entity.Property(e => e.DebtInstrumentType).HasMaxLength(20);

                entity.Property(e => e.DefaultedBillPurchaseDate).HasMaxLength(8);

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.IntentionCountryId).HasMaxLength(2);

                entity.Property(e => e.InvolPartyId)
                    .HasMaxLength(20)
                    .HasColumnName("InvolPartyID");

                entity.Property(e => e.InvolPartyName).HasMaxLength(70);

                entity.Property(e => e.Isincode)
                    .HasMaxLength(10)
                    .HasColumnName("ISINCode");

                entity.Property(e => e.IssueDate).HasMaxLength(8);

                entity.Property(e => e.IssuerorInvestedOrganizationName).HasMaxLength(70);

                entity.Property(e => e.Keynumber).HasMaxLength(15);

                entity.Property(e => e.MaturityDate).HasMaxLength(8);

                entity.Property(e => e.NostroAcc).HasMaxLength(15);

                entity.Property(e => e.OriginalTerm).HasMaxLength(3);

                entity.Property(e => e.OriginalTermUnit).HasMaxLength(3);

                entity.Property(e => e.PaymentMethod).HasMaxLength(6);

                entity.Property(e => e.PeriodFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.RecpPayTrnCode).HasMaxLength(6);

                entity.Property(e => e.RecpPayTrnDate).HasMaxLength(10);

                entity.Property(e => e.RecpPayTrnItmDesc).HasMaxLength(50);

                entity.Property(e => e.RecpPayTrnItmType).HasMaxLength(6);

                entity.Property(e => e.RecpPayTrnType).HasMaxLength(6);

                entity.Property(e => e.RunDate).HasMaxLength(10);

                entity.Property(e => e.RunTimeU)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RunTime_U")
                    .IsFixedLength(true);

                entity.Property(e => e.SellForeignCurSecTransAmtinBahtEqui).HasMaxLength(20);

                entity.Property(e => e.System).HasMaxLength(6);

                entity.Property(e => e.Txseq).HasColumnName("TXSeq");

                entity.Property(e => e.UnitofTransaction).HasMaxLength(5);
            });

            modelBuilder.Entity<PSw700>(entity =>
            {
                entity.HasKey(e => new { e.Lcno, e.Lcseq });

                entity.ToTable("pSW700");

                entity.Property(e => e.Lcno)
                    .HasMaxLength(15)
                    .HasColumnName("LCNo");

                entity.Property(e => e.Lcseq).HasColumnName("LCSeq");

                entity.Property(e => e.F23).HasMaxLength(16);

                entity.Property(e => e.F25).HasMaxLength(35);

                entity.Property(e => e.F31c)
                    .HasMaxLength(6)
                    .HasColumnName("F31C");

                entity.Property(e => e.F39a)
                    .HasMaxLength(5)
                    .HasColumnName("F39A");

                entity.Property(e => e.F39b)
                    .HasMaxLength(13)
                    .HasColumnName("F39B");

                entity.Property(e => e.F39c)
                    .HasMaxLength(148)
                    .HasColumnName("F39C");

                entity.Property(e => e.F41flag)
                    .HasMaxLength(3)
                    .HasColumnName("F41Flag");

                entity.Property(e => e.F42a)
                    .HasMaxLength(181)
                    .HasColumnName("F42A");

                entity.Property(e => e.F42c)
                    .HasMaxLength(108)
                    .HasColumnName("F42C");

                entity.Property(e => e.F42d)
                    .HasMaxLength(148)
                    .HasColumnName("F42D");

                entity.Property(e => e.F42m)
                    .HasMaxLength(650)
                    .HasColumnName("F42M");

                entity.Property(e => e.F42m740)
                    .HasMaxLength(650)
                    .HasColumnName("F42M740");

                entity.Property(e => e.F42p)
                    .HasMaxLength(144)
                    .HasColumnName("F42P");

                entity.Property(e => e.F43p)
                    .HasMaxLength(35)
                    .HasColumnName("F43P");

                entity.Property(e => e.F43t)
                    .HasMaxLength(35)
                    .HasColumnName("F43T");

                entity.Property(e => e.F44a)
                    .HasMaxLength(65)
                    .HasColumnName("F44A");

                entity.Property(e => e.F44b)
                    .HasMaxLength(65)
                    .HasColumnName("F44B");

                entity.Property(e => e.F44c)
                    .HasMaxLength(6)
                    .HasColumnName("F44C");

                entity.Property(e => e.F44d)
                    .HasMaxLength(396)
                    .HasColumnName("F44D");

                entity.Property(e => e.F44e)
                    .HasMaxLength(65)
                    .HasColumnName("F44E");

                entity.Property(e => e.F44f)
                    .HasMaxLength(65)
                    .HasColumnName("F44F");

                entity.Property(e => e.F45a)
                    .HasMaxLength(6600)
                    .IsUnicode(false)
                    .HasColumnName("F45A");

                entity.Property(e => e.F48).HasMaxLength(144);

                entity.Property(e => e.F51).HasMaxLength(144);

                entity.Property(e => e.F53a)
                    .HasMaxLength(181)
                    .HasColumnName("F53A");

                entity.Property(e => e.F57a)
                    .HasMaxLength(181)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("F57Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.F58a)
                    .HasMaxLength(14)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(148)
                    .HasColumnName("F58D");

                entity.Property(e => e.F71a)
                    .HasMaxLength(3)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71a740)
                    .HasMaxLength(3)
                    .HasColumnName("F71A740");

                entity.Property(e => e.F71b)
                    .HasMaxLength(224)
                    .HasColumnName("F71B");

                entity.Property(e => e.F71b740)
                    .HasMaxLength(224)
                    .HasColumnName("F71B740");

                entity.Property(e => e.F72).HasMaxLength(224);

                entity.Property(e => e.F72740).HasMaxLength(224);

                entity.Property(e => e.F78).HasMaxLength(792);

                entity.Property(e => e.Flag701)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.M20).HasMaxLength(16);

                entity.Property(e => e.M27).HasMaxLength(3);

                entity.Property(e => e.M271)
                    .HasMaxLength(3)
                    .HasColumnName("M27_1");

                entity.Property(e => e.M31d)
                    .HasMaxLength(35)
                    .HasColumnName("M31D");

                entity.Property(e => e.M32b)
                    .HasMaxLength(18)
                    .HasColumnName("M32B");

                entity.Property(e => e.M40a)
                    .HasMaxLength(50)
                    .HasColumnName("M40A");

                entity.Property(e => e.M40e)
                    .HasMaxLength(35)
                    .HasColumnName("M40E");

                entity.Property(e => e.M40f)
                    .HasMaxLength(30)
                    .HasColumnName("M40F");

                entity.Property(e => e.M41).HasMaxLength(14);

                entity.Property(e => e.M41a)
                    .HasMaxLength(158)
                    .HasColumnName("M41A");

                entity.Property(e => e.M49).HasMaxLength(7);

                entity.Property(e => e.M50).HasMaxLength(144);

                entity.Property(e => e.M59)
                    .IsRequired()
                    .HasMaxLength(180);

                entity.Property(e => e.SwiftFile).HasMaxLength(50);
            });

            modelBuilder.Entity<PSw700a>(entity =>
            {
                entity.HasKey(e => new { e.Lcno, e.SeqNo });

                entity.ToTable("pSW700A");

                entity.Property(e => e.Lcno)
                    .HasMaxLength(15)
                    .HasColumnName("LCNo");

                entity.Property(e => e.F45a)
                    .HasMaxLength(6600)
                    .IsUnicode(false)
                    .HasColumnName("F45A");
            });

            modelBuilder.Entity<PSw707>(entity =>
            {
                entity.HasKey(e => new { e.Lcno, e.Seqno });

                entity.ToTable("pSW707");

                entity.Property(e => e.Lcno)
                    .HasMaxLength(15)
                    .HasColumnName("LCNo");

                entity.Property(e => e.F26e)
                    .HasMaxLength(2)
                    .HasColumnName("F26E");

                entity.Property(e => e.F30).HasMaxLength(6);

                entity.Property(e => e.F31c)
                    .HasMaxLength(6)
                    .HasColumnName("F31C");

                entity.Property(e => e.F31e)
                    .HasMaxLength(6)
                    .HasColumnName("F31E");

                entity.Property(e => e.F32b)
                    .HasMaxLength(18)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33b)
                    .HasMaxLength(18)
                    .HasColumnName("F33B");

                entity.Property(e => e.F34b)
                    .HasMaxLength(18)
                    .HasColumnName("F34B");

                entity.Property(e => e.F39a)
                    .HasMaxLength(5)
                    .HasColumnName("F39A");

                entity.Property(e => e.F42a)
                    .HasMaxLength(181)
                    .HasColumnName("F42A");

                entity.Property(e => e.F42c)
                    .HasMaxLength(108)
                    .HasColumnName("F42C");

                entity.Property(e => e.F42m740)
                    .HasMaxLength(108)
                    .HasColumnName("F42M740");

                entity.Property(e => e.F42p)
                    .HasMaxLength(144)
                    .HasColumnName("F42P");

                entity.Property(e => e.F44a)
                    .HasMaxLength(65)
                    .HasColumnName("F44A");

                entity.Property(e => e.F44b)
                    .HasMaxLength(65)
                    .HasColumnName("F44B");

                entity.Property(e => e.F44c)
                    .HasMaxLength(6)
                    .HasColumnName("F44C");

                entity.Property(e => e.F44d)
                    .HasMaxLength(396)
                    .HasColumnName("F44D");

                entity.Property(e => e.F71a740)
                    .HasMaxLength(3)
                    .HasColumnName("F71A740");

                entity.Property(e => e.F71b740)
                    .HasMaxLength(224)
                    .HasColumnName("F71B740");

                entity.Property(e => e.F72).HasMaxLength(224);

                entity.Property(e => e.F72740).HasMaxLength(224);

                entity.Property(e => e.F72747).HasMaxLength(224);

                entity.Property(e => e.F77a)
                    .HasMaxLength(738)
                    .HasColumnName("F77A");

                entity.Property(e => e.F79).HasMaxLength(1818);

                entity.Property(e => e.Flag740)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAG740")
                    .IsFixedLength(true);

                entity.Property(e => e.Flag747)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAG747")
                    .IsFixedLength(true);

                entity.Property(e => e.M20).HasMaxLength(16);

                entity.Property(e => e.M21).HasMaxLength(16);

                entity.Property(e => e.M30).HasMaxLength(6);

                entity.Property(e => e.M31d)
                    .HasMaxLength(35)
                    .HasColumnName("M31D");

                entity.Property(e => e.M32b)
                    .HasMaxLength(18)
                    .HasColumnName("M32B");

                entity.Property(e => e.M41a)
                    .HasMaxLength(158)
                    .HasColumnName("M41A");

                entity.Property(e => e.M59).HasMaxLength(180);
            });

            modelBuilder.Entity<PSwexport>(entity =>
            {
                entity.HasKey(e => e.AutoNum);

                entity.ToTable("pSWExport");

                entity.Property(e => e.AutoNum).HasMaxLength(10);

                entity.Property(e => e.BankId)
                    .HasMaxLength(14)
                    .HasColumnName("BankID");

                entity.Property(e => e.BankInFo).HasMaxLength(144);

                entity.Property(e => e.BankType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.Event).HasMaxLength(20);

                entity.Property(e => e.EventNo).HasColumnName("Event_No");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23b)
                    .HasMaxLength(12)
                    .HasColumnName("F23B");

                entity.Property(e => e.F25).HasMaxLength(35);

                entity.Property(e => e.F26t)
                    .HasMaxLength(19)
                    .HasColumnName("F26T");

                entity.Property(e => e.F31).HasMaxLength(6);

                entity.Property(e => e.F32a)
                    .HasMaxLength(19)
                    .HasColumnName("F32A");

                entity.Property(e => e.F32b)
                    .HasMaxLength(19)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33b)
                    .HasMaxLength(19)
                    .HasColumnName("F33B");

                entity.Property(e => e.F34a)
                    .HasMaxLength(26)
                    .HasColumnName("F34A");

                entity.Property(e => e.F34b)
                    .HasMaxLength(19)
                    .HasColumnName("F34B");

                entity.Property(e => e.F52a)
                    .HasMaxLength(14)
                    .HasColumnName("F52A");

                entity.Property(e => e.F52d)
                    .HasMaxLength(148)
                    .HasColumnName("F52D");

                entity.Property(e => e.F52uid)
                    .HasMaxLength(35)
                    .HasColumnName("F52UID");

                entity.Property(e => e.F53a)
                    .HasMaxLength(12)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53d)
                    .HasMaxLength(148)
                    .HasColumnName("F53D");

                entity.Property(e => e.F56a)
                    .HasMaxLength(14)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(148)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(35)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(14)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57ac)
                    .HasMaxLength(15)
                    .HasColumnName("F57AC");

                entity.Property(e => e.F57d)
                    .HasMaxLength(148)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(14)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58ac)
                    .HasMaxLength(15)
                    .HasColumnName("F58AC");

                entity.Property(e => e.F58d)
                    .HasMaxLength(148)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F59a)
                    .HasMaxLength(14)
                    .HasColumnName("F59A");

                entity.Property(e => e.F59d)
                    .HasMaxLength(148)
                    .HasColumnName("F59D");

                entity.Property(e => e.F59uid)
                    .HasMaxLength(35)
                    .HasColumnName("F59UID");

                entity.Property(e => e.F71b)
                    .HasMaxLength(216)
                    .HasColumnName("F71B");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F73).HasMaxLength(216);

                entity.Property(e => e.F77).HasMaxLength(432);

                entity.Property(e => e.F77b)
                    .HasMaxLength(2100)
                    .HasColumnName("F77B");

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Mt499)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT499")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt730)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT730")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt742)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT742")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt768)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT768")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt799)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT799")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt999)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT999")
                    .IsFixedLength(true);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(7)
                    .HasColumnName("MTType");

                entity.Property(e => e.NbankId)
                    .HasMaxLength(14)
                    .HasColumnName("NBankID");

                entity.Property(e => e.NbankInfo)
                    .HasMaxLength(144)
                    .HasColumnName("NBankInfo");

                entity.Property(e => e.RemitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SwiftFile).HasMaxLength(50);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PSwimbc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSWIMBC");

                entity.Property(e => e.Bcnumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("BCNumber");

                entity.Property(e => e.Bcseq).HasColumnName("BCSeq");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(25);

                entity.Property(e => e.F23).HasMaxLength(4);

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F30).HasMaxLength(6);

                entity.Property(e => e.F32a)
                    .HasMaxLength(25)
                    .HasColumnName("F32A");

                entity.Property(e => e.F32b)
                    .HasMaxLength(25)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33a)
                    .HasMaxLength(25)
                    .HasColumnName("F33A");

                entity.Property(e => e.F50k)
                    .HasMaxLength(144)
                    .HasColumnName("F50K");

                entity.Property(e => e.F52a)
                    .HasMaxLength(14)
                    .HasColumnName("F52A");

                entity.Property(e => e.F52d)
                    .HasMaxLength(144)
                    .HasColumnName("F52D");

                entity.Property(e => e.F53a)
                    .HasMaxLength(14)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53d)
                    .HasMaxLength(144)
                    .HasColumnName("F53D");

                entity.Property(e => e.F56a)
                    .HasMaxLength(14)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(144)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(20)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(14)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(144)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(20)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(14)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(150)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(20)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F59a)
                    .HasMaxLength(35)
                    .HasColumnName("F59A");

                entity.Property(e => e.F59d)
                    .HasMaxLength(144)
                    .HasColumnName("F59D");

                entity.Property(e => e.F70).HasMaxLength(144);

                entity.Property(e => e.F71a)
                    .HasMaxLength(3)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71b)
                    .HasMaxLength(216)
                    .HasColumnName("F71B");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F73).HasMaxLength(216);

                entity.Property(e => e.F77).HasMaxLength(432);

                entity.Property(e => e.F77b)
                    .HasMaxLength(720)
                    .HasColumnName("F77B");

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(7)
                    .HasColumnName("MTType");

                entity.Property(e => e.ToWhom).HasMaxLength(220);
            });

            modelBuilder.Entity<PSwimbl>(entity =>
            {
                entity.HasKey(e => new { e.Adnumber, e.Seqno });

                entity.ToTable("pSWIMBL");

                entity.Property(e => e.Adnumber)
                    .HasMaxLength(15)
                    .HasColumnName("ADNumber");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(15)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.Blseq).HasColumnName("BLSeq");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23).HasMaxLength(16);

                entity.Property(e => e.F30).HasMaxLength(6);

                entity.Property(e => e.F32a)
                    .HasMaxLength(29)
                    .HasColumnName("F32A");

                entity.Property(e => e.F32b)
                    .HasMaxLength(25)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33a)
                    .HasMaxLength(25)
                    .HasColumnName("F33A");

                entity.Property(e => e.F52a)
                    .HasMaxLength(14)
                    .HasColumnName("F52A");

                entity.Property(e => e.F52d)
                    .HasMaxLength(144)
                    .HasColumnName("F52D");

                entity.Property(e => e.F53a)
                    .HasMaxLength(14)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53d)
                    .HasMaxLength(144)
                    .HasColumnName("F53D");

                entity.Property(e => e.F56a)
                    .HasMaxLength(14)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(144)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(20)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(14)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(144)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(20)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(14)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(144)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(20)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F71b)
                    .HasMaxLength(2100)
                    .HasColumnName("F71B");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F73).HasMaxLength(220);

                entity.Property(e => e.F77).HasMaxLength(432);

                entity.Property(e => e.F77b)
                    .HasMaxLength(720)
                    .HasColumnName("F77B");

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(7)
                    .HasColumnName("MTType");

                entity.Property(e => e.ToWhom).HasMaxLength(144);
            });

            modelBuilder.Entity<PSwimlc>(entity =>
            {
                entity.HasKey(e => new { e.Lcno, e.Lcseq });

                entity.ToTable("pSWIMLC");

                entity.Property(e => e.Lcno)
                    .HasMaxLength(15)
                    .HasColumnName("LCNo");

                entity.Property(e => e.Lcseq).HasColumnName("LCSeq");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F21X)
                    .HasMaxLength(16)
                    .HasColumnName("F21_X");

                entity.Property(e => e.F21c)
                    .HasMaxLength(16)
                    .HasColumnName("F21C");

                entity.Property(e => e.F22r)
                    .HasMaxLength(10)
                    .HasColumnName("F22R");

                entity.Property(e => e.F23).HasMaxLength(16);

                entity.Property(e => e.F23s)
                    .HasMaxLength(10)
                    .HasColumnName("F23S");

                entity.Property(e => e.F25).HasMaxLength(35);

                entity.Property(e => e.F26e)
                    .HasMaxLength(3)
                    .HasColumnName("F26E");

                entity.Property(e => e.F27).HasMaxLength(5);

                entity.Property(e => e.F27X)
                    .HasMaxLength(5)
                    .HasColumnName("F27_X");

                entity.Property(e => e.F30).HasMaxLength(6);

                entity.Property(e => e.F31c)
                    .HasMaxLength(6)
                    .HasColumnName("F31C");

                entity.Property(e => e.F31d)
                    .HasMaxLength(35)
                    .HasColumnName("F31D");

                entity.Property(e => e.F31dx)
                    .HasMaxLength(35)
                    .HasColumnName("F31DX");

                entity.Property(e => e.F31e)
                    .HasMaxLength(6)
                    .HasColumnName("F31E");

                entity.Property(e => e.F32b)
                    .HasMaxLength(18)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33b)
                    .HasMaxLength(18)
                    .HasColumnName("F33B");

                entity.Property(e => e.F34b)
                    .HasMaxLength(18)
                    .HasColumnName("F34B");

                entity.Property(e => e.F39a)
                    .HasMaxLength(5)
                    .HasColumnName("F39A");

                entity.Property(e => e.F39b)
                    .HasMaxLength(13)
                    .HasColumnName("F39B");

                entity.Property(e => e.F39c)
                    .HasMaxLength(148)
                    .HasColumnName("F39C");

                entity.Property(e => e.F40a)
                    .HasMaxLength(24)
                    .HasColumnName("F40A");

                entity.Property(e => e.F40e)
                    .HasMaxLength(1050)
                    .HasColumnName("F40E");

                entity.Property(e => e.F40f)
                    .HasMaxLength(30)
                    .HasColumnName("F40F");

                entity.Property(e => e.F41a)
                    .HasMaxLength(14)
                    .HasColumnName("F41A");

                entity.Property(e => e.F41d)
                    .HasMaxLength(148)
                    .HasColumnName("F41D");

                entity.Property(e => e.F41flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("F41Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.F41uid)
                    .HasMaxLength(35)
                    .HasColumnName("F41UID");

                entity.Property(e => e.F42a)
                    .HasMaxLength(14)
                    .HasColumnName("F42A");

                entity.Property(e => e.F42c)
                    .HasMaxLength(108)
                    .HasColumnName("F42C");

                entity.Property(e => e.F42d)
                    .HasMaxLength(148)
                    .HasColumnName("F42D");

                entity.Property(e => e.F42m)
                    .HasMaxLength(148)
                    .HasColumnName("F42M");

                entity.Property(e => e.F42p)
                    .HasMaxLength(148)
                    .HasColumnName("F42P");

                entity.Property(e => e.F42uid)
                    .HasMaxLength(35)
                    .HasColumnName("F42UID");

                entity.Property(e => e.F43p)
                    .HasMaxLength(35)
                    .HasColumnName("F43P");

                entity.Property(e => e.F43t)
                    .HasMaxLength(35)
                    .HasColumnName("F43T");

                entity.Property(e => e.F44a)
                    .HasMaxLength(65)
                    .HasColumnName("F44A");

                entity.Property(e => e.F44b)
                    .HasMaxLength(65)
                    .HasColumnName("F44B");

                entity.Property(e => e.F44c)
                    .HasMaxLength(6)
                    .HasColumnName("F44C");

                entity.Property(e => e.F44d)
                    .HasMaxLength(400)
                    .HasColumnName("F44D");

                entity.Property(e => e.F44e)
                    .HasMaxLength(65)
                    .HasColumnName("F44E");

                entity.Property(e => e.F44f)
                    .HasMaxLength(65)
                    .HasColumnName("F44F");

                entity.Property(e => e.F48).HasMaxLength(148);

                entity.Property(e => e.F49).HasMaxLength(10);

                entity.Property(e => e.F50).HasMaxLength(148);

                entity.Property(e => e.F50dx)
                    .HasMaxLength(148)
                    .HasColumnName("F50DX");

                entity.Property(e => e.F51a)
                    .HasMaxLength(14)
                    .HasColumnName("F51A");

                entity.Property(e => e.F51d)
                    .HasMaxLength(148)
                    .HasColumnName("F51D");

                entity.Property(e => e.F51uid)
                    .HasMaxLength(35)
                    .HasColumnName("F51UID");

                entity.Property(e => e.F53a)
                    .HasMaxLength(14)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53d)
                    .HasMaxLength(148)
                    .HasColumnName("F53D");

                entity.Property(e => e.F53uid)
                    .HasMaxLength(35)
                    .HasColumnName("F53UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(14)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57a1)
                    .HasMaxLength(14)
                    .HasColumnName("F57A1");

                entity.Property(e => e.F57d)
                    .HasMaxLength(148)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57d1)
                    .HasMaxLength(148)
                    .HasColumnName("F57D1");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F57uid1)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID1");

                entity.Property(e => e.F58a)
                    .HasMaxLength(14)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58a1)
                    .HasMaxLength(14)
                    .HasColumnName("F58A1");

                entity.Property(e => e.F58d)
                    .HasMaxLength(148)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58d1)
                    .HasMaxLength(148)
                    .HasColumnName("F58D1");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F58uid1)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID1");

                entity.Property(e => e.F59).HasMaxLength(148);

                entity.Property(e => e.F59dx)
                    .HasMaxLength(148)
                    .HasColumnName("F59DX");

                entity.Property(e => e.F59uid)
                    .HasMaxLength(35)
                    .HasColumnName("F59UID");

                entity.Property(e => e.F59uidx)
                    .HasMaxLength(35)
                    .HasColumnName("F59UIDX");

                entity.Property(e => e.F71a)
                    .HasMaxLength(3)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71b)
                    .HasMaxLength(220)
                    .HasColumnName("F71B");

                entity.Property(e => e.F71bX)
                    .HasMaxLength(220)
                    .HasColumnName("F71B_X");

                entity.Property(e => e.F72).HasMaxLength(220);

                entity.Property(e => e.F72X)
                    .HasMaxLength(220)
                    .HasColumnName("F72_X");

                entity.Property(e => e.F77a)
                    .HasMaxLength(740)
                    .HasColumnName("F77A");

                entity.Property(e => e.F78).HasMaxLength(800);

                entity.Property(e => e.F79).HasMaxLength(1700);

                entity.Property(e => e.F79c)
                    .HasMaxLength(1700)
                    .HasColumnName("F79C");

                entity.Property(e => e.Flag701)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Flag740)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Flag747)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lcamount).HasColumnName("LCAmount");

                entity.Property(e => e.Lcccy)
                    .HasMaxLength(3)
                    .HasColumnName("LCCcy");

                entity.Property(e => e.Lcevent)
                    .HasMaxLength(15)
                    .HasColumnName("LCEvent");

                entity.Property(e => e.SwiftFile).HasMaxLength(50);

                entity.Property(e => e.ToBank).HasMaxLength(14);

                entity.Property(e => e.ToReim).HasMaxLength(14);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PSwimpSblc>(entity =>
            {
                entity.HasKey(e => new { e.DocNumber, e.SeqNo, e.Mtno });

                entity.ToTable("pSWImpSBLC");

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.Mtno)
                    .HasMaxLength(3)
                    .HasColumnName("MTNo");

                entity.Property(e => e.F22kC)
                    .HasMaxLength(4)
                    .HasColumnName("F22K_C");

                entity.Property(e => e.F22kD)
                    .HasMaxLength(35)
                    .HasColumnName("F22K_D");

                entity.Property(e => e.F22y)
                    .HasMaxLength(4)
                    .HasColumnName("F22Y");

                entity.Property(e => e.F23).HasMaxLength(16);

                entity.Property(e => e.F23e)
                    .HasMaxLength(40)
                    .HasColumnName("F23E");

                entity.Property(e => e.F23eC)
                    .HasMaxLength(4)
                    .HasColumnName("F23E_C");

                entity.Property(e => e.F23fC)
                    .HasMaxLength(4)
                    .HasColumnName("F23F_C");

                entity.Property(e => e.F23fD)
                    .HasMaxLength(35)
                    .HasColumnName("F23F_D");

                entity.Property(e => e.F23xC)
                    .HasMaxLength(4)
                    .HasColumnName("F23X_C");

                entity.Property(e => e.F23xD)
                    .HasMaxLength(65)
                    .HasColumnName("F23X_D");

                entity.Property(e => e.F24eC)
                    .HasMaxLength(4)
                    .HasColumnName("F24E_C");

                entity.Property(e => e.F24eD)
                    .HasMaxLength(35)
                    .HasColumnName("F24E_D");

                entity.Property(e => e.F24gC)
                    .HasMaxLength(4)
                    .HasColumnName("F24G_C");

                entity.Property(e => e.F24gD)
                    .HasMaxLength(216)
                    .HasColumnName("F24G_D");

                entity.Property(e => e.F26e)
                    .HasMaxLength(3)
                    .HasColumnName("F26E");

                entity.Property(e => e.F31e)
                    .HasMaxLength(6)
                    .HasColumnName("F31E");

                entity.Property(e => e.F31s)
                    .HasMaxLength(6)
                    .HasColumnName("F31S");

                entity.Property(e => e.F35g)
                    .HasMaxLength(792)
                    .HasColumnName("F35G");

                entity.Property(e => e.F39d)
                    .HasMaxLength(792)
                    .HasColumnName("F39D");

                entity.Property(e => e.F39e)
                    .HasMaxLength(792)
                    .HasColumnName("F39E");

                entity.Property(e => e.F40d)
                    .HasMaxLength(2)
                    .HasColumnName("F40D");

                entity.Property(e => e.F41a)
                    .HasMaxLength(14)
                    .HasColumnName("F41A");

                entity.Property(e => e.F41d)
                    .HasMaxLength(148)
                    .HasColumnName("F41D");

                entity.Property(e => e.F41uid)
                    .HasMaxLength(35)
                    .HasColumnName("F41UID");

                entity.Property(e => e.F44h)
                    .HasMaxLength(68)
                    .HasColumnName("F44H");

                entity.Property(e => e.F44hC)
                    .HasMaxLength(30)
                    .HasColumnName("F44H_C");

                entity.Property(e => e.F45l)
                    .HasMaxLength(3300)
                    .HasColumnName("F45L");

                entity.Property(e => e.F48b)
                    .HasMaxLength(4)
                    .HasColumnName("F48B");

                entity.Property(e => e.F48d)
                    .HasMaxLength(4)
                    .HasColumnName("F48D");

                entity.Property(e => e.F49).HasMaxLength(7);

                entity.Property(e => e.F50).HasMaxLength(144);

                entity.Property(e => e.F51).HasMaxLength(144);

                entity.Property(e => e.F56a)
                    .HasMaxLength(13)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(148)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(35)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(13)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(148)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(13)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(148)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F71d)
                    .HasMaxLength(216)
                    .HasColumnName("F71D");

                entity.Property(e => e.F72).HasMaxLength(216);

                entity.Property(e => e.F78).HasMaxLength(792);

                entity.Property(e => e.M22a)
                    .HasMaxLength(4)
                    .HasColumnName("M22A");

                entity.Property(e => e.M22d)
                    .HasMaxLength(4)
                    .HasColumnName("M22D");

                entity.Property(e => e.M23b)
                    .HasMaxLength(4)
                    .HasColumnName("M23B");

                entity.Property(e => e.M27).HasMaxLength(3);

                entity.Property(e => e.M27X)
                    .HasMaxLength(3)
                    .HasColumnName("M27_X");

                entity.Property(e => e.M30).HasMaxLength(6);

                entity.Property(e => e.M32b)
                    .HasMaxLength(18)
                    .HasColumnName("M32B");

                entity.Property(e => e.M40cC)
                    .HasMaxLength(4)
                    .HasColumnName("M40C_C");

                entity.Property(e => e.M40cD)
                    .HasMaxLength(35)
                    .HasColumnName("M40C_D");

                entity.Property(e => e.M52a)
                    .HasMaxLength(13)
                    .HasColumnName("M52A");

                entity.Property(e => e.M52d)
                    .HasMaxLength(148)
                    .HasColumnName("M52D");

                entity.Property(e => e.M52uid)
                    .HasMaxLength(35)
                    .HasColumnName("M52UID");

                entity.Property(e => e.M59a)
                    .HasMaxLength(13)
                    .HasColumnName("M59A");

                entity.Property(e => e.M59d)
                    .HasMaxLength(148)
                    .HasColumnName("M59D");

                entity.Property(e => e.M59uid)
                    .HasMaxLength(35)
                    .HasColumnName("M59Uid");

                entity.Property(e => e.SwiftFile).HasMaxLength(20);
            });

            modelBuilder.Entity<PSwimpText>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.DocNumber, e.Seqno, e.Mtno, e.Fdno });

                entity.ToTable("pSWImpText");

                entity.Property(e => e.Login).HasMaxLength(5);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.Mtno)
                    .HasMaxLength(5)
                    .HasColumnName("MTNo");

                entity.Property(e => e.Fdno)
                    .HasMaxLength(15)
                    .HasColumnName("FDNo")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PSwimport>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.DocNumber, e.Seqno });

                entity.ToTable("pSWImport");

                entity.Property(e => e.Login).HasMaxLength(5);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.Bnet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BNet")
                    .IsFixedLength(true);

                entity.Property(e => e.Cf50)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CF50")
                    .IsFixedLength(true);

                entity.Property(e => e.Cf59)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CF59")
                    .IsFixedLength(true);

                entity.Property(e => e.Detail32).HasMaxLength(15);

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F20X)
                    .HasMaxLength(16)
                    .HasColumnName("F20_X");

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F21B)
                    .HasMaxLength(16)
                    .HasColumnName("F21_B");

                entity.Property(e => e.F21C)
                    .HasMaxLength(16)
                    .HasColumnName("F21_C");

                entity.Property(e => e.F21X)
                    .HasMaxLength(16)
                    .HasColumnName("F21_X");

                entity.Property(e => e.F23).HasMaxLength(4);

                entity.Property(e => e.F23X)
                    .HasMaxLength(15)
                    .HasColumnName("F23_X");

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F30).HasMaxLength(6);

                entity.Property(e => e.F32a)
                    .HasMaxLength(25)
                    .HasColumnName("F32A");

                entity.Property(e => e.F32b)
                    .HasMaxLength(25)
                    .HasColumnName("F32B");

                entity.Property(e => e.F33a)
                    .HasMaxLength(25)
                    .HasColumnName("F33A");

                entity.Property(e => e.F33b)
                    .HasMaxLength(25)
                    .HasColumnName("F33B");

                entity.Property(e => e.F34a)
                    .HasMaxLength(25)
                    .HasColumnName("F34A");

                entity.Property(e => e.F50k)
                    .HasMaxLength(185)
                    .HasColumnName("F50K");

                entity.Property(e => e.F52a)
                    .HasMaxLength(13)
                    .HasColumnName("F52A");

                entity.Property(e => e.F52d)
                    .HasMaxLength(148)
                    .HasColumnName("F52D");

                entity.Property(e => e.F53a)
                    .HasMaxLength(13)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53aX)
                    .HasMaxLength(13)
                    .HasColumnName("F53A_X");

                entity.Property(e => e.F53b)
                    .HasMaxLength(35)
                    .HasColumnName("F53B");

                entity.Property(e => e.F53bX)
                    .HasMaxLength(35)
                    .HasColumnName("F53B_X");

                entity.Property(e => e.F53d)
                    .HasMaxLength(148)
                    .HasColumnName("F53D");

                entity.Property(e => e.F53dX)
                    .HasMaxLength(148)
                    .HasColumnName("F53D_X");

                entity.Property(e => e.F53uid)
                    .HasMaxLength(35)
                    .HasColumnName("F53UID");

                entity.Property(e => e.F53uidX)
                    .HasMaxLength(35)
                    .HasColumnName("F53UID_X");

                entity.Property(e => e.F54a)
                    .HasMaxLength(13)
                    .HasColumnName("F54A");

                entity.Property(e => e.F54aX)
                    .HasMaxLength(13)
                    .HasColumnName("F54A_X");

                entity.Property(e => e.F54d)
                    .HasMaxLength(148)
                    .HasColumnName("F54D");

                entity.Property(e => e.F54dX)
                    .HasMaxLength(148)
                    .HasColumnName("F54D_X");

                entity.Property(e => e.F54uid)
                    .HasMaxLength(35)
                    .HasColumnName("F54UID");

                entity.Property(e => e.F54uidX)
                    .HasMaxLength(35)
                    .HasColumnName("F54UID_X");

                entity.Property(e => e.F56a)
                    .HasMaxLength(13)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(148)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(35)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(13)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(148)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(13)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(148)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F59).HasMaxLength(185);

                entity.Property(e => e.F70).HasMaxLength(148);

                entity.Property(e => e.F71a)
                    .HasMaxLength(3)
                    .HasColumnName("F71A");

                entity.Property(e => e.F71b)
                    .HasMaxLength(216)
                    .HasColumnName("F71B");

                entity.Property(e => e.F71f)
                    .HasMaxLength(25)
                    .HasColumnName("F71F");

                entity.Property(e => e.F72).HasMaxLength(216);

                entity.Property(e => e.F72103).HasMaxLength(216);

                entity.Property(e => e.F72X)
                    .HasMaxLength(216)
                    .HasColumnName("F72_X");

                entity.Property(e => e.F73).HasMaxLength(216);

                entity.Property(e => e.F77a)
                    .HasMaxLength(720)
                    .HasColumnName("F77A");

                entity.Property(e => e.F77b)
                    .HasMaxLength(108)
                    .HasColumnName("F77B");

                entity.Property(e => e.F77j)
                    .HasMaxLength(3750)
                    .HasColumnName("F77J");

                entity.Property(e => e.F79).HasMaxLength(1820);

                entity.Property(e => e.F79X)
                    .HasMaxLength(1820)
                    .HasColumnName("F79_X");

                entity.Property(e => e.F79Z)
                    .HasMaxLength(1820)
                    .HasColumnName("F79_Z");

                entity.Property(e => e.Flag32)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mt103)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT103")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt199)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT199")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt202)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt202cov)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT202Cov")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt400)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT400")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt412)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT412")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt499)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT499")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt734)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT734")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt752)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT752")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt754)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT754")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt756)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT756")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt799)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT799")
                    .IsFixedLength(true);

                entity.Property(e => e.Mt999)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT999")
                    .IsFixedLength(true);

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.RemitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SwiftFile).HasMaxLength(50);

                entity.Property(e => e.Swuuid)
                    .HasMaxLength(40)
                    .HasColumnName("SWUuid");

                entity.Property(e => e.ToBank).HasMaxLength(13);

                entity.Property(e => e.ToName).HasMaxLength(148);

                entity.Property(e => e.ToNego).HasMaxLength(13);

                entity.Property(e => e.ToRefer).HasMaxLength(35);

                entity.Property(e => e.ToWhom).HasMaxLength(148);

                entity.Property(e => e.ValueDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PSwimtr>(entity =>
            {
                entity.HasKey(e => new { e.RefNumber, e.Seqno });

                entity.ToTable("pSWIMTR");

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F23).HasMaxLength(4);

                entity.Property(e => e.F26).HasMaxLength(3);

                entity.Property(e => e.F32a)
                    .HasMaxLength(25)
                    .HasColumnName("F32A");

                entity.Property(e => e.F50k)
                    .HasMaxLength(144)
                    .HasColumnName("F50K");

                entity.Property(e => e.F56a)
                    .HasMaxLength(12)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(144)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(12)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(12)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(144)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(12)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(12)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(144)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(12)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F59a)
                    .HasMaxLength(35)
                    .HasColumnName("F59A");

                entity.Property(e => e.F59d)
                    .HasMaxLength(144)
                    .HasColumnName("F59D");

                entity.Property(e => e.F71a)
                    .HasMaxLength(3)
                    .HasColumnName("F71A");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(7)
                    .HasColumnName("MTType");

                entity.Property(e => e.ToWhom).HasMaxLength(144);

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(15)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trseq).HasColumnName("TRSeq");
            });

            modelBuilder.Entity<PSwmisc>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.RefNumber, e.Seqno });

                entity.ToTable("pSWMisc");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(15)
                    .HasColumnName("DOCNumber");

                entity.Property(e => e.Docseq).HasColumnName("DOCSeq");

                entity.Property(e => e.F20).HasMaxLength(16);

                entity.Property(e => e.F21).HasMaxLength(16);

                entity.Property(e => e.F32a)
                    .HasMaxLength(25)
                    .HasColumnName("F32A");

                entity.Property(e => e.F52a)
                    .HasMaxLength(14)
                    .HasColumnName("F52A");

                entity.Property(e => e.F52d)
                    .HasMaxLength(150)
                    .HasColumnName("F52D");

                entity.Property(e => e.F53a)
                    .HasMaxLength(14)
                    .HasColumnName("F53A");

                entity.Property(e => e.F53d)
                    .HasMaxLength(150)
                    .HasColumnName("F53D");

                entity.Property(e => e.F53uid)
                    .HasMaxLength(35)
                    .HasColumnName("F53UID");

                entity.Property(e => e.F54a)
                    .HasMaxLength(14)
                    .HasColumnName("F54A");

                entity.Property(e => e.F54d)
                    .HasMaxLength(150)
                    .HasColumnName("F54D");

                entity.Property(e => e.F54uid)
                    .HasMaxLength(35)
                    .HasColumnName("F54UID");

                entity.Property(e => e.F56a)
                    .HasMaxLength(14)
                    .HasColumnName("F56A");

                entity.Property(e => e.F56d)
                    .HasMaxLength(150)
                    .HasColumnName("F56D");

                entity.Property(e => e.F56uid)
                    .HasMaxLength(35)
                    .HasColumnName("F56UID");

                entity.Property(e => e.F57a)
                    .HasMaxLength(14)
                    .HasColumnName("F57A");

                entity.Property(e => e.F57d)
                    .HasMaxLength(150)
                    .HasColumnName("F57D");

                entity.Property(e => e.F57uid)
                    .HasMaxLength(35)
                    .HasColumnName("F57UID");

                entity.Property(e => e.F58a)
                    .HasMaxLength(12)
                    .HasColumnName("F58A");

                entity.Property(e => e.F58d)
                    .HasMaxLength(150)
                    .HasColumnName("F58D");

                entity.Property(e => e.F58uid)
                    .HasMaxLength(35)
                    .HasColumnName("F58UID");

                entity.Property(e => e.F72).HasMaxLength(432);

                entity.Property(e => e.F79).HasMaxLength(2100);

                entity.Property(e => e.Mttype)
                    .HasMaxLength(7)
                    .HasColumnName("MTType");

                entity.Property(e => e.Swseq).HasColumnName("SWSeq");

                entity.Property(e => e.ToWhom).HasMaxLength(150);

                entity.Property(e => e.Xx).HasColumnName("xx");
            });

            modelBuilder.Entity<PSwprint>(entity =>
            {
                entity.HasKey(e => new { e.SwfileName, e.Swuser, e.SwSeq });

                entity.ToTable("pSWPrint");

                entity.Property(e => e.SwfileName)
                    .HasMaxLength(70)
                    .HasColumnName("SWFileName");

                entity.Property(e => e.Swuser)
                    .HasMaxLength(12)
                    .HasColumnName("SWUser");

                entity.Property(e => e.SwDesc)
                    .HasMaxLength(6600)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSwprintFm>(entity =>
            {
                entity.HasKey(e => new { e.SwfileName, e.Swuser, e.SwSeq })
                    .HasName("PK_pSWPintFM");

                entity.ToTable("pSWPrintFM");

                entity.Property(e => e.SwfileName)
                    .HasMaxLength(70)
                    .HasColumnName("SWFileName");

                entity.Property(e => e.Swuser)
                    .HasMaxLength(12)
                    .HasColumnName("SWUser");

                entity.Property(e => e.SwDesc)
                    .HasMaxLength(6600)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSwsending>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pSWSending");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PSwtextLoad>(entity =>
            {
                entity.HasKey(e => new { e.LcswName, e.Lcno, e.Lcline });

                entity.ToTable("pSWTextLoad");

                entity.Property(e => e.LcswName)
                    .HasMaxLength(20)
                    .HasColumnName("LCSwName");

                entity.Property(e => e.Lcno)
                    .HasMaxLength(15)
                    .HasColumnName("LCNo");

                entity.Property(e => e.Lcline).HasColumnName("LCLine");

                entity.Property(e => e.AccessId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ID");

                entity.Property(e => e.EditionNumber)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Edition_Number");

                entity.Property(e => e.Lcdata)
                    .HasMaxLength(200)
                    .HasColumnName("LCData");

                entity.Property(e => e.MsgNo).HasMaxLength(3);

                entity.Property(e => e.TradeRefNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Trade_ref_Number");
            });

            modelBuilder.Entity<PTradeApp>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.TradeRefNumber, e.EditionNumber });

                entity.ToTable("pTradeApp");

                entity.Property(e => e.CompanyId).HasColumnName("Company_ID");

                entity.Property(e => e.TradeRefNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Trade_ref_Number");

                entity.Property(e => e.EditionNumber)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Edition_Number");

                entity.Property(e => e.LcNumber)
                    .HasMaxLength(13)
                    .HasColumnName("LC_Number");
            });

            modelBuilder.Entity<PTranFcdBalance>(entity =>
            {
                entity.HasKey(e => new { e.FcdAccNo, e.TranDoc });

                entity.ToTable("pTranFcdBalance");

                entity.Property(e => e.FcdAccNo).HasMaxLength(13);

                entity.Property(e => e.TranDoc).HasMaxLength(15);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DepositDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FcdCcy).HasMaxLength(3);

                entity.Property(e => e.FcdCross)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdSavFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HoldFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.TranFflag)
                    .HasMaxLength(5)
                    .HasColumnName("TranFFlag");

                entity.Property(e => e.TranFstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TranFStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.TranFtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TranFType")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<PTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pTransfer");

                entity.Property(e => e.AdviceCom).HasColumnName("ADVICE_COM");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ALLOCATION")
                    .IsFixedLength(true);

                entity.Property(e => e.AmendCom).HasColumnName("AMEND_COM");

                entity.Property(e => e.AmendtrnCom).HasColumnName("AMENDTRN_COM");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(10)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUSINESS_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.CableCom).HasColumnName("CABLE_COM");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ConfirmCom).HasColumnName("CONFIRM_COM");

                entity.Property(e => e.EventDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExportAdviceNo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("EXPORT_ADVICE_NO");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GENACC_FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_Use")
                    .IsFixedLength(true);

                entity.Property(e => e.LcCurrency)
                    .HasMaxLength(3)
                    .HasColumnName("LC_Currency");

                entity.Property(e => e.LcNo)
                    .HasMaxLength(35)
                    .HasColumnName("LC_NO");

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .HasColumnName("METHOD");

                entity.Property(e => e.OtherCharge).HasColumnName("OTHER_CHARGE");

                entity.Property(e => e.PayRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAY_REFUND")
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_INSTRU")
                    .IsFixedLength(true);

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.PrevExpiry)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PREV_EXPIRY");

                entity.Property(e => e.ReasonOfCancel)
                    .HasMaxLength(140)
                    .HasColumnName("REASON_OF_CANCEL");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceiptNo)
                    .HasMaxLength(15)
                    .HasColumnName("RECEIPT_NO");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.RefundTax).HasColumnName("REFUND_TAX");

                entity.Property(e => e.Remark)
                    .HasMaxLength(140)
                    .HasColumnName("REMARK");

                entity.Property(e => e.SeqTransfer).HasColumnName("SEQ_TRANSFER");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.SubstationDoc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUBSTATION_DOC")
                    .IsFixedLength(true);

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TransferAmount).HasColumnName("TRANSFER_AMOUNT");

                entity.Property(e => e.TransferAmtCancel).HasColumnName("TRANSFER_AMT_CANCEL");

                entity.Property(e => e.TransferCom).HasColumnName("TRANSFER_COM");

                entity.Property(e => e.TransferComRate).HasColumnName("TRANSFER_COM_RATE");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANSFER_DATE");

                entity.Property(e => e.TransferExpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANSFER_EXPIRY_DATE");

                entity.Property(e => e.TransferId)
                    .HasMaxLength(13)
                    .HasColumnName("TRANSFER_ID");

                entity.Property(e => e.TransferInfo)
                    .HasMaxLength(180)
                    .HasColumnName("TRANSFER_INFO");

                entity.Property(e => e.TransferOther)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFER_OTHER")
                    .IsFixedLength(true);

                entity.Property(e => e.TransferRate).HasColumnName("TRANSFER_RATE");

                entity.Property(e => e.TransferType)
                    .HasMaxLength(3)
                    .HasColumnName("TRANSFER_TYPE");

                entity.Property(e => e.TypeOfChargeTransfer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_OF_CHARGE_TRANSFER")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(8)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(35)
                    .HasColumnName("VOUCH_ID");
            });

            modelBuilder.Entity<Pexbc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pexbc2");

                entity.Property(e => e.Acbahtnet).HasColumnName("ACBAHTNET");

                entity.Property(e => e.Accruamt).HasColumnName("ACCRUAMT");

                entity.Property(e => e.Accrubht).HasColumnName("ACCRUBHT");

                entity.Property(e => e.AdjLessChargeAmt).HasColumnName("ADJ_LESS_CHARGE_AMT");

                entity.Property(e => e.AdjTotNegoAmount).HasColumnName("ADJ_TOT_NEGO_AMOUNT");

                entity.Property(e => e.AdjustCoveringAmt).HasColumnName("ADJUST_COVERING_AMT");

                entity.Property(e => e.AdjustLcRef).HasColumnName("ADJUST_LC_REF");

                entity.Property(e => e.AdjustTenor).HasColumnName("ADJUST_TENOR");

                entity.Property(e => e.AdviceFormat)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_FORMAT");

                entity.Property(e => e.AdviceIssueBank)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_ISSUE_BANK");

                entity.Property(e => e.AgentBankId).HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentBankInfo).HasColumnName("AGENT_BANK_INFO");

                entity.Property(e => e.AgentBankNostro).HasColumnName("AGENT_BANK_NOSTRO");

                entity.Property(e => e.AgentBankRef).HasColumnName("AGENT_BANK_REF");

                entity.Property(e => e.Allocation).HasColumnName("ALLOCATION");

                entity.Property(e => e.Appvno).HasColumnName("APPVNO");

                entity.Property(e => e.Art44a).HasColumnName("ART44A");

                entity.Property(e => e.AuthCode).HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasMaxLength(255)
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.Autooverdue)
                    .HasMaxLength(255)
                    .HasColumnName("AUTOOVERDUE");

                entity.Property(e => e.Bahtnet).HasColumnName("BAHTNET");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("BCPastDue");

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId).HasColumnName("BENE_ID");

                entity.Property(e => e.BeneInfo)
                    .HasMaxLength(255)
                    .HasColumnName("BENE_INFO");

                entity.Property(e => e.Bfintamt).HasColumnName("BFINTAMT");

                entity.Property(e => e.Bfintthb).HasColumnName("BFINTTHB");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.BusinessType).HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CampaignCode).HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct).HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref).HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum).HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType).HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId).HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate).HasColumnName("CFRRate");

                entity.Property(e => e.ChargeAcc)
                    .HasMaxLength(255)
                    .HasColumnName("CHARGE_ACC");

                entity.Property(e => e.ClaimFormat).HasColumnName("CLAIM_FORMAT");

                entity.Property(e => e.ClaimPayBy).HasColumnName("CLAIM_PAY_BY");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CntyCode).HasColumnName("CNTY_CODE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(255)
                    .HasColumnName("COLLECT_REFUND");

                entity.Property(e => e.ComfirmDue)
                    .HasColumnType("datetime")
                    .HasColumnName("COMFIRM_DUE");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.Commontt).HasColumnName("COMMONTT");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CONFIRM_DATE");

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CoveringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COVERING_DATE");

                entity.Property(e => e.CoveringFor).HasColumnName("COVERING_FOR");

                entity.Property(e => e.CreditCurrency).HasColumnName("CREDIT_CURRENCY");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.CustAo).HasColumnName("Cust_AO");

                entity.Property(e => e.CustLo).HasColumnName("Cust_LO");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasColumnType("datetime");

                entity.Property(e => e.Datelastaccru)
                    .HasColumnType("datetime")
                    .HasColumnName("DATELASTACCRU");

                entity.Property(e => e.DiscBaseDay).HasColumnName("DISC_BASE_DAY");

                entity.Property(e => e.DiscDaysPlusMinus).HasColumnName("DISC_DAYS_PLUS_MINUS");

                entity.Property(e => e.DiscReceive).HasColumnName("DISC_RECEIVE");

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("DISCOUNT_DAY");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.DiscrepancyType).HasColumnName("DISCREPANCY_TYPE");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocumentCopy)
                    .HasMaxLength(255)
                    .HasColumnName("DOCUMENT_COPY");

                entity.Property(e => e.Draft)
                    .HasMaxLength(255)
                    .HasColumnName("DRAFT");

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy).HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.DraweeInfo).HasColumnName("DRAWEE_INFO");

                entity.Property(e => e.Endorsed).HasColumnName("ENDORSED");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(255)
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode).HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.EventType).HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchangeRate).HasColumnName("EXCHANGE_RATE");

                entity.Property(e => e.ExportBcNo).HasColumnName("EXPORT_BC_NO");

                entity.Property(e => e.Facno).HasColumnName("FACNO");

                entity.Property(e => e.FbAmt).HasColumnName("FB_AMT");

                entity.Property(e => e.FbAmtThb).HasColumnName("FB_AMT_THB");

                entity.Property(e => e.FbCurrency).HasColumnName("FB_CURRENCY");

                entity.Property(e => e.FbRate).HasColumnName("FB_RATE");

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.ForwardConractNo).HasColumnName("FORWARD_CONRACT_NO");

                entity.Property(e => e.ForwardConractNo1).HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2).HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3).HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4).HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5).HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6).HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("GENACC_FLAG");

                entity.Property(e => e.GoodCode).HasColumnName("GOOD_CODE");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.IntAmtThb).HasColumnName("INT_AMT_THB");

                entity.Property(e => e.IntBaseRate).HasColumnName("INT_BASE_RATE");

                entity.Property(e => e.IntRateMethod).HasColumnName("INT_RATE_METHOD");

                entity.Property(e => e.IntSpreadRate).HasColumnName("INT_SPREAD_RATE");

                entity.Property(e => e.Intbalance).HasColumnName("INTBALANCE");

                entity.Property(e => e.Intcode)
                    .HasMaxLength(255)
                    .HasColumnName("INTCODE");

                entity.Property(e => e.Intflag)
                    .HasMaxLength(255)
                    .HasColumnName("INTFLAG");

                entity.Property(e => e.Invoice).HasColumnName("INVOICE");

                entity.Property(e => e.IssueBankId).HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankInfo).HasColumnName("ISSUE_BANK_INFO");

                entity.Property(e => e.Lastintamt).HasColumnName("LASTINTAMT");

                entity.Property(e => e.Lastintdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTINTDATE");

                entity.Property(e => e.LcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LC_DATE");

                entity.Property(e => e.Lcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("LCOVERDUE");

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method).HasColumnName("METHOD");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(255)
                    .HasColumnName("MT202");

                entity.Property(e => e.Mt750).HasColumnName("MT750");

                entity.Property(e => e.Narrative).HasColumnName("NARRATIVE");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.Oveseqno).HasColumnName("OVESEQNO");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type1");

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type2");

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type3");

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type4");

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type5");

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type6");

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.Pastduedate)
                    .HasColumnType("datetime")
                    .HasColumnName("PASTDUEDATE");

                entity.Property(e => e.Pastdueflag)
                    .HasMaxLength(255)
                    .HasColumnName("PASTDUEFLAG");

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PaymentInstrc).HasColumnName("PAYMENT_INSTRC");

                entity.Property(e => e.PaymentInstru).HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.Paymenttype)
                    .HasMaxLength(255)
                    .HasColumnName("PAYMENTTYPE");

                entity.Property(e => e.PlusMinusDisc)
                    .HasMaxLength(255)
                    .HasColumnName("PLUS_MINUS_DISC");

                entity.Property(e => e.Prnbalance).HasColumnName("PRNBALANCE");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.RecStatus).HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo).HasColumnName("RECEIVED_NO");

                entity.Property(e => e.RecordType).HasColumnName("RECORD_TYPE");

                entity.Property(e => e.ReferBcNo).HasColumnName("REFER_BC_NO");

                entity.Property(e => e.RefundDiscReceive).HasColumnName("REFUND_DISC_RECEIVE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.ReimburseBankId).HasColumnName("REIMBURSE_BANK_ID");

                entity.Property(e => e.ReimburseBankInfo).HasColumnName("REIMBURSE_BANK_INFO");

                entity.Property(e => e.RelCode).HasColumnName("REL_CODE");

                entity.Property(e => e.ReletePack).HasColumnName("RELETE_PACK");

                entity.Property(e => e.RemitClaimType)
                    .HasMaxLength(255)
                    .HasColumnName("REMIT_CLAIM_TYPE");

                entity.Property(e => e.Restrict).HasColumnName("RESTRICT");

                entity.Property(e => e.RestrictFrBkAddr1).HasColumnName("RESTRICT_FR_BK_ADDR1");

                entity.Property(e => e.RestrictFrBkAddr2).HasColumnName("RESTRICT_FR_BK_ADDR2");

                entity.Property(e => e.RestrictFrBkAddr3).HasColumnName("RESTRICT_FR_BK_ADDR3");

                entity.Property(e => e.RestrictFrBkName).HasColumnName("RESTRICT_FR_BK_NAME");

                entity.Property(e => e.RestrictRefer).HasColumnName("RESTRICT_REFER");

                entity.Property(e => e.RestrictToBkAddr1).HasColumnName("RESTRICT_TO_BK_ADDR1");

                entity.Property(e => e.RestrictToBkAddr2).HasColumnName("RESTRICT_TO_BK_ADDR2");

                entity.Property(e => e.RestrictToBkAddr3).HasColumnName("RESTRICT_TO_BK_ADDR3");

                entity.Property(e => e.RestrictToBkName).HasColumnName("RESTRICT_TO_BK_NAME");

                entity.Property(e => e.SellingRate).HasColumnName("SELLING_RATE");

                entity.Property(e => e.SeqAcceptDue).HasColumnName("SEQ_ACCEPT_DUE");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightBasis).HasColumnName("SIGHT_BASIS");

                entity.Property(e => e.SightDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_DUE_DATE");

                entity.Property(e => e.SightStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_START_DATE");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.Suspamt).HasColumnName("SUSPAMT");

                entity.Property(e => e.Suspbht).HasColumnName("SUSPBHT");

                entity.Property(e => e.SwiftBank).HasColumnName("SWIFT_BANK");

                entity.Property(e => e.SwiftDisc).HasColumnName("SWIFT_DISC");

                entity.Property(e => e.SwiftMail).HasColumnName("SWIFT_MAIL");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDayDesc).HasColumnName("TENOR_DAY_DESC");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.TermStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_START_DATE");

                entity.Property(e => e.ThirdBankId).HasColumnName("THIRD_BANK_ID");

                entity.Property(e => e.ThirdBankInfo).HasColumnName("THIRD_BANK_INFO");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");

                entity.Property(e => e.Totalaccruamt).HasColumnName("TOTALACCRUAMT");

                entity.Property(e => e.Totalaccrubht).HasColumnName("TOTALACCRUBHT");

                entity.Property(e => e.Totalsuspamt).HasColumnName("TOTALSUSPAMT");

                entity.Property(e => e.Totalsuspbht).HasColumnName("TOTALSUSPBHT");

                entity.Property(e => e.Txtdocument).HasColumnName("TXTDOCUMENT");

                entity.Property(e => e.TypeOfAccount).HasColumnName("TYPE_OF_ACCOUNT");

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(255)
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId).HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("ValueDate");

                entity.Property(e => e.VouchId).HasColumnName("VOUCH_ID");
            });

            modelBuilder.Entity<Pexlc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pexlc1");

                entity.Property(e => e.Acbahtnet)
                    .HasMaxLength(255)
                    .HasColumnName("ACBAHTNET");

                entity.Property(e => e.Accruamt).HasColumnName("ACCRUAMT");

                entity.Property(e => e.Accrubht).HasColumnName("ACCRUBHT");

                entity.Property(e => e.AdjLessChargeAmt).HasColumnName("ADJ_LESS_CHARGE_AMT");

                entity.Property(e => e.AdjTotNegoAmount).HasColumnName("ADJ_TOT_NEGO_AMOUNT");

                entity.Property(e => e.AdjustCoveringAmt).HasColumnName("ADJUST_COVERING_AMT");

                entity.Property(e => e.AdjustLcRef)
                    .HasMaxLength(255)
                    .HasColumnName("ADJUST_LC_REF");

                entity.Property(e => e.AdjustTenor)
                    .HasMaxLength(255)
                    .HasColumnName("ADJUST_TENOR");

                entity.Property(e => e.AdviceFormat)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_FORMAT");

                entity.Property(e => e.AdviceIssueBank)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_ISSUE_BANK");

                entity.Property(e => e.AgentBankId)
                    .HasMaxLength(255)
                    .HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentBankInfo)
                    .HasMaxLength(255)
                    .HasColumnName("AGENT_BANK_INFO");

                entity.Property(e => e.AgentBankNostro)
                    .HasMaxLength(255)
                    .HasColumnName("AGENT_BANK_NOSTRO");

                entity.Property(e => e.AgentBankRef)
                    .HasMaxLength(255)
                    .HasColumnName("AGENT_BANK_REF");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(255)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.ApplicantName)
                    .HasMaxLength(255)
                    .HasColumnName("APPLICANT_NAME");

                entity.Property(e => e.Appvno)
                    .HasMaxLength(255)
                    .HasColumnName("APPVNO");

                entity.Property(e => e.Art44a).HasColumnName("ART44A");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(255)
                    .HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.Autooverdue)
                    .HasMaxLength(255)
                    .HasColumnName("AUTOOVERDUE");

                entity.Property(e => e.Bahtnet).HasColumnName("BAHTNET");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId)
                    .HasMaxLength(255)
                    .HasColumnName("BENE_ID");

                entity.Property(e => e.BeneInfo)
                    .HasMaxLength(255)
                    .HasColumnName("BENE_INFO");

                entity.Property(e => e.Bfintamt).HasColumnName("BFINTAMT");

                entity.Property(e => e.Bfintthb).HasColumnName("BFINTTHB");

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(255)
                    .HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChargeAcc)
                    .HasMaxLength(255)
                    .HasColumnName("CHARGE_ACC");

                entity.Property(e => e.ClaimFormat)
                    .HasMaxLength(255)
                    .HasColumnName("CLAIM_FORMAT");

                entity.Property(e => e.ClaimPayBy).HasColumnName("CLAIM_PAY_BY");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CntyCode)
                    .HasMaxLength(255)
                    .HasColumnName("CNTY_CODE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(255)
                    .HasColumnName("COLLECT_REFUND");

                entity.Property(e => e.ComfirmDue)
                    .HasColumnType("datetime")
                    .HasColumnName("COMFIRM_DUE");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.Commontt).HasColumnName("COMMONTT");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CONFIRM_DATE");

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CoveringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COVERING_DATE");

                entity.Property(e => e.CoveringFor)
                    .HasMaxLength(255)
                    .HasColumnName("COVERING_FOR");

                entity.Property(e => e.CreditCurrency)
                    .HasMaxLength(255)
                    .HasColumnName("CREDIT_CURRENCY");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.CustAo)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_AO");

                entity.Property(e => e.CustLo)
                    .HasMaxLength(255)
                    .HasColumnName("Cust_LO");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasColumnType("datetime");

                entity.Property(e => e.Datelastaccru)
                    .HasColumnType("datetime")
                    .HasColumnName("DATELASTACCRU");

                entity.Property(e => e.DiscBaseDay).HasColumnName("DISC_BASE_DAY");

                entity.Property(e => e.DiscDaysPlusMinus).HasColumnName("DISC_DAYS_PLUS_MINUS");

                entity.Property(e => e.DiscReceive).HasColumnName("DISC_RECEIVE");

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("DISCOUNT_DAY");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.DiscrepancyType)
                    .HasMaxLength(255)
                    .HasColumnName("DISCREPANCY_TYPE");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocumentCopy)
                    .HasMaxLength(255)
                    .HasColumnName("DOCUMENT_COPY");

                entity.Property(e => e.Draft)
                    .HasMaxLength(255)
                    .HasColumnName("DRAFT");

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(255)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.Endorsed).HasColumnName("ENDORSED");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode)
                    .HasMaxLength(255)
                    .HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.EventType)
                    .HasMaxLength(255)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchangeRate).HasColumnName("EXCHANGE_RATE");

                entity.Property(e => e.ExportLcNo)
                    .HasMaxLength(255)
                    .HasColumnName("EXPORT_LC_NO");

                entity.Property(e => e.Facno)
                    .HasMaxLength(255)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FbAmt).HasColumnName("FB_AMT");

                entity.Property(e => e.FbAmtThb).HasColumnName("FB_AMT_THB");

                entity.Property(e => e.FbCurrency)
                    .HasMaxLength(255)
                    .HasColumnName("FB_CURRENCY");

                entity.Property(e => e.FbRate).HasColumnName("FB_RATE");

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.ForwardConractNo)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO");

                entity.Property(e => e.ForwardConractNo1)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6)
                    .HasMaxLength(255)
                    .HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("GENACC_FLAG");

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(255)
                    .HasColumnName("GOOD_CODE");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.IntAmtThb).HasColumnName("INT_AMT_THB");

                entity.Property(e => e.IntBaseRate).HasColumnName("INT_BASE_RATE");

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntRateMethod).HasColumnName("INT_RATE_METHOD");

                entity.Property(e => e.IntSpreadRate).HasColumnName("INT_SPREAD_RATE");

                entity.Property(e => e.Intbalance).HasColumnName("INTBALANCE");

                entity.Property(e => e.Intcode)
                    .HasMaxLength(255)
                    .HasColumnName("INTCODE");

                entity.Property(e => e.Intflag)
                    .HasMaxLength(255)
                    .HasColumnName("INTFLAG");

                entity.Property(e => e.Invoice)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICE");

                entity.Property(e => e.IssueBankId)
                    .HasMaxLength(255)
                    .HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankInfo)
                    .HasMaxLength(255)
                    .HasColumnName("ISSUE_BANK_INFO");

                entity.Property(e => e.Lastintamt).HasColumnName("LASTINTAMT");

                entity.Property(e => e.Lastintdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTINTDATE");

                entity.Property(e => e.LcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LC_DATE");

                entity.Property(e => e.LcRefNo)
                    .HasMaxLength(255)
                    .HasColumnName("LC_REF_NO");

                entity.Property(e => e.Lcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("LCOVERDUE");

                entity.Property(e => e.LcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("LCPastDue");

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method)
                    .HasMaxLength(255)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(255)
                    .HasColumnName("MT202");

                entity.Property(e => e.Mt750).HasColumnName("MT750");

                entity.Property(e => e.Narrative)
                    .HasColumnType("ntext")
                    .HasColumnName("NARRATIVE");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.Oveseqno).HasColumnName("OVESEQNO");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type1");

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type2");

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type3");

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type4");

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type5");

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type6");

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.Pastduedate)
                    .HasColumnType("datetime")
                    .HasColumnName("PASTDUEDATE");

                entity.Property(e => e.Pastdueflag)
                    .HasMaxLength(255)
                    .HasColumnName("PASTDUEFLAG");

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PaymentInstrc)
                    .HasColumnType("ntext")
                    .HasColumnName("PAYMENT_INSTRC");

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(255)
                    .HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.Paymenttype)
                    .HasMaxLength(255)
                    .HasColumnName("PAYMENTTYPE");

                entity.Property(e => e.PlusMinusDisc)
                    .HasMaxLength(255)
                    .HasColumnName("PLUS_MINUS_DISC");

                entity.Property(e => e.Prnbalance).HasColumnName("PRNBALANCE");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(255)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(255)
                    .HasColumnName("RECEIVED_NO");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(255)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.ReferLcNo)
                    .HasMaxLength(255)
                    .HasColumnName("REFER_LC_NO");

                entity.Property(e => e.RefundDiscReceive).HasColumnName("REFUND_DISC_RECEIVE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.ReimburseBankId)
                    .HasMaxLength(255)
                    .HasColumnName("REIMBURSE_BANK_ID");

                entity.Property(e => e.ReimburseBankInfo)
                    .HasMaxLength(255)
                    .HasColumnName("REIMBURSE_BANK_INFO");

                entity.Property(e => e.RelCode)
                    .HasMaxLength(255)
                    .HasColumnName("REL_CODE");

                entity.Property(e => e.ReletePack)
                    .HasMaxLength(255)
                    .HasColumnName("RELETE_PACK");

                entity.Property(e => e.RemitClaimType)
                    .HasMaxLength(255)
                    .HasColumnName("REMIT_CLAIM_TYPE");

                entity.Property(e => e.Restrict).HasColumnName("RESTRICT");

                entity.Property(e => e.RestrictFrBkAddr1)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_FR_BK_ADDR1");

                entity.Property(e => e.RestrictFrBkAddr2)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_FR_BK_ADDR2");

                entity.Property(e => e.RestrictFrBkAddr3)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_FR_BK_ADDR3");

                entity.Property(e => e.RestrictFrBkName)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_FR_BK_NAME");

                entity.Property(e => e.RestrictRefer)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_REFER");

                entity.Property(e => e.RestrictToBkAddr1)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_TO_BK_ADDR1");

                entity.Property(e => e.RestrictToBkAddr2)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_TO_BK_ADDR2");

                entity.Property(e => e.RestrictToBkAddr3)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_TO_BK_ADDR3");

                entity.Property(e => e.RestrictToBkName)
                    .HasMaxLength(255)
                    .HasColumnName("RESTRICT_TO_BK_NAME");

                entity.Property(e => e.SellingRate).HasColumnName("SELLING_RATE");

                entity.Property(e => e.SeqAcceptDue).HasColumnName("SEQ_ACCEPT_DUE");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightBasis).HasColumnName("SIGHT_BASIS");

                entity.Property(e => e.SightDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_DUE_DATE");

                entity.Property(e => e.SightStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_START_DATE");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.Suspamt).HasColumnName("SUSPAMT");

                entity.Property(e => e.Suspbht).HasColumnName("SUSPBHT");

                entity.Property(e => e.SwiftBank)
                    .HasMaxLength(255)
                    .HasColumnName("SWIFT_BANK");

                entity.Property(e => e.SwiftDisc)
                    .HasColumnType("ntext")
                    .HasColumnName("SWIFT_DISC");

                entity.Property(e => e.SwiftMail)
                    .HasColumnType("ntext")
                    .HasColumnName("SWIFT_MAIL");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDayDesc)
                    .HasMaxLength(255)
                    .HasColumnName("TENOR_DAY_DESC");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.TermStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_START_DATE");

                entity.Property(e => e.ThirdBankId)
                    .HasMaxLength(255)
                    .HasColumnName("THIRD_BANK_ID");

                entity.Property(e => e.ThirdBankInfo)
                    .HasMaxLength(255)
                    .HasColumnName("THIRD_BANK_INFO");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");

                entity.Property(e => e.Totalaccruamt).HasColumnName("TOTALACCRUAMT");

                entity.Property(e => e.Totalaccrubht).HasColumnName("TOTALACCRUBHT");

                entity.Property(e => e.Totalsuspamt).HasColumnName("TOTALSUSPAMT");

                entity.Property(e => e.Totalsuspbht).HasColumnName("TOTALSUSPBHT");

                entity.Property(e => e.Txtdocument)
                    .HasColumnType("ntext")
                    .HasColumnName("TXTDOCUMENT");

                entity.Property(e => e.TypeOfAccount).HasColumnName("TYPE_OF_ACCOUNT");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("ValueDate");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(255)
                    .HasColumnName("VOUCH_ID");
            });

            modelBuilder.Entity<Pexlc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pexlc2");

                entity.Property(e => e.Acbahtnet).HasColumnName("ACBAHTNET");

                entity.Property(e => e.AcceptDate).HasColumnType("datetime");

                entity.Property(e => e.AcceptFlag).HasMaxLength(255);

                entity.Property(e => e.Accruamt).HasColumnName("ACCRUAMT");

                entity.Property(e => e.Accrubht).HasColumnName("ACCRUBHT");

                entity.Property(e => e.AdjLessChargeAmt).HasColumnName("ADJ_LESS_CHARGE_AMT");

                entity.Property(e => e.AdjTotNegoAmount).HasColumnName("ADJ_TOT_NEGO_AMOUNT");

                entity.Property(e => e.AdjustCoveringAmt).HasColumnName("ADJUST_COVERING_AMT");

                entity.Property(e => e.AdjustLcRef).HasColumnName("ADJUST_LC_REF");

                entity.Property(e => e.AdjustTenor).HasColumnName("ADJUST_TENOR");

                entity.Property(e => e.AdviceFormat)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_FORMAT");

                entity.Property(e => e.AdviceIssueBank)
                    .HasMaxLength(255)
                    .HasColumnName("ADVICE_ISSUE_BANK");

                entity.Property(e => e.AgentBankId).HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentBankInfo).HasColumnName("AGENT_BANK_INFO");

                entity.Property(e => e.AgentBankNostro).HasColumnName("AGENT_BANK_NOSTRO");

                entity.Property(e => e.AgentBankRef).HasColumnName("AGENT_BANK_REF");

                entity.Property(e => e.Allocation).HasColumnName("ALLOCATION");

                entity.Property(e => e.ApplicantInfo).HasColumnName("APPLICANT_INFO");

                entity.Property(e => e.ApplicantName).HasColumnName("APPLICANT_NAME");

                entity.Property(e => e.Appvno).HasColumnName("APPVNO");

                entity.Property(e => e.Art44a).HasColumnName("ART44A");

                entity.Property(e => e.AuthCode).HasColumnName("AUTH_CODE");

                entity.Property(e => e.AuthDate)
                    .HasMaxLength(255)
                    .HasColumnName("AUTH_DATE");

                entity.Property(e => e.Autooverdue)
                    .HasMaxLength(255)
                    .HasColumnName("AUTOOVERDUE");

                entity.Property(e => e.Bahtnet).HasColumnName("BAHTNET");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId).HasColumnName("BENE_ID");

                entity.Property(e => e.BeneInfo)
                    .HasMaxLength(255)
                    .HasColumnName("BENE_INFO");

                entity.Property(e => e.Bfintamt).HasColumnName("BFINTAMT");

                entity.Property(e => e.Bfintthb).HasColumnName("BFINTTHB");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(255)
                    .HasColumnName("BPOFlag");

                entity.Property(e => e.BusinessType).HasColumnName("BUSINESS_TYPE");

                entity.Property(e => e.CampaignCode).HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct).HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref).HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum).HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType).HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId).HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate).HasColumnName("CFRRate");

                entity.Property(e => e.ChargeAcc)
                    .HasMaxLength(255)
                    .HasColumnName("CHARGE_ACC");

                entity.Property(e => e.ClaimFormat).HasColumnName("CLAIM_FORMAT");

                entity.Property(e => e.ClaimPayBy).HasColumnName("CLAIM_PAY_BY");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CntyCode).HasColumnName("CNTY_CODE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.CollectRefund)
                    .HasMaxLength(255)
                    .HasColumnName("COLLECT_REFUND");

                entity.Property(e => e.ComfirmDue)
                    .HasColumnType("datetime")
                    .HasColumnName("COMFIRM_DUE");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.Commontt).HasColumnName("COMMONTT");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CONFIRM_DATE");

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CoveringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COVERING_DATE");

                entity.Property(e => e.CoveringFor).HasColumnName("COVERING_FOR");

                entity.Property(e => e.CreditCurrency).HasColumnName("CREDIT_CURRENCY");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.CustAo).HasColumnName("Cust_AO");

                entity.Property(e => e.CustLo).HasColumnName("Cust_LO");

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasColumnType("datetime");

                entity.Property(e => e.Datelastaccru)
                    .HasColumnType("datetime")
                    .HasColumnName("DATELASTACCRU");

                entity.Property(e => e.DiscBaseDay).HasColumnName("DISC_BASE_DAY");

                entity.Property(e => e.DiscDaysPlusMinus).HasColumnName("DISC_DAYS_PLUS_MINUS");

                entity.Property(e => e.DiscReceive).HasColumnName("DISC_RECEIVE");

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("DISCOUNT_DAY");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.DiscrepancyType).HasColumnName("DISCREPANCY_TYPE");

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.DocumentCopy)
                    .HasMaxLength(255)
                    .HasColumnName("DOCUMENT_COPY");

                entity.Property(e => e.Draft)
                    .HasMaxLength(255)
                    .HasColumnName("DRAFT");

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy).HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.Endorsed).HasColumnName("ENDORSED");

                entity.Property(e => e.EventDate)
                    .HasMaxLength(255)
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventMode).HasColumnName("EVENT_MODE");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.EventType).HasColumnName("EVENT_TYPE");

                entity.Property(e => e.ExchangeRate).HasColumnName("EXCHANGE_RATE");

                entity.Property(e => e.ExportLcNo).HasColumnName("EXPORT_LC_NO");

                entity.Property(e => e.Facno).HasColumnName("FACNO");

                entity.Property(e => e.FbAmt).HasColumnName("FB_AMT");

                entity.Property(e => e.FbAmtThb).HasColumnName("FB_AMT_THB");

                entity.Property(e => e.FbCurrency).HasColumnName("FB_CURRENCY");

                entity.Property(e => e.FbRate).HasColumnName("FB_RATE");

                entity.Property(e => e.FlagBack).HasMaxLength(255);

                entity.Property(e => e.ForwardConractNo).HasColumnName("FORWARD_CONRACT_NO");

                entity.Property(e => e.ForwardConractNo1).HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2).HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3).HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4).HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5).HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6).HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.GenaccDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GENACC_DATE");

                entity.Property(e => e.GenaccFlag)
                    .HasMaxLength(255)
                    .HasColumnName("GENACC_FLAG");

                entity.Property(e => e.GoodCode).HasColumnName("GOOD_CODE");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.IntAmtThb).HasColumnName("INT_AMT_THB");

                entity.Property(e => e.IntBaseRate).HasColumnName("INT_BASE_RATE");

                entity.Property(e => e.IntRateMethod).HasColumnName("INT_RATE_METHOD");

                entity.Property(e => e.IntSpreadRate).HasColumnName("INT_SPREAD_RATE");

                entity.Property(e => e.Intbalance).HasColumnName("INTBALANCE");

                entity.Property(e => e.Intcode)
                    .HasMaxLength(255)
                    .HasColumnName("INTCODE");

                entity.Property(e => e.Intflag)
                    .HasMaxLength(255)
                    .HasColumnName("INTFLAG");

                entity.Property(e => e.Invoice).HasColumnName("INVOICE");

                entity.Property(e => e.IssueBankId).HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.IssueBankInfo).HasColumnName("ISSUE_BANK_INFO");

                entity.Property(e => e.Lastintamt).HasColumnName("LASTINTAMT");

                entity.Property(e => e.Lastintdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTINTDATE");

                entity.Property(e => e.LcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LC_DATE");

                entity.Property(e => e.LcRefNo).HasColumnName("LC_REF_NO");

                entity.Property(e => e.Lcoverdue)
                    .HasMaxLength(255)
                    .HasColumnName("LCOVERDUE");

                entity.Property(e => e.LcpastDue)
                    .HasMaxLength(255)
                    .HasColumnName("LCPastDue");

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method).HasColumnName("METHOD");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(255)
                    .HasColumnName("MT202");

                entity.Property(e => e.Mt750).HasColumnName("MT750");

                entity.Property(e => e.Narrative).HasColumnName("NARRATIVE");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.Obaseday).HasColumnName("OBASEDAY");

                entity.Property(e => e.Ointcurrate).HasColumnName("OINTCURRATE");

                entity.Property(e => e.Ointday).HasColumnName("OINTDAY");

                entity.Property(e => e.Ointrate).HasColumnName("OINTRATE");

                entity.Property(e => e.Ointspdrate).HasColumnName("OINTSPDRATE");

                entity.Property(e => e.Oveseqno).HasColumnName("OVESEQNO");

                entity.Property(e => e.ParTnorType1)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type1");

                entity.Property(e => e.ParTnorType2)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type2");

                entity.Property(e => e.ParTnorType3)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type3");

                entity.Property(e => e.ParTnorType4)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type4");

                entity.Property(e => e.ParTnorType5)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type5");

                entity.Property(e => e.ParTnorType6)
                    .HasMaxLength(255)
                    .HasColumnName("ParTnor_Type6");

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.Pastduedate)
                    .HasColumnType("datetime")
                    .HasColumnName("PASTDUEDATE");

                entity.Property(e => e.Pastdueflag)
                    .HasMaxLength(255)
                    .HasColumnName("PASTDUEFLAG");

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PaymentInstrc).HasColumnName("PAYMENT_INSTRC");

                entity.Property(e => e.PaymentInstru).HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.Paymenttype)
                    .HasMaxLength(255)
                    .HasColumnName("PAYMENTTYPE");

                entity.Property(e => e.PendingPayable).HasColumnName("Pending_Payable");

                entity.Property(e => e.PlusMinusDisc)
                    .HasMaxLength(255)
                    .HasColumnName("PLUS_MINUS_DISC");

                entity.Property(e => e.Prnbalance).HasColumnName("PRNBALANCE");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.RecStatus).HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo).HasColumnName("RECEIVED_NO");

                entity.Property(e => e.RecordType).HasColumnName("RECORD_TYPE");

                entity.Property(e => e.ReferLcNo).HasColumnName("REFER_LC_NO");

                entity.Property(e => e.RefundDiscReceive).HasColumnName("REFUND_DISC_RECEIVE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.ReimburseBankId).HasColumnName("REIMBURSE_BANK_ID");

                entity.Property(e => e.ReimburseBankInfo).HasColumnName("REIMBURSE_BANK_INFO");

                entity.Property(e => e.RelCode).HasColumnName("REL_CODE");

                entity.Property(e => e.ReletePack).HasColumnName("RELETE_PACK");

                entity.Property(e => e.RemitClaimType)
                    .HasMaxLength(255)
                    .HasColumnName("REMIT_CLAIM_TYPE");

                entity.Property(e => e.Restrict).HasColumnName("RESTRICT");

                entity.Property(e => e.RestrictFrBkAddr1).HasColumnName("RESTRICT_FR_BK_ADDR1");

                entity.Property(e => e.RestrictFrBkAddr2).HasColumnName("RESTRICT_FR_BK_ADDR2");

                entity.Property(e => e.RestrictFrBkAddr3).HasColumnName("RESTRICT_FR_BK_ADDR3");

                entity.Property(e => e.RestrictFrBkName).HasColumnName("RESTRICT_FR_BK_NAME");

                entity.Property(e => e.RestrictRefer).HasColumnName("RESTRICT_REFER");

                entity.Property(e => e.RestrictToBkAddr1).HasColumnName("RESTRICT_TO_BK_ADDR1");

                entity.Property(e => e.RestrictToBkAddr2).HasColumnName("RESTRICT_TO_BK_ADDR2");

                entity.Property(e => e.RestrictToBkAddr3).HasColumnName("RESTRICT_TO_BK_ADDR3");

                entity.Property(e => e.RestrictToBkName).HasColumnName("RESTRICT_TO_BK_NAME");

                entity.Property(e => e.SellingRate).HasColumnName("SELLING_RATE");

                entity.Property(e => e.SeqAcceptDue).HasColumnName("SEQ_ACCEPT_DUE");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightBasis).HasColumnName("SIGHT_BASIS");

                entity.Property(e => e.SightDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_DUE_DATE");

                entity.Property(e => e.SightStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SIGHT_START_DATE");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.Suspamt).HasColumnName("SUSPAMT");

                entity.Property(e => e.Suspbht).HasColumnName("SUSPBHT");

                entity.Property(e => e.SwiftBank).HasColumnName("SWIFT_BANK");

                entity.Property(e => e.SwiftDisc).HasColumnName("SWIFT_DISC");

                entity.Property(e => e.SwiftMail).HasColumnName("SWIFT_MAIL");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorDay).HasColumnName("TENOR_DAY");

                entity.Property(e => e.TenorDayDesc).HasColumnName("TENOR_DAY_DESC");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.TermStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TERM_START_DATE");

                entity.Property(e => e.ThirdBankId).HasColumnName("THIRD_BANK_ID");

                entity.Property(e => e.ThirdBankInfo).HasColumnName("THIRD_BANK_INFO");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotalAmount).HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.TotalCharge).HasColumnName("TOTAL_CHARGE");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");

                entity.Property(e => e.Totalaccruamt).HasColumnName("TOTALACCRUAMT");

                entity.Property(e => e.Totalaccrubht).HasColumnName("TOTALACCRUBHT");

                entity.Property(e => e.Totalsuspamt).HasColumnName("TOTALSUSPAMT");

                entity.Property(e => e.Totalsuspbht).HasColumnName("TOTALSUSPBHT");

                entity.Property(e => e.Txtdocument).HasColumnName("TXTDOCUMENT");

                entity.Property(e => e.TypeOfAccount).HasColumnName("TYPE_OF_ACCOUNT");

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(255)
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId).HasColumnName("USER_ID");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");

                entity.Property(e => e.ValueDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("ValueDate");

                entity.Property(e => e.VouchId).HasColumnName("VOUCH_ID");

                entity.Property(e => e.WithOutFlag).HasMaxLength(255);

                entity.Property(e => e.WithOutType).HasMaxLength(255);

                entity.Property(e => e.WrefBankId).HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<Sheet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet1$");

                entity.Property(e => e.AccAmt1).HasMaxLength(255);

                entity.Property(e => e.AccAmt2).HasMaxLength(255);

                entity.Property(e => e.AccAmt3).HasMaxLength(255);

                entity.Property(e => e.AccNo1).HasMaxLength(255);

                entity.Property(e => e.AccNo2).HasMaxLength(255);

                entity.Property(e => e.AccNo3).HasMaxLength(255);

                entity.Property(e => e.Allocation).HasMaxLength(255);

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasMaxLength(255);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.ChqBank).HasMaxLength(255);

                entity.Property(e => e.ChqBran).HasMaxLength(255);

                entity.Property(e => e.ChqNo).HasMaxLength(255);

                entity.Property(e => e.CommBnet).HasMaxLength(255);

                entity.Property(e => e.CommCertify).HasMaxLength(255);

                entity.Property(e => e.CommFcd)
                    .HasMaxLength(255)
                    .HasColumnName("CommFCD");

                entity.Property(e => e.CommOther).HasMaxLength(255);

                entity.Property(e => e.CurrentAmt).HasMaxLength(255);

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.DateLastPaid).HasMaxLength(255);

                entity.Property(e => e.DueDate).HasMaxLength(255);

                entity.Property(e => e.EventDate).HasMaxLength(255);

                entity.Property(e => e.ExchRate).HasMaxLength(255);

                entity.Property(e => e.ExchRate2).HasMaxLength(255);

                entity.Property(e => e.F100).HasMaxLength(255);

                entity.Property(e => e.F101).HasMaxLength(255);

                entity.Property(e => e.F102).HasMaxLength(255);

                entity.Property(e => e.F103).HasMaxLength(255);

                entity.Property(e => e.F74).HasMaxLength(255);

                entity.Property(e => e.F75).HasMaxLength(255);

                entity.Property(e => e.F76).HasMaxLength(255);

                entity.Property(e => e.F77).HasMaxLength(255);

                entity.Property(e => e.F78).HasMaxLength(255);

                entity.Property(e => e.F79).HasMaxLength(255);

                entity.Property(e => e.F80).HasMaxLength(255);

                entity.Property(e => e.F81).HasMaxLength(255);

                entity.Property(e => e.F82).HasMaxLength(255);

                entity.Property(e => e.F83).HasMaxLength(255);

                entity.Property(e => e.F84).HasMaxLength(255);

                entity.Property(e => e.F85).HasMaxLength(255);

                entity.Property(e => e.F86).HasMaxLength(255);

                entity.Property(e => e.F87).HasMaxLength(255);

                entity.Property(e => e.F88).HasMaxLength(255);

                entity.Property(e => e.F89).HasMaxLength(255);

                entity.Property(e => e.F90).HasMaxLength(255);

                entity.Property(e => e.F91).HasMaxLength(255);

                entity.Property(e => e.F92).HasMaxLength(255);

                entity.Property(e => e.F93).HasMaxLength(255);

                entity.Property(e => e.F94).HasMaxLength(255);

                entity.Property(e => e.F95).HasMaxLength(255);

                entity.Property(e => e.F96).HasMaxLength(255);

                entity.Property(e => e.F97).HasMaxLength(255);

                entity.Property(e => e.F98).HasMaxLength(255);

                entity.Property(e => e.F99).HasMaxLength(255);

                entity.Property(e => e.FcdAccNo).HasMaxLength(255);

                entity.Property(e => e.FcdAccTerm).HasMaxLength(255);

                entity.Property(e => e.FcdAmt).HasMaxLength(255);

                entity.Property(e => e.FcdBalance).HasMaxLength(255);

                entity.Property(e => e.FcdCcy).HasMaxLength(255);

                entity.Property(e => e.FcdCross).HasMaxLength(255);

                entity.Property(e => e.FcdEntryDate).HasMaxLength(255);

                entity.Property(e => e.FcdInterest).HasMaxLength(255);

                entity.Property(e => e.FlagReverse).HasMaxLength(255);

                entity.Property(e => e.ForwardNo).HasMaxLength(255);

                entity.Property(e => e.FromDate).HasMaxLength(255);

                entity.Property(e => e.GoodsCode).HasMaxLength(255);

                entity.Property(e => e.HoldAmt).HasMaxLength(255);

                entity.Property(e => e.IntAmt).HasMaxLength(255);

                entity.Property(e => e.IntRate).HasMaxLength(255);

                entity.Property(e => e.IntSpread).HasMaxLength(255);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(255);

                entity.Property(e => e.MaintenAmt).HasMaxLength(255);

                entity.Property(e => e.Mixpayment).HasMaxLength(255);

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.Paytype).HasMaxLength(255);

                entity.Property(e => e.PrevFcdBal).HasMaxLength(255);

                entity.Property(e => e.ProfitAmt).HasMaxLength(255);

                entity.Property(e => e.PurposeCode).HasMaxLength(255);

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.ReceiptNo).HasMaxLength(255);

                entity.Property(e => e.RefAccount).HasMaxLength(255);

                entity.Property(e => e.RefTranDoc).HasMaxLength(255);

                entity.Property(e => e.RelateCode).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.TaxAmt).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.Thbbal)
                    .HasMaxLength(255)
                    .HasColumnName("THBBal");

                entity.Property(e => e.ToDate).HasMaxLength(255);

                entity.Property(e => e.TranChquAmt).HasMaxLength(255);

                entity.Property(e => e.TranCode).HasMaxLength(255);

                entity.Property(e => e.TranDept).HasMaxLength(255);

                entity.Property(e => e.TranDoc).HasMaxLength(255);

                entity.Property(e => e.TranDrAmt).HasMaxLength(255);

                entity.Property(e => e.TranFcashAmt)
                    .HasMaxLength(255)
                    .HasColumnName("TranFCashAmt");

                entity.Property(e => e.TranFcdAmt).HasMaxLength(255);

                entity.Property(e => e.TranFcdStatus).HasMaxLength(255);

                entity.Property(e => e.TranFdepos)
                    .HasMaxLength(255)
                    .HasColumnName("TranFDepos");

                entity.Property(e => e.TranFmethod)
                    .HasMaxLength(255)
                    .HasColumnName("TranFMethod");

                entity.Property(e => e.TranFtel)
                    .HasMaxLength(255)
                    .HasColumnName("TranFTel");

                entity.Property(e => e.TranSeqNo).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasMaxLength(255);

                entity.Property(e => e.UserCode).HasMaxLength(255);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(255)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<Sheet12>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet12$");

                entity.Property(e => e.AcAddr).HasMaxLength(255);

                entity.Property(e => e.AcBank).HasMaxLength(255);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.Allocation).HasMaxLength(255);

                entity.Property(e => e.Aocode).HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.AutoOverDue).HasMaxLength(255);

                entity.Property(e => e.BenCnty).HasMaxLength(255);

                entity.Property(e => e.BenInfo).HasMaxLength(255);

                entity.Property(e => e.BenName).HasMaxLength(255);

                entity.Property(e => e.Bladvice)
                    .HasMaxLength(255)
                    .HasColumnName("BLAdvice");

                entity.Property(e => e.Blbalance).HasColumnName("BLBalance");

                entity.Property(e => e.Blbase).HasColumnName("BLBase");

                entity.Property(e => e.Blday).HasColumnName("BLDay");

                entity.Property(e => e.Blexch).HasColumnName("BLExch");

                entity.Property(e => e.Blfwd)
                    .HasMaxLength(255)
                    .HasColumnName("BLFwd");

                entity.Property(e => e.BlintAmt).HasColumnName("BLIntAmt");

                entity.Property(e => e.BlintCode)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntCode");

                entity.Property(e => e.BlintRate).HasColumnName("BLIntRate");

                entity.Property(e => e.BlintStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLIntStartDate");

                entity.Property(e => e.Blinterest).HasColumnName("BLInterest");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(255)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.CcsAcct).HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType).HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId).HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChipAcBank).HasMaxLength(255);

                entity.Property(e => e.ChipInterm).HasMaxLength(255);

                entity.Property(e => e.ChipNego).HasMaxLength(255);

                entity.Property(e => e.CommDesc).HasMaxLength(255);

                entity.Property(e => e.CommExch).HasMaxLength(255);

                entity.Property(e => e.CommFcd)
                    .HasMaxLength(255)
                    .HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(255);

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("datetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("datetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("datetime");

                entity.Property(e => e.DateToStop).HasMaxLength(255);

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.Doamount).HasColumnName("DOAmount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Event).HasMaxLength(255);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag).HasMaxLength(255);

                entity.Property(e => e.EventMode).HasMaxLength(255);

                entity.Property(e => e.ExchBefore).HasMaxLength(255);

                entity.Property(e => e.FacNo).HasMaxLength(255);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(255)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge).HasColumnName("FBCharge");

                entity.Property(e => e.Fbengage).HasColumnName("FBEngage");

                entity.Property(e => e.Fbinterest).HasColumnName("FBInterest");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(255)
                    .HasColumnName("FCyPayFlag");

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag).HasMaxLength(255);

                entity.Property(e => e.Goods).HasMaxLength(255);

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.Ibcrate).HasColumnName("IBCRate");

                entity.Property(e => e.IntBefore).HasMaxLength(255);

                entity.Property(e => e.IntFixDate).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntPayType).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntStartDate).HasColumnType("datetime");

                entity.Property(e => e.IntermAddr).HasMaxLength(255);

                entity.Property(e => e.IntermBank).HasMaxLength(255);

                entity.Property(e => e.Invoice).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasColumnType("datetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(255);

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(255)
                    .HasColumnName("LCNumber");

                entity.Property(e => e.Locode)
                    .HasMaxLength(255)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Mtnego)
                    .HasMaxLength(255)
                    .HasColumnName("MTNego");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(255)
                    .HasColumnName("MTType");

                entity.Property(e => e.Nego799).HasMaxLength(255);

                entity.Property(e => e.Nego999).HasMaxLength(255);

                entity.Property(e => e.NegoBank).HasMaxLength(255);

                entity.Property(e => e.NegoCnty).HasMaxLength(255);

                entity.Property(e => e.NegoRefno).HasMaxLength(255);

                entity.Property(e => e.NegoTelex).HasMaxLength(255);

                entity.Property(e => e.NostAcinfo)
                    .HasMaxLength(255)
                    .HasColumnName("NostACInfo");

                entity.Property(e => e.OverdueDate).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.PayMethod).HasMaxLength(255);

                entity.Property(e => e.PayType).HasMaxLength(255);

                entity.Property(e => e.PrevDueDate).HasMaxLength(255);

                entity.Property(e => e.PrevFbchrg)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbeng)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBEng");

                entity.Property(e => e.PrevFbint)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBInt");

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.RecType).HasMaxLength(255);

                entity.Property(e => e.RefNumber).HasMaxLength(255);

                entity.Property(e => e.ReimBank).HasMaxLength(255);

                entity.Property(e => e.Relation).HasMaxLength(255);

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.SettleDate).HasMaxLength(255);

                entity.Property(e => e.SettleFlag).HasMaxLength(255);

                entity.Property(e => e.Sgamount).HasColumnName("SGAmount");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TenorType).HasMaxLength(255);

                entity.Property(e => e.Tramount).HasColumnName("TRAmount");

                entity.Property(e => e.Tramt1).HasColumnName("TRAmt1");

                entity.Property(e => e.Tramt2).HasColumnName("TRAmt2");

                entity.Property(e => e.Tramt3).HasColumnName("TRAmt3");

                entity.Property(e => e.Tramt4).HasColumnName("TRAmt4");

                entity.Property(e => e.Tramt5).HasColumnName("TRAmt5");

                entity.Property(e => e.Trbalance).HasColumnName("TRBalance");

                entity.Property(e => e.Trccy)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy");

                entity.Property(e => e.Trccy1).HasColumnName("TRCcy1");

                entity.Property(e => e.Trccy2).HasColumnName("TRCcy2");

                entity.Property(e => e.Trccy3).HasColumnName("TRCcy3");

                entity.Property(e => e.Trccy4).HasColumnName("TRCcy4");

                entity.Property(e => e.Trccy5).HasColumnName("TRCcy5");

                entity.Property(e => e.TrccyFlag)
                    .HasMaxLength(255)
                    .HasColumnName("TRCCyFlag");

                entity.Property(e => e.Trcont1).HasColumnName("TRCont1");

                entity.Property(e => e.Trcont2)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont2");

                entity.Property(e => e.Trcont3)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont3");

                entity.Property(e => e.Trcont4)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont4");

                entity.Property(e => e.Trcont5)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont5");

                entity.Property(e => e.Trday).HasColumnName("TRDay");

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRDueStatus");

                entity.Property(e => e.Trexch1).HasColumnName("TRExch1");

                entity.Property(e => e.Trexch2).HasColumnName("TRExch2");

                entity.Property(e => e.Trexch3).HasColumnName("TRExch3");

                entity.Property(e => e.Trexch4).HasColumnName("TRExch4");

                entity.Property(e => e.Trexch5).HasColumnName("TRExch5");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(255)
                    .HasColumnName("TRFLAG");

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(255)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trprofit).HasColumnName("TRProfit");

                entity.Property(e => e.Trrate)
                    .HasMaxLength(255)
                    .HasColumnName("TRRate");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.Trstatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRStatus");

                entity.Property(e => e.TrtermDay).HasColumnName("TRTermDay");

                entity.Property(e => e.Tx23E).HasMaxLength(255);

                entity.Property(e => e.Tx26).HasMaxLength(255);

                entity.Property(e => e.Tx59A).HasMaxLength(255);

                entity.Property(e => e.Tx59Cnty).HasMaxLength(255);

                entity.Property(e => e.Tx59D).HasMaxLength(255);

                entity.Property(e => e.Tx71A).HasMaxLength(255);

                entity.Property(e => e.Tx72).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(255);

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<Sheet22>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet22$");

                entity.Property(e => e.AcAddr).HasMaxLength(255);

                entity.Property(e => e.AcBank).HasMaxLength(255);

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.Aocode)
                    .HasMaxLength(255)
                    .HasColumnName("AOCode");

                entity.Property(e => e.AppvNo).HasMaxLength(255);

                entity.Property(e => e.AuthCode).HasMaxLength(255);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoOverDue).HasMaxLength(255);

                entity.Property(e => e.BenCnty).HasMaxLength(255);

                entity.Property(e => e.BenInfo).HasMaxLength(255);

                entity.Property(e => e.BenName).HasMaxLength(255);

                entity.Property(e => e.Bladvice)
                    .HasMaxLength(255)
                    .HasColumnName("BLAdvice");

                entity.Property(e => e.Blbalance)
                    .HasMaxLength(255)
                    .HasColumnName("BLBalance");

                entity.Property(e => e.Blbase)
                    .HasMaxLength(255)
                    .HasColumnName("BLBase");

                entity.Property(e => e.Blday)
                    .HasMaxLength(255)
                    .HasColumnName("BLDay");

                entity.Property(e => e.Blexch)
                    .HasMaxLength(255)
                    .HasColumnName("BLExch");

                entity.Property(e => e.Blfwd)
                    .HasMaxLength(255)
                    .HasColumnName("BLFwd");

                entity.Property(e => e.BlintAmt)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntAmt");

                entity.Property(e => e.BlintCode)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntCode");

                entity.Property(e => e.BlintRate)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntRate");

                entity.Property(e => e.BlintStartDate)
                    .HasMaxLength(255)
                    .HasColumnName("BLIntStartDate");

                entity.Property(e => e.Blinterest)
                    .HasMaxLength(255)
                    .HasColumnName("BLInterest");

                entity.Property(e => e.Blnumber)
                    .HasMaxLength(255)
                    .HasColumnName("BLNumber");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(255)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(255)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(255)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.ChipAcBank).HasMaxLength(255);

                entity.Property(e => e.ChipInterm).HasMaxLength(255);

                entity.Property(e => e.ChipNego).HasMaxLength(255);

                entity.Property(e => e.CommDesc).HasMaxLength(255);

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustAddr).HasMaxLength(255);

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.DaccruAmt).HasColumnName("DAccruAmt");

                entity.Property(e => e.DateLastAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DateToStop).HasColumnType("smalldatetime");

                entity.Property(e => e.DeductComm).HasMaxLength(255);

                entity.Property(e => e.DeductOther).HasMaxLength(255);

                entity.Property(e => e.DeductSwift).HasMaxLength(255);

                entity.Property(e => e.Dms)
                    .HasMaxLength(255)
                    .HasColumnName("DMS");

                entity.Property(e => e.Doamount).HasColumnName("DOAmount");

                entity.Property(e => e.DocCcy)
                    .HasMaxLength(255)
                    .HasColumnName("DocCCy");

                entity.Property(e => e.DueDate).HasMaxLength(255);

                entity.Property(e => e.Event).HasMaxLength(255);

                entity.Property(e => e.EventDate).HasMaxLength(255);

                entity.Property(e => e.EventFlag).HasMaxLength(255);

                entity.Property(e => e.EventMode).HasMaxLength(255);

                entity.Property(e => e.FacNo).HasMaxLength(255);

                entity.Property(e => e.Fbccy)
                    .HasMaxLength(255)
                    .HasColumnName("FBCcy");

                entity.Property(e => e.Fbcharge)
                    .HasMaxLength(255)
                    .HasColumnName("FBCharge");

                entity.Property(e => e.Fbengage)
                    .HasMaxLength(255)
                    .HasColumnName("FBEngage");

                entity.Property(e => e.Fbinterest)
                    .HasMaxLength(255)
                    .HasColumnName("FBInterest");

                entity.Property(e => e.FcyAcNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyAcNo");

                entity.Property(e => e.FcyPayFlag)
                    .HasMaxLength(255)
                    .HasColumnName("FCyPayFlag");

                entity.Property(e => e.FcyReceiptNo)
                    .HasMaxLength(255)
                    .HasColumnName("FCyReceiptNo");

                entity.Property(e => e.GenAccFlag).HasMaxLength(255);

                entity.Property(e => e.Goods).HasMaxLength(255);

                entity.Property(e => e.Ibccomm).HasColumnName("IBCComm");

                entity.Property(e => e.Ibcrate).HasColumnName("IBCRate");

                entity.Property(e => e.IntFixDate).HasMaxLength(255);

                entity.Property(e => e.IntFlag).HasMaxLength(255);

                entity.Property(e => e.IntPayType).HasMaxLength(255);

                entity.Property(e => e.IntRateCode).HasMaxLength(255);

                entity.Property(e => e.IntStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntermAddr).HasMaxLength(255);

                entity.Property(e => e.IntermBank).HasMaxLength(255);

                entity.Property(e => e.Invoice).HasMaxLength(255);

                entity.Property(e => e.LastIntDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastReceiptNo).HasMaxLength(255);

                entity.Property(e => e.Lcnumber)
                    .HasMaxLength(255)
                    .HasColumnName("LCNumber");

                entity.Property(e => e.Locode)
                    .HasMaxLength(255)
                    .HasColumnName("LOCode");

                entity.Property(e => e.MidRate).HasMaxLength(255);

                entity.Property(e => e.Mtnego)
                    .HasMaxLength(255)
                    .HasColumnName("MTNego");

                entity.Property(e => e.Mttype)
                    .HasMaxLength(255)
                    .HasColumnName("MTType");

                entity.Property(e => e.Nego799).HasMaxLength(255);

                entity.Property(e => e.Nego999).HasMaxLength(255);

                entity.Property(e => e.NegoBank).HasMaxLength(255);

                entity.Property(e => e.NegoCnty).HasMaxLength(255);

                entity.Property(e => e.NegoRefno).HasMaxLength(255);

                entity.Property(e => e.NegoTelex).HasMaxLength(255);

                entity.Property(e => e.NewAccruAmt).HasMaxLength(255);

                entity.Property(e => e.NewAccruCcy).HasMaxLength(255);

                entity.Property(e => e.NostAcinfo)
                    .HasMaxLength(255)
                    .HasColumnName("NostACInfo");

                entity.Property(e => e.OverdueDate).HasMaxLength(255);

                entity.Property(e => e.PaccruAmt).HasColumnName("PAccruAmt");

                entity.Property(e => e.PastDueDate).HasMaxLength(255);

                entity.Property(e => e.PayFlag).HasMaxLength(255);

                entity.Property(e => e.PayMethod).HasMaxLength(255);

                entity.Property(e => e.PayType).HasMaxLength(255);

                entity.Property(e => e.PrevDueDate).HasMaxLength(255);

                entity.Property(e => e.PrevFbchrg)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBChrg");

                entity.Property(e => e.PrevFbeng)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBEng");

                entity.Property(e => e.PrevFbint)
                    .HasMaxLength(255)
                    .HasColumnName("PrevFBInt");

                entity.Property(e => e.RecStatus).HasMaxLength(255);

                entity.Property(e => e.RecType).HasMaxLength(255);

                entity.Property(e => e.RefNumber).HasMaxLength(255);

                entity.Property(e => e.ReimBank).HasMaxLength(255);

                entity.Property(e => e.Relation).HasMaxLength(255);

                entity.Property(e => e.RevAccru).HasMaxLength(255);

                entity.Property(e => e.RevAccruTax).HasMaxLength(255);

                entity.Property(e => e.SettleDate).HasMaxLength(255);

                entity.Property(e => e.SettleFlag).HasMaxLength(255);

                entity.Property(e => e.Sgamount).HasColumnName("SGAmount");

                entity.Property(e => e.Sgnumber)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber");

                entity.Property(e => e.Sgnumber1)
                    .HasMaxLength(255)
                    .HasColumnName("SGNumber1");

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.TaxRefund).HasMaxLength(255);

                entity.Property(e => e.TenorType).HasMaxLength(255);

                entity.Property(e => e.Tramount)
                    .HasMaxLength(255)
                    .HasColumnName("TRAmount");

                entity.Property(e => e.Tramt1).HasColumnName("TRAmt1");

                entity.Property(e => e.Tramt2)
                    .HasMaxLength(255)
                    .HasColumnName("TRAmt2");

                entity.Property(e => e.Tramt3)
                    .HasMaxLength(255)
                    .HasColumnName("TRAmt3");

                entity.Property(e => e.Tramt4)
                    .HasMaxLength(255)
                    .HasColumnName("TRAmt4");

                entity.Property(e => e.Tramt5)
                    .HasMaxLength(255)
                    .HasColumnName("TRAmt5");

                entity.Property(e => e.Trbalance)
                    .HasMaxLength(255)
                    .HasColumnName("TRBalance");

                entity.Property(e => e.Trccy)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy");

                entity.Property(e => e.Trccy1).HasColumnName("TRCcy1");

                entity.Property(e => e.Trccy2)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy2");

                entity.Property(e => e.Trccy3)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy3");

                entity.Property(e => e.Trccy4)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy4");

                entity.Property(e => e.Trccy5)
                    .HasMaxLength(255)
                    .HasColumnName("TRCcy5");

                entity.Property(e => e.TrccyFlag)
                    .HasMaxLength(255)
                    .HasColumnName("TRCCyFlag");

                entity.Property(e => e.Trcont1)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont1");

                entity.Property(e => e.Trcont2)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont2");

                entity.Property(e => e.Trcont3)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont3");

                entity.Property(e => e.Trcont4)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont4");

                entity.Property(e => e.Trcont5)
                    .HasMaxLength(255)
                    .HasColumnName("TRCont5");

                entity.Property(e => e.Trday)
                    .HasMaxLength(255)
                    .HasColumnName("TRDay");

                entity.Property(e => e.TrdueStatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRDueStatus");

                entity.Property(e => e.Trexch1).HasColumnName("TRExch1");

                entity.Property(e => e.Trexch2)
                    .HasMaxLength(255)
                    .HasColumnName("TRExch2");

                entity.Property(e => e.Trexch3)
                    .HasMaxLength(255)
                    .HasColumnName("TRExch3");

                entity.Property(e => e.Trexch4)
                    .HasMaxLength(255)
                    .HasColumnName("TRExch4");

                entity.Property(e => e.Trexch5)
                    .HasMaxLength(255)
                    .HasColumnName("TRExch5");

                entity.Property(e => e.Trflag)
                    .HasMaxLength(255)
                    .HasColumnName("TRFLAG");

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(255)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trprofit)
                    .HasMaxLength(255)
                    .HasColumnName("TRProfit");

                entity.Property(e => e.Trrate)
                    .HasMaxLength(255)
                    .HasColumnName("TRRate");

                entity.Property(e => e.Trseqno)
                    .HasMaxLength(255)
                    .HasColumnName("TRSeqno");

                entity.Property(e => e.Trstatus)
                    .HasMaxLength(255)
                    .HasColumnName("TRStatus");

                entity.Property(e => e.TrtermDay)
                    .HasMaxLength(255)
                    .HasColumnName("TRTermDay");

                entity.Property(e => e.Tx23E).HasMaxLength(255);

                entity.Property(e => e.Tx26).HasMaxLength(255);

                entity.Property(e => e.Tx59A).HasMaxLength(255);

                entity.Property(e => e.Tx59Cnty).HasMaxLength(255);

                entity.Property(e => e.Tx59D).HasMaxLength(255);

                entity.Property(e => e.Tx71A).HasMaxLength(255);

                entity.Property(e => e.Tx72).HasMaxLength(255);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(255);

                entity.Property(e => e.ValueDate).HasMaxLength(255);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<TUnUseAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tUnUseAcc");

                entity.Property(e => e.Acctno)
                    .HasMaxLength(13)
                    .HasColumnName("acctno");

                entity.Property(e => e.InUse).HasColumnName("inUse");

                entity.Property(e => e.PRefTrans)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("pRefTrans");

                entity.Property(e => e.PRefYear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("pRefYear")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpAtsfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpATSFile");

                entity.Property(e => e.AccCode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ApplCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BankCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CompAcc).HasMaxLength(11);

                entity.Property(e => e.DataDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DocMonth)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EffDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Filler).HasMaxLength(38);

                entity.Property(e => e.RecSeq)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefReceiver).HasMaxLength(20);

                entity.Property(e => e.RefSender).HasMaxLength(10);

                entity.Property(e => e.ServType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranAmt)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranKind)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpBankLiab>(entity =>
            {
                entity.HasKey(e => new { e.AppvNo, e.BankCode, e.FacilityNo });

                entity.ToTable("tmp_BankLiab");

                entity.Property(e => e.AppvNo)
                    .HasMaxLength(15)
                    .HasColumnName("Appv_No");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.CreditAmount)
                    .HasColumnName("Credit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LiabAmount).HasColumnName("Liab_Amount");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.NonLineAmount).HasColumnName("NonLine_Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotNonLineAmt).HasColumnName("TotNonLine_Amt");
            });

            modelBuilder.Entity<TmpBankLiabCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_BankLiabCust");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.DocNumber).HasMaxLength(20);

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.LiabCcy).HasMaxLength(3);

                entity.Property(e => e.Product).HasMaxLength(4);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TmpCcsmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpCCSMaster");

                entity.Property(e => e.TaccNo)
                    .HasMaxLength(20)
                    .HasColumnName("TAccNo");

                entity.Property(e => e.Tbalance).HasColumnName("TBalance");

                entity.Property(e => e.Tccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TCcy")
                    .IsFixedLength(true);

                entity.Property(e => e.Tcredit).HasColumnName("TCredit");

                entity.Property(e => e.Tcrtype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TCRType")
                    .IsFixedLength(true);

                entity.Property(e => e.TcustCode)
                    .HasMaxLength(6)
                    .HasColumnName("TCustCode");

                entity.Property(e => e.Tdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDate");

                entity.Property(e => e.TfacNo)
                    .HasMaxLength(15)
                    .HasColumnName("TFacNo");

                entity.Property(e => e.Tinterest).HasColumnName("TInterest");

                entity.Property(e => e.TkeyNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("TKeyNumber");

                entity.Property(e => e.Tmodule)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TModule")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpCcsout>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpCCSOuts");

                entity.Property(e => e.CcsAccNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_AccNo");

                entity.Property(e => e.CcsAccrued).HasColumnName("CCS_Accrued");

                entity.Property(e => e.CcsAsDate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CCS_AsDate")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsBalance).HasColumnName("CCS_Balance");

                entity.Property(e => e.CcsCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCS_Ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsCredit).HasColumnName("CCS_Credit");

                entity.Property(e => e.CcsCrtype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCS_CRType")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsCust)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CCS_Cust")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CCS_Date");

                entity.Property(e => e.CcsFacNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CCS_FacNo")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsModule)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CCS_Module")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpComm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_Comm");

                entity.Property(e => e.Comm).HasMaxLength(20);

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.CustName).HasMaxLength(70);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Module).HasMaxLength(5);
            });

            modelBuilder.Entity<TmpCustLiab>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo, e.Currency });

                entity.ToTable("TmpCustLiab");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Currency).HasMaxLength(3);

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_Amt");

                entity.Property(e => e.DlcBook).HasColumnName("DLC_Book");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.TrsBook).HasColumnName("TRS_Book");

                entity.Property(e => e.TrtrsAmt).HasColumnName("TRTRS_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TmpCustLsum>(entity =>
            {
                entity.HasKey(e => new { e.CustCode, e.FacilityNo });

                entity.ToTable("TmpCustLSum");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.DbeAmt)
                    .HasColumnName("DBE_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbeBook)
                    .HasColumnName("DBE_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DlcAmt)
                    .HasColumnName("DLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DlcBook)
                    .HasColumnName("DLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DmlcAmt).HasColumnName("DMLC_Amt");

                entity.Property(e => e.DmlcBook).HasColumnName("DMLC_Book");

                entity.Property(e => e.ExpcAmt)
                    .HasColumnName("EXPC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExpcBook)
                    .HasColumnName("EXPC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsAmt)
                    .HasColumnName("IBLS_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IblsBook)
                    .HasColumnName("IBLS_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltAmt)
                    .HasColumnName("IBLT_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IbltBook)
                    .HasColumnName("IBLT_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcAmt)
                    .HasColumnName("IMBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImbcBook)
                    .HasColumnName("IMBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImblOver)
                    .HasColumnName("IMBL_Over")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcAmt)
                    .HasColumnName("IMLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImlcBook)
                    .HasColumnName("IMLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrAmt)
                    .HasColumnName("IMTR_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImtrBook)
                    .HasColumnName("IMTR_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook)
                    .HasColumnName("NLTR_book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt)
                    .HasColumnName("SGBC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcBook)
                    .HasColumnName("SGBC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt)
                    .HasColumnName("SGLC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SglcBook)
                    .HasColumnName("SGLC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SlcAmt).HasColumnName("SLC_Amt");

                entity.Property(e => e.SlcBook).HasColumnName("SLC_Book");

                entity.Property(e => e.TrbcAmt).HasColumnName("TRBC_Amt");

                entity.Property(e => e.TrdlcAmt).HasColumnName("TRDLC_Amt");

                entity.Property(e => e.TrlcAmt).HasColumnName("TRLC_Amt");

                entity.Property(e => e.TroaAmt).HasColumnName("TROA_Amt");

                entity.Property(e => e.TrsBook).HasColumnName("TRS_Book");

                entity.Property(e => e.TrtrsAmt).HasColumnName("TRTRS_Amt");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt)
                    .HasColumnName("XBCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbccBook)
                    .HasColumnName("XBCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpAmt)
                    .HasColumnName("XBCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XbcpBook)
                    .HasColumnName("XBCP_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccAmt)
                    .HasColumnName("XLCC_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlccBook)
                    .HasColumnName("XLCC_Book")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpAmt)
                    .HasColumnName("XLCP_Amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XlcpBook)
                    .HasColumnName("XLCP_Book")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TmpDmsptx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpDMSPTX");

                entity.Property(e => e.Taccount)
                    .HasMaxLength(15)
                    .HasColumnName("TAccount");

                entity.Property(e => e.Tamount).HasColumnName("TAmount");

                entity.Property(e => e.Tccy)
                    .HasMaxLength(3)
                    .HasColumnName("TCcy");

                entity.Property(e => e.Tdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDate");

                entity.Property(e => e.Tdept)
                    .HasMaxLength(4)
                    .HasColumnName("TDept");

                entity.Property(e => e.Tdesc)
                    .HasMaxLength(50)
                    .HasColumnName("TDesc");

                entity.Property(e => e.TdocNo)
                    .HasMaxLength(15)
                    .HasColumnName("TDocNo");

                entity.Property(e => e.Tevent)
                    .HasMaxLength(20)
                    .HasColumnName("TEvent");

                entity.Property(e => e.Tmod)
                    .HasMaxLength(5)
                    .HasColumnName("TMod");

                entity.Property(e => e.Tnature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TNature")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpExchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpExchange");

                entity.Property(e => e.TexchBnbuy)
                    .HasColumnName("TExchBNBuy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TexchBnsell)
                    .HasColumnName("TExchBNSell")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TexchCcy)
                    .HasMaxLength(3)
                    .HasColumnName("TExchCcy");

                entity.Property(e => e.TexchDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TExchDate");

                entity.Property(e => e.TexchTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TExchTime")
                    .IsFixedLength(true);

                entity.Property(e => e.TexchTrate1)
                    .HasColumnName("TExchTRate1")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TexchTrate2)
                    .HasColumnName("TExchTRate2")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TexchTrate3)
                    .HasColumnName("TExchTRate3")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<TmpExpDm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_ExpDMS");

                entity.Property(e => e.AmtThb).HasColumnName("AmtTHB");

                entity.Property(e => e.AppName).HasMaxLength(70);

                entity.Property(e => e.BeneId)
                    .HasMaxLength(13)
                    .HasColumnName("BeneID");

                entity.Property(e => e.DraftCcy).HasMaxLength(3);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventType).HasMaxLength(20);

                entity.Property(e => e.FlagAmt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Forward).HasMaxLength(15);

                entity.Property(e => e.RefNumber).HasMaxLength(15);
            });

            modelBuilder.Entity<TmpFirstDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpFirstDate");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.FacNo).HasMaxLength(13);
            });

            modelBuilder.Entity<TmpForwardCont>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_ForwardCont");

                entity.Property(e => e.AmtThb).HasColumnName("AmtTHB");

                entity.Property(e => e.CustCode).HasMaxLength(15);

                entity.Property(e => e.CustName).HasMaxLength(70);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ForwardNo).HasMaxLength(15);

                entity.Property(e => e.Refno).HasMaxLength(15);
            });

            modelBuilder.Entity<TmpInterest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_interest");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(20);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.ReferNo).HasMaxLength(20);
            });

            modelBuilder.Entity<TmpInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpInvoice");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCy")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DocMod).HasMaxLength(4);

                entity.Property(e => e.DocMon).HasMaxLength(7);

                entity.Property(e => e.DocNumer).HasMaxLength(15);

                entity.Property(e => e.DocType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TmpLiability>(entity =>
            {
                entity.HasKey(e => new { e.AppvNo, e.CustCode, e.FacilityNo });

                entity.ToTable("tmp_Liability");

                entity.Property(e => e.AppvNo)
                    .HasMaxLength(15)
                    .HasColumnName("Appv_No");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.CreditAmount)
                    .HasColumnName("Credit_Amount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.GroupAmt).HasColumnName("Group_Amt");

                entity.Property(e => e.LiabAmount).HasColumnName("Liab_Amount");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.NonLineAmount).HasColumnName("NonLine_Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotNonLineAmt).HasColumnName("TotNonLine_Amt");
            });

            modelBuilder.Entity<TmpLogImcb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_LogIMCBS");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogFileName).HasMaxLength(100);

                entity.Property(e => e.LogStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PostDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId).HasMaxLength(12);
            });

            modelBuilder.Entity<TmpMainConnect1P>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_MainConnect1P");

                entity.Property(e => e.AcName).HasMaxLength(50);

                entity.Property(e => e.Acamt).HasColumnName("ACAmt");

                entity.Property(e => e.Acno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACNo")
                    .IsFixedLength(true);

                entity.Property(e => e.Actype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ACType")
                    .IsFixedLength(true);

                entity.Property(e => e.Autoseq).HasColumnName("autoseq");

                entity.Property(e => e.OnePreturn)
                    .HasMaxLength(100)
                    .HasColumnName("OnePReturn");

                entity.Property(e => e.RqDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RqTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RsDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RsTime)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SumLog).HasMaxLength(50);

                entity.Property(e => e.TrEvent).HasMaxLength(10);

                entity.Property(e => e.TrRefSeq).HasMaxLength(20);

                entity.Property(e => e.TrType).HasMaxLength(10);

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TmpMasterGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpMasterGL");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CustCode).HasMaxLength(16);

                entity.Property(e => e.EventMode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacNo).HasMaxLength(20);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KeyNumber).HasMaxLength(20);

                entity.Property(e => e.Module).HasMaxLength(4);

                entity.Property(e => e.TenorType).HasMaxLength(20);
            });

            modelBuilder.Entity<TmpMonAccrued>(entity =>
            {
                entity.HasKey(e => new { e.Login, e.DocNo, e.DocMode, e.Seqno });

                entity.ToTable("TmpMonAccrued");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.DocMode).HasMaxLength(20);

                entity.Property(e => e.BankType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.DocBank).HasMaxLength(14);

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocNumber).HasMaxLength(15);

                entity.Property(e => e.DocRefer).HasMaxLength(15);

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.IntCode).HasMaxLength(10);

                entity.Property(e => e.IntFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.IntTo).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TmpMonthInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpMonthInt");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocMonth).HasMaxLength(7);

                entity.Property(e => e.NumToWord).HasMaxLength(250);
            });

            modelBuilder.Entity<TmpOnlLcout>(entity =>
            {
                entity.HasKey(e => e.LcNumber)
                    .HasName("PK_TmpLCOuts");

                entity.ToTable("TmpONL_LCOuts");

                entity.Property(e => e.LcNumber)
                    .HasMaxLength(15)
                    .HasColumnName("LC_Number");

                entity.Property(e => e.AccessId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_ID");

                entity.Property(e => e.BenName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DrawingAmount).HasColumnName("Drawing_Amount");

                entity.Property(e => e.EditionNumber)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Edition_Number");

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Expiry_Date");

                entity.Property(e => e.LastTranDate)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Last_Tran_date");

                entity.Property(e => e.LcAmount).HasColumnName("LC_Amount");

                entity.Property(e => e.LcAvailable).HasColumnName("LC_Available");

                entity.Property(e => e.LcCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LC_CCy")
                    .IsFixedLength(true);

                entity.Property(e => e.OpenDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Open_Date");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TradeRefNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Trade_ref_Number");

                entity.Property(e => e.UploadDate)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Upload_Date");
            });

            modelBuilder.Entity<TmpOnlLcswfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpONL_LCSWFile");

                entity.Property(e => e.LneData).HasMaxLength(500);

                entity.Property(e => e.LneFile).HasMaxLength(20);

                entity.Property(e => e.LneName).HasMaxLength(20);
            });

            modelBuilder.Entity<TmpOscc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_OSCCS");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsLmtype)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LMTYPE");

                entity.Property(e => e.Cname)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CIF");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(20)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.OutstdAmtThb).HasColumnName("OUTSTD_AMT_THB");

                entity.Property(e => e.Titl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TITL")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_DATE");
            });

            modelBuilder.Entity<TmpPDailyGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tmp_pDailyGL");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustCode).HasMaxLength(8);

                entity.Property(e => e.GfmsBran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMS_Bran");

                entity.Property(e => e.GfmsMap)
                    .HasMaxLength(11)
                    .HasColumnName("GFMS_Map");

                entity.Property(e => e.InvoiceNo).HasMaxLength(15);

                entity.Property(e => e.LoanStat)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NostroBank).HasMaxLength(13);

                entity.Property(e => e.ProdCode).HasMaxLength(6);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(5)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(4)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tag20Ref).HasMaxLength(20);

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranAllocate).HasMaxLength(15);

                entity.Property(e => e.TranBran).HasMaxLength(4);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCenter).HasMaxLength(4);

                entity.Property(e => e.TranCond).HasMaxLength(20);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranDesc).HasMaxLength(50);

                entity.Property(e => e.TranDocNo).HasMaxLength(15);

                entity.Property(e => e.TranEvent).HasMaxLength(20);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranRef).HasMaxLength(15);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VouchId)
                    .HasMaxLength(15)
                    .HasColumnName("VouchID");

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<TmpPMasterDailyOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tmp_pMasterDailyOuts");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCy");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gfbcint)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCInt");

                entity.Property(e => e.Gfbcouts)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCOuts");

                entity.Property(e => e.GfmsaccInt)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccInt");

                entity.Property(e => e.GfmsaccOuts)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccOuts");

                entity.Property(e => e.Gfmsbran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMSBran");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.LastEvent).HasMaxLength(25);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.LiabType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.OutsDate).HasMaxLength(10);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdCode).HasMaxLength(5);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(5)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.Rmcode)
                    .HasMaxLength(10)
                    .HasColumnName("RMCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(5)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SubProduct).HasMaxLength(5);

                entity.Property(e => e.TenorDay).HasMaxLength(4);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TENOR_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpReposgrpcl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_REPOSGRPCL");

                entity.Property(e => e.AvlAmt).HasColumnName("AVL_AMT");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.Bd)
                    .HasMaxLength(3)
                    .HasColumnName("BD");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FlagShare)
                    .HasMaxLength(6)
                    .HasColumnName("FLAG_SHARE");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .HasColumnName("FLAGDUE");

                entity.Property(e => e.HoldAmt).HasColumnName("HOLD_AMT");

                entity.Property(e => e.LimitAmt).HasColumnName("LIMIT_AMT");

                entity.Property(e => e.LimitCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("LIMIT_CODE");

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.NetAvlAmt).HasColumnName("NET_AVL_AMT");

                entity.Property(e => e.ShareAmt).HasColumnName("SHARE_AMT");

                entity.Property(e => e.UpdateDate)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("USERCODE");
            });

            modelBuilder.Entity<TmpReveMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpReveMaster");

                entity.Property(e => e.TaccNo)
                    .HasMaxLength(20)
                    .HasColumnName("TAccNo");

                entity.Property(e => e.Tcommfee).HasColumnName("TCOMMFEE");

                entity.Property(e => e.Tcommrec).HasColumnName("TCOMMREC");

                entity.Property(e => e.Tdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDate");

                entity.Property(e => e.Tdiscrec).HasColumnName("TDISCREC");

                entity.Property(e => e.TflagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TFlagDue")
                    .IsFixedLength(true);

                entity.Property(e => e.Tforntfee).HasColumnName("TFORNTFEE");

                entity.Property(e => e.Tinsufee).HasColumnName("TINSUFEE");

                entity.Property(e => e.TkeyNumber)
                    .HasMaxLength(15)
                    .HasColumnName("TKeyNumber");

                entity.Property(e => e.Tmintrec).HasColumnName("TMINTREC");

                entity.Property(e => e.Tmintrecv).HasColumnName("TMINTRECV");

                entity.Property(e => e.Tmintsusp).HasColumnName("TMINTSUSP");

                entity.Property(e => e.Tmodule)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TModule")
                    .IsFixedLength(true);

                entity.Property(e => e.Tmprinc).HasColumnName("TMPRINC");

                entity.Property(e => e.Totherfee).HasColumnName("TOTHERFEE");

                entity.Property(e => e.Tpenafee).HasColumnName("TPENAFEE");
            });

            modelBuilder.Entity<TmpReveOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpReveOut");

                entity.Property(e => e.AccNo).HasMaxLength(20);

                entity.Property(e => e.Commfee).HasColumnName("COMMFEE");

                entity.Property(e => e.Commrec).HasColumnName("COMMREC");

                entity.Property(e => e.Discrec).HasColumnName("DISCREC");

                entity.Property(e => e.Forntfee).HasColumnName("FORNTFEE");

                entity.Property(e => e.Insufee).HasColumnName("INSUFEE");

                entity.Property(e => e.Mintrec).HasColumnName("MINTREC");

                entity.Property(e => e.Mintrecv).HasColumnName("MINTRECV");

                entity.Property(e => e.Mintsusp).HasColumnName("MINTSUSP");

                entity.Property(e => e.Mprinc).HasColumnName("MPRINC");

                entity.Property(e => e.Otherfee).HasColumnName("OTHERFEE");

                entity.Property(e => e.Penafee).HasColumnName("PENAFEE");

                entity.Property(e => e.Tdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDate");
            });

            modelBuilder.Entity<TmpRptAmortize>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_rptAmortize");

                entity.Property(e => e.BankCode).HasMaxLength(13);

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<TmpRptMail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpRptMail");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.Response).HasMaxLength(500);

                entity.Property(e => e.SendBcc)
                    .HasMaxLength(300)
                    .HasColumnName("SendBCC");

                entity.Property(e => e.SendCc)
                    .HasMaxLength(300)
                    .HasColumnName("SendCC");

                entity.Property(e => e.SendDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SendFile1).HasMaxLength(100);

                entity.Property(e => e.SendFile2).HasMaxLength(100);

                entity.Property(e => e.SendFile3).HasMaxLength(100);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SendMod).HasMaxLength(10);

                entity.Property(e => e.SendMsg).HasColumnName("SendMSG");

                entity.Property(e => e.SendPass).HasMaxLength(100);

                entity.Property(e => e.SendSjb)
                    .HasMaxLength(500)
                    .HasColumnName("SendSJB");

                entity.Property(e => e.SendTime)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(300)
                    .HasColumnName("SendTO");

                entity.Property(e => e.SendUser).HasMaxLength(12);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<TmpSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_Security");

                entity.Property(e => e.Hash).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(70);

                entity.Property(e => e.Salt).HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TmpSumacc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_SUMACC");

                entity.Property(e => e.AccCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACC_CODE");

                entity.Property(e => e.AccName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACC_NAME");

                entity.Property(e => e.BusiArea)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Busi_Area");

                entity.Property(e => e.BusiLine)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Busi_Line");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.CostCenter)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cost_Center");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ErpAccCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ERP_ACC_CODE");

                entity.Property(e => e.ErpAccName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERP_ACC_NAME");

                entity.Property(e => e.ErpIntAccCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ERP_INT_ACC_CODE");

                entity.Property(e => e.ErpIntAccName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERP_INT_ACC_NAME");

                entity.Property(e => e.ErpProd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ERP_PROD");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntAccCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("INT_ACC_CODE");

                entity.Property(e => e.IntAccName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INT_ACC_NAME");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("datetime");

                entity.Property(e => e.Locode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("LOCode");

                entity.Property(e => e.Module).HasMaxLength(4);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Profit)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.SaleUnit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Sale_Unit");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UpdateDate)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("USERCODE");
            });

            modelBuilder.Entity<TmpSwbankFile>(entity =>
            {
                entity.HasKey(e => e.BankCode)
                    .HasName("PK_Tmp_SWBankFile");

                entity.ToTable("tmp_SWBankFile");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BankAdd1)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_Add1");

                entity.Property(e => e.BankAdd2)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add2");

                entity.Property(e => e.BankAdd3)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add3");

                entity.Property(e => e.BankAdd4)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add4");

                entity.Property(e => e.BankSwift)
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Swift");
            });

            modelBuilder.Entity<TmpSwiftInDetail>(entity =>
            {
                entity.HasKey(e => new { e.FileName, e.SwiftInId, e.SwiftInType, e.RunLineNo });

                entity.ToTable("tmp_SwiftInDetail");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.SwiftInId)
                    .HasMaxLength(30)
                    .HasColumnName("SwiftInID");

                entity.Property(e => e.SwiftInType).HasMaxLength(3);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FieldNo).HasMaxLength(6);

                entity.Property(e => e.LoadDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TmpSwiftin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TmpSWIFTIN");

                entity.Property(e => e.Fddetail)
                    .HasMaxLength(150)
                    .HasColumnName("FDDetail");

                entity.Property(e => e.Fdfile)
                    .HasMaxLength(50)
                    .HasColumnName("FDFile");

                entity.Property(e => e.Fdline).HasColumnName("FDLine");

                entity.Property(e => e.Fdmt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FDMT")
                    .IsFixedLength(true);

                entity.Property(e => e.Fduser)
                    .HasMaxLength(12)
                    .HasColumnName("FDUser");
            });

            modelBuilder.Entity<TmpUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_User");

                entity.Property(e => e.UserBran).HasMaxLength(4);

                entity.Property(e => e.UserDept).HasMaxLength(70);

                entity.Property(e => e.UserExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.UserLevel).HasMaxLength(2);

                entity.Property(e => e.UserLockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserPassword).HasMaxLength(60);

                entity.Property(e => e.UserPasswordChangeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserPasswordExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserRemark).HasMaxLength(200);

                entity.Property(e => e.UserStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmpVolCorrBank>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VolCorrBank");

                entity.HasIndex(e => new { e.Sec, e.EventName, e.EventDate, e.Module, e.SubModule, e.Reference, e.KeyNumber, e.RepType }, "IX_TMP_VolCorrBank")
                    .IsUnique();

                entity.Property(e => e.BalanceAmt).HasDefaultValueSql("(0)");

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BCnty")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BcntyName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("BCnty_Name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BhtNet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bname)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("BName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Bank")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBankCnty)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Corr_BankCnty")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBankName)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("Corr_BankName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrCntyName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("Corr_CntyName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CustName)
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KeyNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Module)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mt103)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MT103")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mt202)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MT202")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RateMidRate)
                    .HasColumnName("Rate_MidRate")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RepType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SaveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Sec)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SubModule)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SubName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpVolCorrIncome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VolCorrIncome");

                entity.HasIndex(e => new { e.VouchDate, e.TranMod, e.KeyNumber, e.Reference, e.CustCode, e.TranAccount, e.RepType, e.Bname, e.CorrBank, e.Ccy, e.IncomeCcy }, "IX_TMP_VolCorrIncome")
                    .IsUnique();

                entity.Property(e => e.AccName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BCnty")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bname)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("BName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Bank")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBankCnty)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Corr_BankCnty")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrBankName)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("Corr_BankName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ErpAccCode)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("ERP_Acc_Code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IncomeCcy)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KeyNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldModule)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RepType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SaveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranAccount)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranMod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Username)
                    .HasName("PK__User__536C85E55AEAE3BE");

                entity.ToTable("User");

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.Property(e => e.EmailAddress).HasMaxLength(50);

                entity.Property(e => e.GivenName).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Role).HasMaxLength(20);

                entity.Property(e => e.Surname).HasMaxLength(50);
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.HasKey(e => e.Username)
                    .HasName("PK__UserLogi__536C85E555526011");

                entity.ToTable("UserLogin");

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);
            });

            modelBuilder.Entity<VBankSumFac>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBankSumFac");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VCommision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCommision");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collection)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTION");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Comm).HasColumnName("COMM");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commbahtnet).HasColumnName("COMMBAHTNET");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.CustName).HasMaxLength(500);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength(true);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<VContingent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vContingent");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<VCustLiability>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustLiability");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.DbeAmt).HasColumnName("DBE_Amt");

                entity.Property(e => e.DbeBook).HasColumnName("DBE_Book");

                entity.Property(e => e.DlcAmt).HasColumnName("DLC_Amt");

                entity.Property(e => e.DlcBook).HasColumnName("DLC_Book");

                entity.Property(e => e.ExpcAmt).HasColumnName("EXPC_Amt");

                entity.Property(e => e.ExpcBook).HasColumnName("EXPC_Book");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.IblsAmt).HasColumnName("IBLS_Amt");

                entity.Property(e => e.IblsBook).HasColumnName("IBLS_Book");

                entity.Property(e => e.IbltAmt).HasColumnName("IBLT_Amt");

                entity.Property(e => e.IbltBook).HasColumnName("IBLT_Book");

                entity.Property(e => e.ImbcAmt).HasColumnName("IMBC_Amt");

                entity.Property(e => e.ImbcBook).HasColumnName("IMBC_Book");

                entity.Property(e => e.ImblOver).HasColumnName("IMBL_Over");

                entity.Property(e => e.ImlcAmt).HasColumnName("IMLC_Amt");

                entity.Property(e => e.ImlcBook).HasColumnName("IMLC_Book");

                entity.Property(e => e.ImtrAmt).HasColumnName("IMTR_Amt");

                entity.Property(e => e.ImtrBook).HasColumnName("IMTR_Book");

                entity.Property(e => e.LgAmt).HasColumnName("LG_Amt");

                entity.Property(e => e.LgBook).HasColumnName("LG_Book");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook).HasColumnName("NLTR_book");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SblcAmt).HasColumnName("SBLC_Amt");

                entity.Property(e => e.SblcBook).HasColumnName("SBLC_Book");

                entity.Property(e => e.SgbcAmt).HasColumnName("SGBC_Amt");

                entity.Property(e => e.SgbcBook).HasColumnName("SGBC_Book");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.SglcAmt).HasColumnName("SGLC_Amt");

                entity.Property(e => e.SglcBook).HasColumnName("SGLC_Book");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XbccAmt).HasColumnName("XBCC_Amt");

                entity.Property(e => e.XbccBook).HasColumnName("XBCC_Book");

                entity.Property(e => e.XbcpAmt).HasColumnName("XBCP_Amt");

                entity.Property(e => e.XbcpBook).HasColumnName("XBCP_Book");

                entity.Property(e => e.XlccAmt).HasColumnName("XLCC_Amt");

                entity.Property(e => e.XlccBook).HasColumnName("XLCC_Book");

                entity.Property(e => e.XlcpAmt).HasColumnName("XLCP_Amt");

                entity.Property(e => e.XlcpBook).HasColumnName("XLCP_Book");
            });

            modelBuilder.Entity<VCustSumFac>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustSumFac");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VCustomerAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustomerAcc");

                entity.Property(e => e.CustAcName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Cust_AcName");

                entity.Property(e => e.CustAcNo)
                    .HasMaxLength(15)
                    .HasColumnName("Cust_AcNo");

                entity.Property(e => e.CustAcType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Cust_AcType");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");
            });

            modelBuilder.Entity<VExpDmsftxftu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vExpDMSFTXFTU");

                entity.Property(e => e.AppName).HasMaxLength(175);

                entity.Property(e => e.BeneId)
                    .HasMaxLength(13)
                    .HasColumnName("BeneID");

                entity.Property(e => e.DraftCcy).HasMaxLength(3);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventType).HasMaxLength(25);

                entity.Property(e => e.ForwardCont).HasMaxLength(15);

                entity.Property(e => e.RefNumber).HasMaxLength(15);
            });

            modelBuilder.Entity<VForwardCont>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vForwardCont");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("centerId");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocNo).HasMaxLength(15);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.FcontNo1)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO1");

                entity.Property(e => e.FcontNo2)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO2");

                entity.Property(e => e.FcontNo3)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO3");

                entity.Property(e => e.FcontNo4)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO4");

                entity.Property(e => e.FcontNo5)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO5");

                entity.Property(e => e.FcontNo6)
                    .HasMaxLength(20)
                    .HasColumnName("FCONT_NO6");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParAmt1).HasColumnName("PAR_AMT1");

                entity.Property(e => e.ParAmt1Thb).HasColumnName("PAR_AMT1_THB");

                entity.Property(e => e.ParAmt2).HasColumnName("PAR_AMT2");

                entity.Property(e => e.ParAmt2Thb).HasColumnName("PAR_AMT2_THB");

                entity.Property(e => e.ParAmt3).HasColumnName("PAR_AMT3");

                entity.Property(e => e.ParAmt3Thb).HasColumnName("PAR_AMT3_THB");

                entity.Property(e => e.ParAmt4).HasColumnName("PAR_AMT4");

                entity.Property(e => e.ParAmt4Thb).HasColumnName("PAR_AMT4_THB");

                entity.Property(e => e.ParAmt5).HasColumnName("PAR_AMT5");

                entity.Property(e => e.ParAmt5Thb).HasColumnName("PAR_AMT5_THB");

                entity.Property(e => e.ParAmt6).HasColumnName("PAR_AMT6");

                entity.Property(e => e.ParAmt6Thb).HasColumnName("PAR_AMT6_THB");

                entity.Property(e => e.ParRate1).HasColumnName("PAR_RATE1");

                entity.Property(e => e.ParRate2).HasColumnName("PAR_RATE2");

                entity.Property(e => e.ParRate3).HasColumnName("PAR_RATE3");

                entity.Property(e => e.ParRate4).HasColumnName("PAR_RATE4");

                entity.Property(e => e.ParRate5).HasColumnName("PAR_RATE5");

                entity.Property(e => e.ParRate6).HasColumnName("PAR_RATE6");

                entity.Property(e => e.Refno)
                    .HasMaxLength(35)
                    .HasColumnName("refno");
            });

            modelBuilder.Entity<VImfwcont>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vIMFWCONT");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VLinkTfl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLinkTFL");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.IspCcs)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_CCS");

                entity.Property(e => e.IspCif)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_CIF");

                entity.Property(e => e.NewFac)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("New_Fac");

                entity.Property(e => e.TflAmt)
                    .HasColumnType("money")
                    .HasColumnName("TFL_amt");

                entity.Property(e => e.TflCcs)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TFL_CCS")
                    .IsFixedLength(true);

                entity.Property(e => e.TflCcsRelate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TFL_CCS_Relate")
                    .IsFixedLength(true);

                entity.Property(e => e.TflCif)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TFL_CIF")
                    .IsFixedLength(true);

                entity.Property(e => e.TflCur)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TFL_cur")
                    .IsFixedLength(true);

                entity.Property(e => e.TflProd)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TFL_prod")
                    .IsFixedLength(true);

                entity.Property(e => e.TflRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TFL_Ref")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VMasterMonInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMasterMonInt");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(20);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<VMasterOduLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMasterOduLoan");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<VMonAccured>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMonAccured");

                entity.Property(e => e.BankType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocBank).HasMaxLength(14);

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocMode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.DocNumber).HasMaxLength(3);

                entity.Property(e => e.DocRefer).HasMaxLength(15);

                entity.Property(e => e.IntCcy).HasColumnName("IntCCy");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<VMonthAmort>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMonthAmort");

                entity.Property(e => e.AuthCode)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("discount_day");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("discrate");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.RecStatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Rec_Status");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.TenorDesc).HasMaxLength(50);

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.UserCoede)
                    .IsRequired()
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<VMonthAmortback>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMonthAmortback");

                entity.Property(e => e.AuthCode)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.DiscountDay).HasColumnName("discount_day");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.Discrate).HasColumnName("discrate");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("Rec_Status");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.TenorDesc).HasMaxLength(50);

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TermDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TERM_DUE_DATE");

                entity.Property(e => e.UserCoede)
                    .IsRequired()
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<VRefundTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRefundTax");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.RpCustAc1).HasMaxLength(15);

                entity.Property(e => e.RpCustAc2).HasMaxLength(15);

                entity.Property(e => e.RpCustAc3).HasMaxLength(15);

                entity.Property(e => e.RpPayBy).HasMaxLength(15);
            });

            modelBuilder.Entity<VTranPaymentLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTranPaymentLoan");

                entity.Property(e => e.Allocation).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Module).HasMaxLength(4);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<VauthModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VAuthModule");

                entity.Property(e => e.CtlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Desc");

                entity.Property(e => e.CtlName)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Name");

                entity.Property(e => e.CtlNote1)
                    .HasMaxLength(50)
                    .HasColumnName("CTL_Note1");

                entity.Property(e => e.CtlType)
                    .HasMaxLength(10)
                    .HasColumnName("CTL_Type");

                entity.Property(e => e.ModCode)
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.UserId)
                    .HasMaxLength(12)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<VdayTranSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VDayTranSum");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Comm).HasColumnName("COMM");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.KeyNumber).HasMaxLength(20);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VdayTranSum2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VDayTranSum2");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.KeyNumber).HasMaxLength(20);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vfindkeyno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vfindkeyno");

                entity.Property(e => e.IspCcs)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_ccs");

                entity.Property(e => e.IspCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ISP_ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.IspCramt).HasColumnName("ISP_cramt");

                entity.Property(e => e.IspCust)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_cust");

                entity.Property(e => e.IspCustno)
                    .HasMaxLength(6)
                    .HasColumnName("ISP_Custno");

                entity.Property(e => e.IspFac)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("ISP_fac");

                entity.Property(e => e.IspProd)
                    .HasMaxLength(15)
                    .HasColumnName("ISP_prod");

                entity.Property(e => e.IspRelate)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_relate");

                entity.Property(e => e.TfAmt)
                    .HasColumnType("money")
                    .HasColumnName("TF_amt");

                entity.Property(e => e.TfCcs)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TF_ccs")
                    .IsFixedLength(true);

                entity.Property(e => e.TfCcy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TF_ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.TfCust)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TF_cust")
                    .IsFixedLength(true);

                entity.Property(e => e.TfProd)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TF_prod")
                    .IsFixedLength(true);

                entity.Property(e => e.TfRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TF_Ref")
                    .IsFixedLength(true);

                entity.Property(e => e.TfRelate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TF_relate")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewAllRemRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAllRemRate");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.RemRefNo)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.RmForward).HasMaxLength(15);
            });

            modelBuilder.Entity<ViewAllRemit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAllRemit");

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo1).HasMaxLength(35);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RateFlag)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateRemark)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateType).HasMaxLength(1);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RemBank).HasMaxLength(20);

                entity.Property(e => e.RemCcy).HasMaxLength(3);

                entity.Property(e => e.RemDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RemrefNo)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ViewAremExchRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewARemExchRate");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.RemRefNo)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.RmForward).HasMaxLength(15);
            });

            modelBuilder.Entity<ViewBankLiab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewBankLiab");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.Dbe).HasColumnName("DBE");

                entity.Property(e => e.Dmlc).HasColumnName("DMLC");

                entity.Property(e => e.Exac).HasColumnName("EXAC");

                entity.Property(e => e.Exbc).HasColumnName("EXBC");

                entity.Property(e => e.Exlc).HasColumnName("EXLC");

                entity.Property(e => e.Expc).HasColumnName("EXPC");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Iblt).HasColumnName("IBLT");

                entity.Property(e => e.Ibs).HasColumnName("IBS");

                entity.Property(e => e.Imbc).HasColumnName("IMBC");

                entity.Property(e => e.ImblOver).HasColumnName("IMBL_Over");

                entity.Property(e => e.Imlc).HasColumnName("IMLC");

                entity.Property(e => e.Imtr).HasColumnName("IMTR");

                entity.Property(e => e.Lg).HasColumnName("LG");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook).HasColumnName("NLTR_Book");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.Sblc).HasColumnName("SBLC");

                entity.Property(e => e.Sgbc).HasColumnName("SGBC");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.Sglc).HasColumnName("SGLC");

                entity.Property(e => e.Trbc).HasColumnName("TRBC");

                entity.Property(e => e.Trdlc).HasColumnName("TRDLC");

                entity.Property(e => e.Trlc).HasColumnName("TRLC");

                entity.Property(e => e.Troa).HasColumnName("TROA");

                entity.Property(e => e.XbccBook).HasColumnName("XBCC_Book");

                entity.Property(e => e.Xlcc).HasColumnName("XLCC");
            });

            modelBuilder.Entity<ViewBankLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBankLimit");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AvailableAmt).HasColumnName("Available_Amt");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BlockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Block_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.BlockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BlockNote)
                    .HasMaxLength(350)
                    .HasColumnName("Block_Note");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.Condition).HasMaxLength(150);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Credit_Ccy");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmount).HasColumnName("Hold_Amount");

                entity.Property(e => e.LiabAmt).HasColumnName("Liab_Amt");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.OriginAmount).HasColumnName("Origin_Amount");

                entity.Property(e => e.PendingAmt).HasColumnName("Pending_Amt");

                entity.Property(e => e.RecCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Seq_No")
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount).HasColumnName("Susp_Amount");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UsingRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewBankLsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewBankLSum");

                entity.Property(e => e.BankCode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.Dbe).HasColumnName("DBE");

                entity.Property(e => e.Dmlc).HasColumnName("DMLC");

                entity.Property(e => e.Exac).HasColumnName("EXAC");

                entity.Property(e => e.Exbc).HasColumnName("EXBC");

                entity.Property(e => e.Exlc).HasColumnName("EXLC");

                entity.Property(e => e.Expc).HasColumnName("EXPC");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Iblt).HasColumnName("IBLT");

                entity.Property(e => e.Ibs).HasColumnName("IBS");

                entity.Property(e => e.Imbc).HasColumnName("IMBC");

                entity.Property(e => e.ImblOver).HasColumnName("IMBL_Over");

                entity.Property(e => e.Imlc).HasColumnName("IMLC");

                entity.Property(e => e.Imtr).HasColumnName("IMTR");

                entity.Property(e => e.Lg).HasColumnName("LG");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook).HasColumnName("NLTR_Book");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.Sblc).HasColumnName("SBLC");

                entity.Property(e => e.Sgbc).HasColumnName("SGBC");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.Sglc).HasColumnName("SGLC");

                entity.Property(e => e.Trbc).HasColumnName("TRBC");

                entity.Property(e => e.Trdlc).HasColumnName("TRDLC");

                entity.Property(e => e.Trlc).HasColumnName("TRLC");

                entity.Property(e => e.Troa).HasColumnName("TROA");

                entity.Property(e => e.XbccBook).HasColumnName("XBCC_Book");

                entity.Property(e => e.Xlcc).HasColumnName("XLCC");
            });

            modelBuilder.Entity<ViewBusVolume>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBusVolume");

                entity.Property(e => e.Allocation).HasMaxLength(15);

                entity.Property(e => e.Amend).HasMaxLength(15);

                entity.Property(e => e.AmendFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName).HasMaxLength(180);

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("remark");

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Section)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<ViewCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCCS");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");
            });

            modelBuilder.Entity<ViewClbout>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCLBOut");

                entity.Property(e => e.AgentName).HasMaxLength(500);

                entity.Property(e => e.BranCode)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.BranName)
                    .HasMaxLength(70)
                    .HasColumnName("Bran_Name");

                entity.Property(e => e.Cicdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CICDate");

                entity.Property(e => e.Clccy)
                    .HasMaxLength(3)
                    .HasColumnName("CLCCy");

                entity.Property(e => e.ClccyAmt).HasColumnName("CLCcyAmt");

                entity.Property(e => e.Clnumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("CLNumber");

                entity.Property(e => e.CustAddr)
                    .HasMaxLength(500)
                    .HasColumnName("Cust_Addr");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo)
                    .HasMaxLength(35)
                    .HasColumnName("Cust_Info");

                entity.Property(e => e.Description).HasMaxLength(15);

                entity.Property(e => e.Event).HasMaxLength(20);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecType).HasMaxLength(10);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewCreditLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCreditLimit");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AvailableAmt).HasColumnName("Available_Amt");

                entity.Property(e => e.BlockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Block_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.BlockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BlockNote)
                    .HasMaxLength(350)
                    .HasColumnName("Block_Note");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(10)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.Cfrspread).HasColumnName("CFRSpread");

                entity.Property(e => e.ClmsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLMS_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Condition).HasMaxLength(150);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Credit_Ccy");

                entity.Property(e => e.CreditShare).HasColumnName("Credit_Share");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.EarAmount).HasColumnName("Ear_Amount");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmount).HasColumnName("Hold_Amount");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.OriginAmount).HasColumnName("Origin_Amount");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(6)
                    .HasColumnName("Parent_Id");

                entity.Property(e => e.RecCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferCust)
                    .HasMaxLength(6)
                    .HasColumnName("Refer_Cust");

                entity.Property(e => e.ReferFacility)
                    .HasMaxLength(13)
                    .HasColumnName("Refer_Facility");

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Seq_No")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareAmount).HasColumnName("Share_Amount");

                entity.Property(e => e.ShareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount).HasColumnName("Susp_Amount");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UsingRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewCreditLimitTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCreditLimitTmp");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AutoRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AvailableAmt).HasColumnName("Available_Amt");

                entity.Property(e => e.BlockCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Block_Code")
                    .IsFixedLength(true);

                entity.Property(e => e.BlockDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BlockNote)
                    .HasMaxLength(350)
                    .HasColumnName("Block_Note");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.Cfrrate)
                    .HasMaxLength(10)
                    .HasColumnName("CFRRate");

                entity.Property(e => e.Cfrspread).HasColumnName("CFRSpread");

                entity.Property(e => e.Condition).HasMaxLength(150);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CreditCcy)
                    .HasMaxLength(3)
                    .HasColumnName("Credit_Ccy");

                entity.Property(e => e.CreditShare).HasColumnName("Credit_Share");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.EarAmount).HasColumnName("Ear_Amount");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmount).HasColumnName("Hold_Amount");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.OriginAmount).HasColumnName("Origin_Amount");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(6)
                    .HasColumnName("Parent_Id");

                entity.Property(e => e.RecCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferCust)
                    .HasMaxLength(6)
                    .HasColumnName("Refer_Cust");

                entity.Property(e => e.ReferFacility)
                    .HasMaxLength(13)
                    .HasColumnName("Refer_Facility");

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Seq_No")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareAmount).HasColumnName("Share_Amount");

                entity.Property(e => e.ShareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount).HasColumnName("Susp_Amount");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.UsingRec)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewCustLiab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCustLiab");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.ReferCust)
                    .HasMaxLength(6)
                    .HasColumnName("Refer_Cust");

                entity.Property(e => e.ReferFacility)
                    .HasMaxLength(13)
                    .HasColumnName("Refer_Facility");

                entity.Property(e => e.ShareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Flag")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewCustLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCustLimit");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.ClmsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLMS_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.LimitDlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_DLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExbc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXBC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExpc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXPC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMEX")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMTR")
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo).HasColumnName("Seq_No");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewCustLm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewCustLm");

                entity.Property(e => e.CcsCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCS_Ccy")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.CcsStat)
                    .HasMaxLength(10)
                    .HasColumnName("CCS_Stat");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CustCcid)
                    .HasMaxLength(8)
                    .HasColumnName("Cust_CCID");

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_CIF");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.IspCcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_ccs_no");

                entity.Property(e => e.IspRelatedAc)
                    .HasMaxLength(20)
                    .HasColumnName("ISP_related_ac");

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.ProdMod)
                    .HasMaxLength(15)
                    .HasColumnName("Prod_Mod");

                entity.Property(e => e.ProdRef)
                    .HasMaxLength(5)
                    .HasColumnName("Prod_Ref");
            });

            modelBuilder.Entity<ViewCustLsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewCustLSum");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.Dbe).HasColumnName("DBE");

                entity.Property(e => e.Dmlc).HasColumnName("DMLC");

                entity.Property(e => e.Exbc).HasColumnName("EXBC");

                entity.Property(e => e.Exlc).HasColumnName("EXLC");

                entity.Property(e => e.Expc).HasColumnName("EXPC");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Iblt).HasColumnName("IBLT");

                entity.Property(e => e.Ibs).HasColumnName("IBS");

                entity.Property(e => e.Imbc).HasColumnName("IMBC");

                entity.Property(e => e.ImblOver).HasColumnName("IMBL_Over");

                entity.Property(e => e.Imlc).HasColumnName("IMLC");

                entity.Property(e => e.Imtr).HasColumnName("IMTR");

                entity.Property(e => e.Lg).HasColumnName("LG");

                entity.Property(e => e.NctrBook).HasColumnName("NCTR_Book");

                entity.Property(e => e.NdtrBook).HasColumnName("NDTR_Book");

                entity.Property(e => e.NltrBook).HasColumnName("NLTR_Book");

                entity.Property(e => e.NttrBook).HasColumnName("NTTR_Book");

                entity.Property(e => e.Sblc).HasColumnName("SBLC");

                entity.Property(e => e.Sgbc).HasColumnName("SGBC");

                entity.Property(e => e.SgbcIssued).HasColumnName("SGBC_Issued");

                entity.Property(e => e.Sglc).HasColumnName("SGLC");

                entity.Property(e => e.Trbc).HasColumnName("TRBC");

                entity.Property(e => e.Trdlc).HasColumnName("TRDLC");

                entity.Property(e => e.Trlc).HasColumnName("TRLC");

                entity.Property(e => e.Troa).HasColumnName("TROA");

                entity.Property(e => e.Trtrs).HasColumnName("TRTRS");

                entity.Property(e => e.XbccBook).HasColumnName("XBCC_Book");

                entity.Property(e => e.Xlcc).HasColumnName("XLCC");
            });

            modelBuilder.Entity<ViewCustShare>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCustShare");

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CreditShare).HasColumnName("Credit_Share");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.LimitDlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_DLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExbc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXBC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitExpc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_EXPC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMEX")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImlc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMLC")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMP")
                    .IsFixedLength(true);

                entity.Property(e => e.LimitImtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Limit_IMTR")
                    .IsFixedLength(true);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(6)
                    .HasColumnName("Parent_Id");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferCust)
                    .HasMaxLength(6)
                    .HasColumnName("Refer_Cust");

                entity.Property(e => e.ReferFacility)
                    .HasMaxLength(13)
                    .HasColumnName("Refer_Facility");

                entity.Property(e => e.Remark).HasMaxLength(350);

                entity.Property(e => e.RevolFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Revol_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.SeqNo).HasColumnName("Seq_No");

                entity.Property(e => e.ShareAmount).HasColumnName("Share_Amount");

                entity.Property(e => e.ShareCcs)
                    .HasMaxLength(20)
                    .HasColumnName("Share_CCS");

                entity.Property(e => e.ShareCredit).HasColumnName("Share_Credit");

                entity.Property(e => e.ShareCust)
                    .HasMaxLength(6)
                    .HasColumnName("Share_Cust");

                entity.Property(e => e.ShareFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Share_Flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ShareLimit)
                    .HasMaxLength(10)
                    .HasColumnName("Share_Limit");

                entity.Property(e => e.ShareUsed).HasColumnName("Share_Used");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SuspAmount).HasColumnName("Susp_Amount");
            });

            modelBuilder.Entity<ViewDayRemExchRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayRemExchRate");

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustBran)
                    .HasMaxLength(3)
                    .HasColumnName("Cust_Bran");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustInfo1).HasMaxLength(35);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RateFlag).HasMaxLength(50);

                entity.Property(e => e.RateRemark).HasMaxLength(50);

                entity.Property(e => e.RateType).HasMaxLength(1);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RemBank).HasMaxLength(20);

                entity.Property(e => e.RemCcy).HasMaxLength(3);

                entity.Property(e => e.RemDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RemRefNo)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.RemType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RmForward).HasMaxLength(15);
            });

            modelBuilder.Entity<ViewDayTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayTrans");

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Allocation).HasMaxLength(15);

                entity.Property(e => e.Amend).HasMaxLength(15);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Balpd).HasColumnName("BALPD");

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(175)
                    .HasColumnName("BName");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collection)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTION");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commcic).HasColumnName("COMMCIC");

                entity.Property(e => e.Commcip).HasColumnName("COMMCIP");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(500)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .HasMaxLength(10)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .HasMaxLength(500)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName).HasMaxLength(500);

                entity.Property(e => e.DecreaseAmt).HasColumnName("Decrease_Amt");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.FacNo).HasMaxLength(20);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IncreaseAmt).HasColumnName("Increase_Amt");

                entity.Property(e => e.IssBank)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("ISS_BANK");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PayMethod)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(20)
                    .HasColumnName("TenorType");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewExPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewExPayment");

                entity.Property(e => e.AcBahtnet).HasMaxLength(15);

                entity.Property(e => e.AgentAmt).HasColumnName("Agent_amt");

                entity.Property(e => e.AgentBankId)
                    .HasMaxLength(13)
                    .HasColumnName("AGENT_BANK_ID");

                entity.Property(e => e.AgentPayBy).HasColumnName("AGENT_PAY_BY");

                entity.Property(e => e.AgentRate).HasColumnName("Agent_rate");

                entity.Property(e => e.AgentThb).HasColumnName("Agent_thb");

                entity.Property(e => e.Allocation)
                    .HasMaxLength(15)
                    .HasColumnName("ALLOCATION");

                entity.Property(e => e.BankChargeAmt).HasColumnName("BANK_CHARGE_AMT");

                entity.Property(e => e.BaseDay).HasColumnName("BASE_DAY");

                entity.Property(e => e.BeStamp).HasColumnName("BE_STAMP");

                entity.Property(e => e.BeneId)
                    .HasMaxLength(13)
                    .HasColumnName("BENE_ID");

                entity.Property(e => e.ChargeCcy).HasColumnName("Charge_Ccy");

                entity.Property(e => e.ChargeRate).HasColumnName("Charge_Rate");

                entity.Property(e => e.ChargeThb).HasColumnName("Charge_Thb");

                entity.Property(e => e.ClaimType).HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.CollectAgent).HasColumnName("COLLECT_AGENT");

                entity.Property(e => e.ComLieu).HasColumnName("Com_Lieu");

                entity.Property(e => e.CommOther).HasColumnName("COMM_OTHER");

                entity.Property(e => e.CourierPostage).HasColumnName("COURIER_POSTAGE");

                entity.Property(e => e.CurrentDisRate).HasColumnName("CURRENT_DIS_RATE");

                entity.Property(e => e.CurrentIntRate).HasColumnName("CURRENT_INT_RATE");

                entity.Property(e => e.DebitCreditFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Debit_credit_flag")
                    .IsFixedLength(true);

                entity.Property(e => e.DiscountAmt).HasColumnName("DISCOUNT_AMT");

                entity.Property(e => e.DiscountCcy).HasColumnName("DISCOUNT_CCY");

                entity.Property(e => e.Discrate).HasColumnName("DISCRATE");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(15)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.DraftAmt).HasColumnName("DRAFT_AMT");

                entity.Property(e => e.DraftCcy)
                    .HasMaxLength(3)
                    .HasColumnName("DRAFT_CCY");

                entity.Property(e => e.Draftcomm).HasColumnName("DRAFTCOMM");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EVENT_DATE");

                entity.Property(e => e.EventNo).HasColumnName("EVENT_NO");

                entity.Property(e => e.EventType)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT_TYPE");

                entity.Property(e => e.FbAmt).HasColumnName("fb_amt");

                entity.Property(e => e.FbAmtThb).HasColumnName("fb_amt_thb");

                entity.Property(e => e.FbCcy)
                    .HasMaxLength(3)
                    .HasColumnName("fb_ccy");

                entity.Property(e => e.FbRate).HasColumnName("fb_rate");

                entity.Property(e => e.FcdAcc).HasMaxLength(15);

                entity.Property(e => e.ForwardConractNo1)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO1");

                entity.Property(e => e.ForwardConractNo2)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO2");

                entity.Property(e => e.ForwardConractNo3)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO3");

                entity.Property(e => e.ForwardConractNo4)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO4");

                entity.Property(e => e.ForwardConractNo5)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO5");

                entity.Property(e => e.ForwardConractNo6)
                    .HasMaxLength(15)
                    .HasColumnName("FORWARD_CONRACT_NO6");

                entity.Property(e => e.HandingFee).HasColumnName("HANDING_FEE");

                entity.Property(e => e.IntDay).HasColumnName("int_day");

                entity.Property(e => e.IntPaidAmt).HasColumnName("int_paid_amt");

                entity.Property(e => e.IntPaidRate).HasColumnName("int_paid_rate");

                entity.Property(e => e.IntPaidThb).HasColumnName("int_paid_thb");

                entity.Property(e => e.IssueBankId)
                    .HasMaxLength(13)
                    .HasColumnName("ISSUE_BANK_ID");

                entity.Property(e => e.LessAgent).HasColumnName("LESS_AGENT");

                entity.Property(e => e.Method).HasMaxLength(10);

                entity.Property(e => e.Mtamt).HasColumnName("MTAmt");

                entity.Property(e => e.NegoAmt).HasColumnName("NEGO_AMT");

                entity.Property(e => e.NegoComm).HasColumnName("NEGO_COMM");

                entity.Property(e => e.NetProceedClaim).HasColumnName("NET_PROCEED_CLAIM");

                entity.Property(e => e.OverPaidAmt).HasColumnName("over_paid_amt");

                entity.Property(e => e.OverPaidRate).HasColumnName("over_paid_rate");

                entity.Property(e => e.OverPaidThb).HasColumnName("over_paid_thb");

                entity.Property(e => e.ParAmt).HasColumnName("parAmt");

                entity.Property(e => e.ParAmtThb).HasColumnName("parAmtTHB");

                entity.Property(e => e.PartialAmt1).HasColumnName("PARTIAL_AMT1");

                entity.Property(e => e.PartialAmt1Thb).HasColumnName("PARTIAL_AMT1_THB");

                entity.Property(e => e.PartialAmt2).HasColumnName("PARTIAL_AMT2");

                entity.Property(e => e.PartialAmt2Thb).HasColumnName("PARTIAL_AMT2_THB");

                entity.Property(e => e.PartialAmt3).HasColumnName("PARTIAL_AMT3");

                entity.Property(e => e.PartialAmt3Thb).HasColumnName("PARTIAL_AMT3_THB");

                entity.Property(e => e.PartialAmt4).HasColumnName("PARTIAL_AMT4");

                entity.Property(e => e.PartialAmt4Thb).HasColumnName("PARTIAL_AMT4_THB");

                entity.Property(e => e.PartialAmt5).HasColumnName("PARTIAL_AMT5");

                entity.Property(e => e.PartialAmt5Thb).HasColumnName("PARTIAL_AMT5_THB");

                entity.Property(e => e.PartialAmt6).HasColumnName("PARTIAL_AMT6");

                entity.Property(e => e.PartialAmt6Thb).HasColumnName("PARTIAL_AMT6_THB");

                entity.Property(e => e.PartialFullRate).HasColumnName("PARTIAL_FULL_RATE");

                entity.Property(e => e.PartialRate1).HasColumnName("PARTIAL_RATE1");

                entity.Property(e => e.PartialRate2).HasColumnName("PARTIAL_RATE2");

                entity.Property(e => e.PartialRate3).HasColumnName("PARTIAL_RATE3");

                entity.Property(e => e.PartialRate4).HasColumnName("PARTIAL_RATE4");

                entity.Property(e => e.PartialRate5).HasColumnName("PARTIAL_RATE5");

                entity.Property(e => e.PartialRate6).HasColumnName("PARTIAL_RATE6");

                entity.Property(e => e.PayBy).HasColumnName("PAY_BY");

                entity.Property(e => e.PayType).HasColumnName("PAY_TYPE");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PAYMENT_DATE");

                entity.Property(e => e.PaymentInstru)
                    .HasMaxLength(10)
                    .HasColumnName("PAYMENT_INSTRU");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrnPaidThb).HasColumnName("prn_paid_thb");

                entity.Property(e => e.PurchDiscDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PURCH_DISC_DATE");

                entity.Property(e => e.PurchaseAmt).HasColumnName("PURCHASE_AMT");

                entity.Property(e => e.PurchaseRate).HasColumnName("PURCHASE_RATE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(10)
                    .HasColumnName("REC_STATUS");

                entity.Property(e => e.ReceivePayAmt).HasColumnName("RECEIVE_PAY_AMT");

                entity.Property(e => e.ReceivedNo)
                    .HasMaxLength(15)
                    .HasColumnName("RECEIVED_NO");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(10)
                    .HasColumnName("RECORD_TYPE");

                entity.Property(e => e.RefundTaxAmt).HasColumnName("REFUND_TAX_AMT");

                entity.Property(e => e.RefundTaxYn).HasColumnName("REFUND_TAX_YN");

                entity.Property(e => e.RpChqBank).HasMaxLength(10);

                entity.Property(e => e.RpChqBranch).HasMaxLength(25);

                entity.Property(e => e.RpChqNo).HasMaxLength(15);

                entity.Property(e => e.RpCustAc1).HasMaxLength(15);

                entity.Property(e => e.RpCustAc2).HasMaxLength(15);

                entity.Property(e => e.RpCustAc3).HasMaxLength(15);

                entity.Property(e => e.RpCustCode).HasMaxLength(6);

                entity.Property(e => e.RpDocNo).HasMaxLength(15);

                entity.Property(e => e.RpEvent).HasMaxLength(20);

                entity.Property(e => e.RpModule).HasMaxLength(5);

                entity.Property(e => e.RpPayBy).HasMaxLength(15);

                entity.Property(e => e.RpPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SettlementCredit).HasColumnName("SETTLEMENT_CREDIT");

                entity.Property(e => e.SightAmt).HasColumnName("SIGHT_AMT");

                entity.Property(e => e.SightForward)
                    .HasMaxLength(15)
                    .HasColumnName("SIGHT_FORWARD");

                entity.Property(e => e.SightPaidAmt).HasColumnName("SIGHT_PAID_AMT");

                entity.Property(e => e.SightPaidRate).HasColumnName("SIGHT_PAID_RATE");

                entity.Property(e => e.SightPaidThb).HasColumnName("SIGHT_PAID_THB");

                entity.Property(e => e.StampFee).HasColumnName("STAMP_FEE");

                entity.Property(e => e.TelexSwift).HasColumnName("TELEX_SWIFT");

                entity.Property(e => e.TenorOfColl).HasColumnName("TENOR_OF_COLL");

                entity.Property(e => e.TenorType).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.TermAmt).HasColumnName("TERM_AMT");

                entity.Property(e => e.TermForward)
                    .HasMaxLength(15)
                    .HasColumnName("TERM_FORWARD");

                entity.Property(e => e.TermPaidAmt).HasColumnName("TERM_PAID_AMT");

                entity.Property(e => e.TermPaidRate).HasColumnName("TERM_PAID_RATE");

                entity.Property(e => e.TermPaidThb).HasColumnName("TERM_PAID_THB");

                entity.Property(e => e.TotNegoAmount).HasColumnName("TOT_NEGO_AMOUNT");

                entity.Property(e => e.TotNegoAmt).HasColumnName("TOT_NEGO_AMT");

                entity.Property(e => e.TotPrincPaid).HasColumnName("TOT_PRINC_PAID");

                entity.Property(e => e.TotalCharge).HasColumnName("Total_Charge");

                entity.Property(e => e.TotalDueToCus).HasColumnName("TOTAL_DUE_TO_CUS");

                entity.Property(e => e.TotalNegoBalThb).HasColumnName("TOTAL_NEGO_BAL_THB");

                entity.Property(e => e.TotalNegoBalance).HasColumnName("TOTAL_NEGO_BALANCE");
            });

            modelBuilder.Entity<ViewFcdAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFcdAccount");

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BalanceMacc).HasColumnName("BalanceMAcc");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CommFcd).HasColumnName("CommFCD");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.CustName).HasMaxLength(100);

                entity.Property(e => e.DateLastPaid).HasColumnType("smalldatetime");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Expr2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdAccName).HasMaxLength(70);

                entity.Property(e => e.FcdAccNo)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.FcdAccType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdCcy).HasMaxLength(3);

                entity.Property(e => e.FcdCcyName).HasMaxLength(50);

                entity.Property(e => e.FcdEntryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FcdSavFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HoldFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Maturity).HasColumnType("smalldatetime");

                entity.Property(e => e.OpenDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RefAccount).HasMaxLength(35);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.TaxRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Thbbal).HasColumnName("THBBal");

                entity.Property(e => e.TranCode).HasMaxLength(25);

                entity.Property(e => e.TranDept).HasMaxLength(3);

                entity.Property(e => e.TranDoc)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.TranFcashAmt).HasColumnName("TranFCashAmt");

                entity.Property(e => e.TranFcdStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranFflag)
                    .HasMaxLength(5)
                    .HasColumnName("TranFFlag");

                entity.Property(e => e.TranFmethod)
                    .HasMaxLength(15)
                    .HasColumnName("TranFMethod");

                entity.Property(e => e.UpdateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewFcdout>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFCDout");

                entity.Property(e => e.Accbalance).HasColumnName("ACCbalance");

                entity.Property(e => e.AccruCcy).HasColumnName("AccruCCy");

                entity.Property(e => e.CheckLiab)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Custcode)
                    .HasMaxLength(6)
                    .HasColumnName("custcode");

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DepositDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FcdAccNo)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.FcdAccType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdCcy).HasMaxLength(3);

                entity.Property(e => e.FcdFinInst)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdResType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FcdSavFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fcdbalance).HasColumnName("FCDBalance");

                entity.Property(e => e.Fcdtype)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("FCDtype");

                entity.Property(e => e.FlagRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OpenDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranDoc)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.TranFflag)
                    .HasMaxLength(5)
                    .HasColumnName("TranFFlag");
            });

            modelBuilder.Entity<ViewFcpimport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFCPImport");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("ccy");

                entity.Property(e => e.SumAmt).HasColumnName("sumAmt");
            });

            modelBuilder.Entity<ViewGenAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewGenACC");

                entity.Property(e => e.AccMap)
                    .HasMaxLength(15)
                    .HasColumnName("Acc_Map");

                entity.Property(e => e.Accode).HasMaxLength(8);

                entity.Property(e => e.Accy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACcy")
                    .IsFixedLength(true);

                entity.Property(e => e.Aevent)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("AEvent");

                entity.Property(e => e.Amodule)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("AModule");

                entity.Property(e => e.Aname)
                    .HasMaxLength(20)
                    .HasColumnName("AName");

                entity.Property(e => e.Anature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ANature")
                    .IsFixedLength(true);

                entity.Property(e => e.Aseq).HasColumnName("ASeq");
            });

            modelBuilder.Entity<ViewGendlc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewGENDLC");

                entity.Property(e => e.Allocation).HasMaxLength(13);

                entity.Property(e => e.AmendFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BalAmt).HasColumnName("balAmt");

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Comcerti).HasColumnName("COMCERTI");

                entity.Property(e => e.Comeng).HasColumnName("COMENG");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Comover).HasColumnName("COMOVER");

                entity.Property(e => e.Comtran).HasColumnName("COMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.Discfee).HasColumnName("DISCFEE");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fcyrec)
                    .HasMaxLength(15)
                    .HasColumnName("FCYRec");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PayFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PayMentFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Paymethod).HasMaxLength(15);

                entity.Property(e => e.PendingPayable).HasColumnName("Pending_Payable");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(15)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewGroupGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewGroupGL");

                entity.Property(e => e.SumCcy).HasColumnName("SumCCY");

                entity.Property(e => e.SumThb).HasColumnName("SumTHB");

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranAllocate).HasMaxLength(15);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCenter).HasMaxLength(4);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranEvent).HasMaxLength(20);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ViewIsptfl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewISPTFL");

                entity.Property(e => e.BalIsp).HasColumnName("bal_ISP");

                entity.Property(e => e.BalTfl)
                    .HasColumnType("money")
                    .HasColumnName("bal_TFL");

                entity.Property(e => e.CcsIsp)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ISP");

                entity.Property(e => e.CcsRelatedTfl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCS_related_TFL")
                    .IsFixedLength(true);

                entity.Property(e => e.CcsTfl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCS_TFL")
                    .IsFixedLength(true);

                entity.Property(e => e.CcyIsp)
                    .HasMaxLength(3)
                    .HasColumnName("ccy_ISP");

                entity.Property(e => e.CcyTfl)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ccy_TFL")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("cust_code");

                entity.Property(e => e.CustIsp)
                    .HasMaxLength(20)
                    .HasColumnName("cust_ISP");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.CustTfl)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("cust_TFL")
                    .IsFixedLength(true);

                entity.Property(e => e.Keynumber)
                    .HasMaxLength(35)
                    .HasColumnName("keynumber");

                entity.Property(e => e.LmAmtIsp).HasColumnName("LM_amt_ISP");

                entity.Property(e => e.LmAmtTfl)
                    .HasColumnType("money")
                    .HasColumnName("LM_amt_TFL");

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("module");

                entity.Property(e => e.RefTfl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Ref_TFL")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewIsptfl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewISPTFL2");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CreditAcct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Acct")
                    .IsFixedLength(true);

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.RefNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Ref_no")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewLastExchRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLastExchRate");

                entity.Property(e => e.ExchCcy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("Exch_Ccy");

                entity.Property(e => e.ExchDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Exch_Date");

                entity.Property(e => e.ExchTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Exch_Time")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewLcInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_LC_INFO");

                entity.Property(e => e.Advbankcode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("ADVBANKCODE");

                entity.Property(e => e.Advname)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("ADVNAME");

                entity.Property(e => e.Amendno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("AMENDNO");

                entity.Property(e => e.Balamt).HasColumnName("BALAMT");

                entity.Property(e => e.Bencnty)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("BENCNTY");

                entity.Property(e => e.Beninfo)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("BENINFO");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCY");

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(20)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Custname)
                    .HasMaxLength(70)
                    .HasColumnName("CUSTNAME");

                entity.Property(e => e.Duedate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Event)
                    .HasMaxLength(25)
                    .HasColumnName("EVENT");

                entity.Property(e => e.Eventdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EVENTDATE");

                entity.Property(e => e.GoodDet)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("GOOD_DET");

                entity.Property(e => e.Goodscode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("GOODSCODE");

                entity.Property(e => e.Keynumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("KEYNUMBER")
                    .IsFixedLength(true);

                entity.Property(e => e.Orgamt).HasColumnName("ORGAMT");

                entity.Property(e => e.Product)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(35)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .IsFixedLength(true);

                entity.Property(e => e.SwiftCode)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("SWIFT_CODE");

                entity.Property(e => e.Tenortype)
                    .HasMaxLength(20)
                    .HasColumnName("TENORTYPE");
            });

            modelBuilder.Entity<ViewMapAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMapAccount");

                entity.Property(e => e.AccCode)
                    .IsRequired()
                    .HasMaxLength(19)
                    .HasColumnName("Acc_Code");

                entity.Property(e => e.AccName)
                    .HasMaxLength(100)
                    .HasColumnName("Acc_Name");

                entity.Property(e => e.MAccBsLine)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_BsLine");

                entity.Property(e => e.MAccBuArea)
                    .HasMaxLength(4)
                    .HasColumnName("mAcc_BuArea");

                entity.Property(e => e.MAccCond)
                    .HasMaxLength(1)
                    .HasColumnName("mAcc_Cond");

                entity.Property(e => e.MAccCost)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_Cost");

                entity.Property(e => e.MAccMod)
                    .HasMaxLength(5)
                    .HasColumnName("mAcc_Mod");

                entity.Property(e => e.MAccNew)
                    .HasMaxLength(19)
                    .HasColumnName("mAcc_New");

                entity.Property(e => e.MAccProfit)
                    .HasMaxLength(10)
                    .HasColumnName("mAcc_Profit");

                entity.Property(e => e.MAccType)
                    .HasMaxLength(15)
                    .HasColumnName("mAcc_Type");
            });

            modelBuilder.Entity<ViewMapDailyGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMapDailyGL");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustCode).HasMaxLength(8);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranAllocate).HasMaxLength(15);

                entity.Property(e => e.TranBran).HasMaxLength(4);

                entity.Property(e => e.TranBsarea)
                    .HasMaxLength(4)
                    .HasColumnName("TranBSArea");

                entity.Property(e => e.TranBsline)
                    .HasMaxLength(10)
                    .HasColumnName("TranBSLine");

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranCenter).HasMaxLength(4);

                entity.Property(e => e.TranCond).HasMaxLength(20);

                entity.Property(e => e.TranCost).HasMaxLength(10);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranDesc).HasMaxLength(50);

                entity.Property(e => e.TranDocNo)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.TranEvent).HasMaxLength(20);

                entity.Property(e => e.TranIndex2).HasMaxLength(15);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranProd).HasMaxLength(10);

                entity.Property(e => e.TranProfit).HasMaxLength(10);

                entity.Property(e => e.TranRef).HasMaxLength(15);

                entity.Property(e => e.TranSale).HasMaxLength(10);

                entity.Property(e => e.TranSapAcc).HasMaxLength(19);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranTerm).HasMaxLength(10);

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VouchId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("VouchID");
            });

            modelBuilder.Entity<ViewMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMaster");

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(175)
                    .HasColumnName("BName");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(20)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FacNo).HasMaxLength(15);

                entity.Property(e => e.FlagBack)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFixDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IssBank)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("ISS_BANK");

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("datetime");

                entity.Property(e => e.Module).HasMaxLength(15);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayMethod)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RateFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.SubProduct)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewMasterClose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMasterClose");

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.AuthDate).HasColumnType("datetime");

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(175)
                    .HasColumnName("BName");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(20)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FacNo).HasMaxLength(15);

                entity.Property(e => e.FlagBack)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFixDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IssBank)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("ISS_BANK");

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("datetime");

                entity.Property(e => e.Module).HasMaxLength(15);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayMethod)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RateFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.SubProduct)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewMasterDailyOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMasterDailyOuts");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCy");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gfbcint)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCInt");

                entity.Property(e => e.Gfbcouts)
                    .HasMaxLength(10)
                    .HasColumnName("GFBCOuts");

                entity.Property(e => e.GfmsaccInt)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccInt");

                entity.Property(e => e.GfmsaccOuts)
                    .HasMaxLength(11)
                    .HasColumnName("GFMSAccOuts");

                entity.Property(e => e.Gfmsbran)
                    .HasMaxLength(4)
                    .HasColumnName("GFMSBran");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber).HasMaxLength(15);

                entity.Property(e => e.LastEvent).HasMaxLength(25);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.LiabType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.OutsDate).HasMaxLength(10);

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdCode).HasMaxLength(5);

                entity.Property(e => e.Rccode)
                    .HasMaxLength(5)
                    .HasColumnName("RCCode");

                entity.Property(e => e.Reference).HasMaxLength(20);

                entity.Property(e => e.Rmcode)
                    .HasMaxLength(10)
                    .HasColumnName("RMCode");

                entity.Property(e => e.Sbucode)
                    .HasMaxLength(5)
                    .HasColumnName("SBUCode");

                entity.Property(e => e.SubProduct).HasMaxLength(5);

                entity.Property(e => e.TenorDay).HasMaxLength(4);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TENOR_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewMasterGl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMasterGL");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(175)
                    .HasColumnName("BName");

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(20)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewMasterLoan");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("smalldatetime");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<ViewMasterOdu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewMasterODU");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<ViewMasterRecalLiab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMasterRecalLiab");

                entity.Property(e => e.AcceptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Bcnty)
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(175)
                    .HasColumnName("BName");

                entity.Property(e => e.Bpoflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPOFlag")
                    .IsFixedLength(true);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Code");

                entity.Property(e => e.CampaignEffDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Campaign_EffDate");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsCifref)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CIFRef");

                entity.Property(e => e.CcsCnum)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_CNUM");

                entity.Property(e => e.CcsLmType)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LmType");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(20)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.DateStartAccru).HasColumnType("smalldatetime");

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DocNo).HasMaxLength(20);

                entity.Property(e => e.DocNo1).HasMaxLength(35);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FacNo).HasMaxLength(15);

                entity.Property(e => e.FlagBack)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IntFixDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntRate).HasColumnName("intRate");

                entity.Property(e => e.IntRateCode).HasMaxLength(10);

                entity.Property(e => e.IssBank)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("ISS_BANK");

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LastPayment).HasColumnType("datetime");

                entity.Property(e => e.Module).HasMaxLength(15);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.OverdueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PastDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayMethod)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RateFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.SubProduct)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorTerm).HasMaxLength(50);

                entity.Property(e => e.TenorType).HasMaxLength(20);

                entity.Property(e => e.TenorType1).HasColumnName("TENOR_TYPE");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewMonInterest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMonInterest");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DocCcy).HasMaxLength(3);

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocMonth)
                    .IsRequired()
                    .HasMaxLength(7);

                entity.Property(e => e.IntThb).HasColumnName("IntTHB");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewNostro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewNostro");

                entity.Property(e => e.BankCnty)
                    .HasMaxLength(2)
                    .HasColumnName("Bank_Cnty");

                entity.Property(e => e.BankName)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_Name");

                entity.Property(e => e.NostroBank)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Nostro_Bank");

                entity.Property(e => e.NostroCcy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("Nostro_Ccy");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewOdu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewODU");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.ExpcAmt).HasColumnName("EXPC_Amt");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.IblsAmt).HasColumnName("IBLS_Amt");

                entity.Property(e => e.IbltAmt).HasColumnName("IBLT_Amt");

                entity.Property(e => e.ImtrAmt).HasColumnName("IMTR_Amt");

                entity.Property(e => e.XbcpAmt).HasColumnName("XBCP_Amt");

                entity.Property(e => e.XlcpAmt).HasColumnName("XLCP_Amt");
            });

            modelBuilder.Entity<ViewOsbyCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_OSbyCCS");

                entity.Property(e => e.BalAmt).HasColumnName("BAL_AMT");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsLmtype)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LMTYPE");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCY");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(20)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.OutstdAmtThb).HasColumnName("OUTSTD_AMT_THB");

                entity.Property(e => e.RateMidRate).HasColumnName("Rate_MidRate");
            });

            modelBuilder.Entity<ViewOsbyCcs1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_OSbyCCS1");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsLmtype)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LMTYPE");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(20)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.OutstdAmtThb).HasColumnName("OUTSTD_AMT_THB");
            });

            modelBuilder.Entity<ViewOutIsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewOutISP");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_CIF");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityNo)
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");

                entity.Property(e => e.Facno).HasMaxLength(15);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(10)
                    .HasColumnName("Limit_Code");

                entity.Property(e => e.Module).HasMaxLength(4);
            });

            modelBuilder.Entity<ViewPayInterest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPayInterest");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPayPrnciple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewPayPrnciple");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(13);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module).HasMaxLength(4);

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");
            });

            modelBuilder.Entity<ViewPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPayment");

                entity.Property(e => e.DpContract).HasMaxLength(20);

                entity.Property(e => e.DpFromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DpPayName).HasMaxLength(80);

                entity.Property(e => e.DpRemark).HasMaxLength(200);

                entity.Property(e => e.DpToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RpApplicant).HasMaxLength(70);

                entity.Property(e => e.RpChqBank).HasMaxLength(10);

                entity.Property(e => e.RpChqBranch).HasMaxLength(25);

                entity.Property(e => e.RpChqNo).HasMaxLength(15);

                entity.Property(e => e.RpCustAc1).HasMaxLength(15);

                entity.Property(e => e.RpCustAc2).HasMaxLength(15);

                entity.Property(e => e.RpCustAc3).HasMaxLength(15);

                entity.Property(e => e.RpCustCode).HasMaxLength(6);

                entity.Property(e => e.RpDocNo).HasMaxLength(15);

                entity.Property(e => e.RpEvent).HasMaxLength(20);

                entity.Property(e => e.RpIssBank).HasMaxLength(14);

                entity.Property(e => e.RpModule).HasMaxLength(5);

                entity.Property(e => e.RpNote).HasMaxLength(200);

                entity.Property(e => e.RpPayBy).HasMaxLength(15);

                entity.Property(e => e.RpPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RpPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RpRecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.RpRefer1).HasMaxLength(70);

                entity.Property(e => e.RpRefer2).HasMaxLength(70);

                entity.Property(e => e.RpStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewPending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPending");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collection)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTION");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commcic).HasColumnName("COMMCIC");

                entity.Property(e => e.Commcip).HasColumnName("COMMCIP");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName).HasMaxLength(500);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag).HasMaxLength(6);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.RpReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.UserCode).HasMaxLength(12);

                entity.Property(e => e.WithOutFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WithOutType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WrefBankId)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("Wref_Bank_ID");
            });

            modelBuilder.Entity<ViewQuoteRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewQuoteRate");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Keynumber).HasMaxLength(35);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegFunct)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Tenor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<ViewRemTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRemTrans");

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustName).HasMaxLength(35);

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RemType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");
            });

            modelBuilder.Entity<ViewReposgrpCl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_REPOSGrpCL");

                entity.Property(e => e.AvlAmt).HasColumnName("AVL_AMT");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.Bd)
                    .HasMaxLength(3)
                    .HasColumnName("BD");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FlagShare)
                    .HasMaxLength(6)
                    .HasColumnName("FLAG_SHARE");

                entity.Property(e => e.Flagdue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmt).HasColumnName("HOLD_AMT");

                entity.Property(e => e.LimitAmt).HasColumnName("LIMIT_AMT");

                entity.Property(e => e.LimitCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("LIMIT_CODE");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.NetAvlAmt).HasColumnName("NET_AVL_AMT");

                entity.Property(e => e.ShareAmt).HasColumnName("SHARE_AMT");
            });

            modelBuilder.Entity<ViewShowOsbyCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_ShowOSbyCCS");

                entity.Property(e => e.CcsAcct)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_ACCT");

                entity.Property(e => e.CcsLmtype)
                    .HasMaxLength(3)
                    .HasColumnName("CCS_LMTYPE");

                entity.Property(e => e.Cname)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_CIF");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(20)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.OutstdAmtThb).HasColumnName("OUTSTD_AMT_THB");

                entity.Property(e => e.Titl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TITL")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ViewSubOutCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewSubOutCust");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CustCode)
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.FacNo).HasMaxLength(15);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubProduct)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSumMonInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewSumMonInt");

                entity.Property(e => e.BatchType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.DebitAcc)
                    .HasMaxLength(15)
                    .HasColumnName("DebitACC");

                entity.Property(e => e.DocCust).HasMaxLength(6);

                entity.Property(e => e.DocMonth)
                    .IsRequired()
                    .HasMaxLength(7);

                entity.Property(e => e.IntThb).HasColumnName("IntTHB");

                entity.Property(e => e.Login).HasMaxLength(4);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpReceipt).HasMaxLength(15);
            });

            modelBuilder.Entity<ViewTmpBack>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTmpBack");

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("centerid");

                entity.Property(e => e.CustAddr)
                    .HasMaxLength(144)
                    .HasColumnName("custAddr");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.Event).HasMaxLength(25);

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefNumber).HasMaxLength(15);

                entity.Property(e => e.Trnumber)
                    .HasMaxLength(35)
                    .HasColumnName("TRNumber");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");
            });

            modelBuilder.Entity<ViewTransClb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTransCLB");

                entity.Property(e => e.BankAdd2)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add2");

                entity.Property(e => e.BankAdd3)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add3");

                entity.Property(e => e.BankAdd4)
                    .HasMaxLength(35)
                    .HasColumnName("Bank_Add4");

                entity.Property(e => e.BankName)
                    .HasMaxLength(70)
                    .HasColumnName("Bank_Name");

                entity.Property(e => e.BranCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("Bran_Code");

                entity.Property(e => e.BranName)
                    .HasMaxLength(70)
                    .HasColumnName("Bran_Name");

                entity.Property(e => e.Cicdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("CICDate");

                entity.Property(e => e.Clbcomm).HasColumnName("CLBComm");

                entity.Property(e => e.Clccy)
                    .HasMaxLength(3)
                    .HasColumnName("CLCCy");

                entity.Property(e => e.ClccyAmt).HasColumnName("CLCcyAmt");

                entity.Property(e => e.Clnumber)
                    .HasMaxLength(15)
                    .HasColumnName("CLNumber");

                entity.Property(e => e.CollectBank).HasMaxLength(20);

                entity.Property(e => e.RecType).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewTrnostro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTRnostro");

                entity.Property(e => e.Allocation).HasMaxLength(10);

                entity.Property(e => e.Amend)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.BalPd).HasColumnName("BalPD");

                entity.Property(e => e.Bcnty)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("BCnty");

                entity.Property(e => e.Bname)
                    .HasMaxLength(144)
                    .HasColumnName("BName");

                entity.Property(e => e.Cable).HasColumnName("CABLE");

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.Collection)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTION");

                entity.Property(e => e.Collectrefund)
                    .HasMaxLength(25)
                    .HasColumnName("collectrefund");

                entity.Property(e => e.Commadvice).HasColumnName("COMMADVICE");

                entity.Property(e => e.Commamend).HasColumnName("COMMAMEND");

                entity.Property(e => e.Commcertify).HasColumnName("COMMCERTIFY");

                entity.Property(e => e.Commcic).HasColumnName("COMMCIC");

                entity.Property(e => e.Commcip).HasColumnName("COMMCIP");

                entity.Property(e => e.Commibc).HasColumnName("COMMIBC");

                entity.Property(e => e.Commlc).HasColumnName("COMMLC");

                entity.Property(e => e.Commlieu).HasColumnName("COMMLIEU");

                entity.Property(e => e.Commnego).HasColumnName("COMMNEGO");

                entity.Property(e => e.Commother).HasColumnName("COMMOTHER");

                entity.Property(e => e.Commtran).HasColumnName("COMMTRAN");

                entity.Property(e => e.CorrBank)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Corr_BANK");

                entity.Property(e => e.CorrCnty)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("Corr_Cnty");

                entity.Property(e => e.CorrName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Corr_Name");

                entity.Property(e => e.CustCode).HasMaxLength(6);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DecreaseAmt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Decrease_Amt");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Dnumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DNumber");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Duty).HasColumnName("DUTY");

                entity.Property(e => e.Engage).HasColumnName("ENGAGE");

                entity.Property(e => e.EventDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EventFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventName).HasMaxLength(25);

                entity.Property(e => e.FlagDue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IncreaseAmt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Increase_Amt");

                entity.Property(e => e.IssBank)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISS_BANK");

                entity.Property(e => e.KeyNumber)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.LastReceiptNo).HasMaxLength(15);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Overdraw).HasColumnName("OVERDRAW");

                entity.Property(e => e.PayFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Payble).HasColumnName("PAYBLE");

                entity.Property(e => e.Penalty).HasColumnName("PENALTY");

                entity.Property(e => e.Postage).HasColumnName("POSTAGE");

                entity.Property(e => e.RecStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Taxamt).HasColumnName("TAXAMT");

                entity.Property(e => e.TenorType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TENOR_TYPE");

                entity.Property(e => e.Trseqno).HasColumnName("TRSeqno");

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<ViewVolumeCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewVolumeCom");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(8);

                entity.Property(e => e.CustName).HasMaxLength(180);

                entity.Property(e => e.Keynumber).HasMaxLength(20);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorType).HasColumnName("Tenor_Type");

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranDesc).HasMaxLength(50);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tranevent)
                    .HasMaxLength(20)
                    .HasColumnName("TRANEVENT");

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ViewVolumeCom1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewVolumeCom1");

                entity.Property(e => e.CenterId)
                    .HasMaxLength(4)
                    .HasColumnName("CenterID");

                entity.Property(e => e.CustCode).HasMaxLength(8);

                entity.Property(e => e.CustName).HasMaxLength(180);

                entity.Property(e => e.Keynumber).HasMaxLength(20);

                entity.Property(e => e.SendFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TenorType).HasColumnName("Tenor_Type");

                entity.Property(e => e.TranAccount).HasMaxLength(15);

                entity.Property(e => e.TranCcy).HasMaxLength(3);

                entity.Property(e => e.TranDept).HasMaxLength(4);

                entity.Property(e => e.TranDesc).HasMaxLength(50);

                entity.Property(e => e.TranMod).HasMaxLength(5);

                entity.Property(e => e.TranNature)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TranStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VouchDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Viewmasterpending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWMASTERPENDING");

                entity.Property(e => e.AuthCode).HasMaxLength(12);

                entity.Property(e => e.Ccy).HasMaxLength(3);

                entity.Property(e => e.Centerid)
                    .HasMaxLength(4)
                    .HasColumnName("CENTERID");

                entity.Property(e => e.CustCode).HasMaxLength(20);

                entity.Property(e => e.CustName).HasMaxLength(500);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventName).HasMaxLength(30);

                entity.Property(e => e.KeyNumber).HasMaxLength(35);

                entity.Property(e => e.Module).HasMaxLength(5);

                entity.Property(e => e.RecStatus).HasMaxLength(10);

                entity.Property(e => e.Reference).HasMaxLength(35);

                entity.Property(e => e.UserCode).HasMaxLength(12);
            });

            modelBuilder.Entity<Viewtmp14grpOscl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMP14GrpOSCL");

                entity.Property(e => e.BalAmt).HasColumnName("BAL_AMT");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCY");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.Facno)
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");
            });

            modelBuilder.Entity<Viewtmp24grpOscl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMP24GrpOSCL");

                entity.Property(e => e.BalAmt).HasColumnName("BAL_AMT");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .HasColumnName("CCY");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.Exchrate).HasColumnName("EXCHRATE");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");
            });

            modelBuilder.Entity<Viewtmp34grpOscl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMP34GrpOSCL");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");

                entity.Property(e => e.Flagdue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Module)
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");
            });

            modelBuilder.Entity<Viewtmp44grpOscl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMP44GrpOSCL");

                entity.Property(e => e.AvlAmt).HasColumnName("AVL_AMT");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.Bd)
                    .HasMaxLength(3)
                    .HasColumnName("BD");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FlagShare)
                    .HasMaxLength(6)
                    .HasColumnName("FLAG_SHARE");

                entity.Property(e => e.Flagdue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGDUE")
                    .IsFixedLength(true);

                entity.Property(e => e.HoldAmt).HasColumnName("HOLD_AMT");

                entity.Property(e => e.LimitAmt).HasColumnName("LIMIT_AMT");

                entity.Property(e => e.LimitCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("LIMIT_CODE");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ShareAmt).HasColumnName("SHARE_AMT");
            });

            modelBuilder.Entity<ViewtmpgrpOscl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMPGrpOSCL");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(20)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("FACNO");
            });

            modelBuilder.Entity<ViewtmpgrpOscl1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWTMPGrpOSCL1");

                entity.Property(e => e.BalAmtThb).HasColumnName("BAL_AMT_THB");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("CUST_CODE");

                entity.Property(e => e.Facno)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("FACNO");

                entity.Property(e => e.FlagShare)
                    .HasMaxLength(6)
                    .HasColumnName("FLAG_SHARE");

                entity.Property(e => e.HoldAmt).HasColumnName("HOLD_AMT");

                entity.Property(e => e.LimitAmt).HasColumnName("LIMIT_AMT");

                entity.Property(e => e.LimitCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("LIMIT_CODE");

                entity.Property(e => e.NetAvlAmt).HasColumnName("NET_AVL_AMT");

                entity.Property(e => e.ShareAmt).HasColumnName("SHARE_AMT");
            });

            modelBuilder.Entity<VtempCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vtempCCS");

                entity.Property(e => e.CcsNo)
                    .HasMaxLength(20)
                    .HasColumnName("CCS_No");

                entity.Property(e => e.CustCif)
                    .HasMaxLength(20)
                    .HasColumnName("Cust_CIF");

                entity.Property(e => e.CustCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("Cust_Code");

                entity.Property(e => e.CustName)
                    .HasMaxLength(70)
                    .HasColumnName("Cust_Name");

                entity.Property(e => e.FacilityNo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasColumnName("Facility_No");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
